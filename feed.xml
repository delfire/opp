<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Pascal Programming</title>
    <description>Sacadas sobre Programação Orientada a Objetos e Object Pascal.
</description>
    <link>http://objectpascalprogramming.com/</link>
    <atom:link href="http://objectpascalprogramming.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Classes de Exceção</title>
        <description>&lt;p&gt;Devemos codificar uma Classe para cada tipo de Exceção ou utilizar apenas um único tipo?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-hans-eiskonen-136904.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;O conceito de Exceção foi criado para simplificar o código, removendo condicionais e verificações, para que o programador fique focado na lógica que o programa deve fazer ao invés de se preocupar em testar cada linha do código.&lt;/p&gt;

&lt;p&gt;A idéia principal é fazer com que todos os possíveis erros (exceções) sejam concentrados e verificados num ponto em comum.&lt;/p&gt;

&lt;p&gt;Esse ponto em comum pode ser único para todo o sistema, mas também pode ser um ponto em comum por Módulo, por &lt;em&gt;Unit&lt;/em&gt;, por Classe. Depende. Mas isso é um assunto para outro artigo.&lt;/p&gt;

&lt;p&gt;Nesse artigo o foco é outro. Vamos ter uma conversa se devemos criar ou não novos tipos de exceção para cada tipo de erro ou problema.&lt;/p&gt;

&lt;h2 id=&quot;classes-de-excecao&quot;&gt;Classes de Exceção&lt;/h2&gt;

&lt;p&gt;Divisão por zero. Erro na leitura de um &lt;em&gt;stream&lt;/em&gt;. Erro de banco de dados…&lt;/p&gt;

&lt;p&gt;Temos Classes de Exceção definida para cada um desses erros. Em qualquer linguagem é assim.&lt;/p&gt;

&lt;p&gt;Por quê?&lt;/p&gt;

&lt;p&gt;Não é para tomada de decisões, com certeza. Você não deve mudar o fluxo de um programa de acordo com a exceção gerada. Todas as exceções tem um único objetivo: parar o fluxo normal do programa.&lt;/p&gt;

&lt;p&gt;Para o usuário não importa o Tipo da Classe, mas sim a &lt;strong&gt;mensagem&lt;/strong&gt; que é exibida quando um erro ocorre.&lt;/p&gt;

&lt;p&gt;Uma exceção define um ponto de ruptura no fluxo do código. A execução normal é interrompida e o fluxo vai para o ponto de tratamento das exceções.&lt;/p&gt;

&lt;p&gt;Então não haveria necessidade de criar novos tipos de Classes.
Basta informar ao usuário o que ocorreu. A mensagem.&lt;/p&gt;

&lt;p&gt;No entanto… eu vejo um motivo para criar novos Tipos de Exceções: &lt;a href=&quot;/posts/codigo-duplicado-talvez-nao/&quot;&gt;Reaproveitamento&lt;/a&gt; de código.&lt;/p&gt;

&lt;p&gt;Por exemplo, se um arquivo não é encontrado poderíamos gerar uma exceção do tipo &lt;code&gt;Exception&lt;/code&gt; — a exceção mais genérica — ou criar uma nova Classe &lt;code&gt;EFileNotFound&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para dar a informação ao usuário, as duas exceções abaixo são equivalentes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;raise Exception.CreateFmt(&#39;File %s not found&#39;, [&#39;foo.txt&#39;]);

raise EFileNotFound.Create(&#39;foo.txt&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A diferença é que &lt;code&gt;EFileNotFound&lt;/code&gt; já encapsula a mensagem &lt;em&gt;“File %s not found”&lt;/em&gt; e não precisamos repetir a mesma mensagem toda vez que quisermos dizer ao usuário que um arquivo não foi encontrado.&lt;/p&gt;

&lt;p&gt;Assim fica fácil mudar a mensagem num único ponto no código.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Não utilize Tipos de Classes de Exceção para controlar o fluxo do programa. Isso é errado.&lt;/p&gt;

&lt;p&gt;Toda Exceção &lt;em&gt;deve&lt;/em&gt; definir um ponto de ruptura. Algo de muito errado aconteceu. Para tudo. Não importa o Tipo de Classe.&lt;/p&gt;

&lt;p&gt;Para o usuário apenas a mensagem importa. Basta ser bem explicativa.&lt;/p&gt;

&lt;p&gt;Devemos criar novas Classe de Exceção apenas para reaproveitar e encapsular informações.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/classes-de-excecao/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/classes-de-excecao/</guid>
      </item>
    
      <item>
        <title>Constantes Públicas</title>
        <description>&lt;p&gt;Quantas vezes você precisou instanciar uma Classe mas não sabia, com exatidão, o valor a passar em algum argumento do construtor? Essa dúvida quase sempre acontece com argumentos do tipo &lt;em&gt;String&lt;/em&gt; e a maioria das API’s disponibilizam constantes para serem utilizados nos argumentos.&lt;/p&gt;

&lt;p&gt;Bem, Constantes Públicas não deveriam ser utilizadas em projetos Orientados a Objetos.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-ty8v7jjcgvg-pierre-bouillot.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Em linguagens puramente procedurais como &lt;code&gt;C&lt;/code&gt;, por exemplo, constantes são normalmente utilizadas. Não há nada de errado com isso.&lt;/p&gt;

&lt;p&gt;No entanto, em projetos Orientados a Objetos, não há sentido em continuarmos utilizando o pensamento procedural de &lt;code&gt;C&lt;/code&gt;, ou seja, disponibilizando &lt;em&gt;Constantes Públicas&lt;/em&gt; para serem utilizadas como argumentos de Métodos e &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;Construtores&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;constantes-publicas&quot;&gt;Constantes Públicas&lt;/h2&gt;

&lt;p&gt;Eu já expliquei nesse &lt;a href=&quot;/posts/tipos-primitivos-nos-argumentos/&quot;&gt;artigo&lt;/a&gt; que utilizar tipos primitivos em argumentos não é uma boa ideia na maioria dos casos. O problema é agravado quando utilizamos argumentos do tipo &lt;em&gt;String&lt;/em&gt;, pois o valor pode ser qualquer sequência de caracteres.&lt;/p&gt;

&lt;p&gt;Vejamos um exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var
  S: IString;
begin
  S := TStringBuilder.New(
    TFile.New(&#39;foo.txt&#39;).Stream,
    &#39;UTF-8&#39;
  );
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As Classes acima não fazem parte da RTL, são apenas exemplos.&lt;/p&gt;

&lt;p&gt;Vejamos. Uma Classe &lt;code&gt;TStringBuilder&lt;/code&gt; recebe dois argumentos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Um &lt;em&gt;Stream&lt;/em&gt; de dados;&lt;/li&gt;
  &lt;li&gt;Uma &lt;em&gt;String&lt;/em&gt; que corresponde ao &lt;em&gt;encoding&lt;/em&gt; que será utilizado.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Quais as chances do programador passar um argumento inválido no segundo parâmetro? Ele poderia escrever assim &lt;code&gt;UTF-8&lt;/code&gt;, assim &lt;code&gt;UTF8&lt;/code&gt;, assim &lt;code&gt;utf-8&lt;/code&gt;, assim &lt;code&gt;utf8&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;Para não haver erros de digitação, os programadores de API’s disponibilizam Constantes Públicas, exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var
  S: IString;
begin
  S := TStringBuilder.New(
    TFile.New(&#39;foo.txt&#39;).Stream,
    UTF8_ENCODING
  );
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, agora tá “perfeito”. Não haverá erro de digitação, pois não é mais uma &lt;em&gt;String&lt;/em&gt;, mas sim uma Constante que o compilador pode checar.&lt;/p&gt;

&lt;p&gt;O problema, no entanto, é que o &lt;a href=&quot;/posts/tipos-primitivos-nos-argumentos/#argumento&quot;&gt;argumento&lt;/a&gt; continua sendo do tipo &lt;em&gt;String&lt;/em&gt; e mesmo o &lt;em&gt;code-completion&lt;/em&gt; não pode ajudá-lo para lhe mostrar onde está a Constante (se existir!) para utilizá-la no argumento.&lt;/p&gt;

&lt;p&gt;O que fazer?&lt;/p&gt;

&lt;h2 id=&quot;objetos&quot;&gt;Objetos&lt;/h2&gt;

&lt;p&gt;Se você quer representar um &lt;code&gt;UTF8String&lt;/code&gt; por quê não criar uma Classe que instancia um Objeto que representa exatamente o que você precisa?&lt;/p&gt;

&lt;p&gt;Vamos refatorar o código:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var
  S: IString;
begin
  S := TUTF8String.New(
    TFile.New(&#39;foo.txt&#39;).Stream
  );
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Muito mais &lt;a href=&quot;/posts/menos-e-mais/&quot;&gt;simples&lt;/a&gt; e direto, não acha?&lt;/p&gt;

&lt;p&gt;Então você pensa: “Mas eu terei uma Classe para cada tipo de &lt;em&gt;encoding&lt;/em&gt; no meu código?”&lt;/p&gt;

&lt;p&gt;Sim! Mas não pense que você terá duplicação de código por causa disso.&lt;/p&gt;

&lt;h2 id=&quot;reutilizando&quot;&gt;Reutilizando&lt;/h2&gt;

&lt;p&gt;Sabemos que já existem muitas funções para trabalhar com &lt;em&gt;encoding&lt;/em&gt; de &lt;em&gt;String&lt;/em&gt; em qualquer linguagem. Mas aqui trabalhamos com Objetos, então… criamos Objetos.&lt;/p&gt;

&lt;p&gt;No entanto, não queremos “reinventar a roda”. Precisamos reutilizar as funções já existentes, sejam funções &lt;em&gt;built-in&lt;/em&gt; ou de alguma &lt;em&gt;lib&lt;/em&gt; de terceiros. Não importa.&lt;/p&gt;

&lt;p&gt;No seu código Orientado a Objetos você não deve expor esses &lt;em&gt;detalhes tecnológicos&lt;/em&gt; para seu &lt;em&gt;domínio&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Então, como fazer?&lt;/p&gt;

&lt;p&gt;Na sua &lt;em&gt;Unit&lt;/em&gt;, você irá implementar uma Classe Privada. Essa Classe irá receber sim, um argumento do tipo &lt;em&gt;String&lt;/em&gt;. Mas não há problema, pois a Classe é privada à &lt;em&gt;Unit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Essa Classe teria uma implementação assim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type
  TEncodedString = class(TInterfacedObject, IString)
  private
    FEncoding: string;
  public
    constructor Create(
      Stream: IDataStream; 
      const Encoding: string
    );
    class function New(
      Stream: IDataStream; 
      const Encoding: string
    ): IString;
    function Value: string;
    // more methods...
  end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cada Classe especialista, como a &lt;code&gt;TUTF8String&lt;/code&gt; por exemplo irá delegar para a &lt;code&gt;TEncodedString&lt;/code&gt; a construção da &lt;em&gt;String&lt;/em&gt; de retorno.&lt;/p&gt;

&lt;p&gt;O argumento &lt;code&gt;Encoding&lt;/code&gt; poderá ser uma &lt;em&gt;String&lt;/em&gt; pura ou uma &lt;strong&gt;Constante Privada&lt;/strong&gt; — seja uma Constante privada da Classe ou da &lt;em&gt;Unit&lt;/em&gt;, não importa.&lt;/p&gt;

&lt;p&gt;Então, considerando que &lt;code&gt;IString&lt;/code&gt; tem o método &lt;code&gt;function Value: string&lt;/code&gt;, a implementação desse método em &lt;code&gt;TUTF8String&lt;/code&gt; seria algo assim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function TUTF8String.Value: string;
begin
  Result := 
    TEncodedString.New(
      FStream, &#39;UTF-8&#39;
    ).Value
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nesse exemplo vemos que &lt;code&gt;TUTF8String&lt;/code&gt; está delegando o trabalho para &lt;code&gt;TEncodedString&lt;/code&gt; passando sua instância de &lt;code&gt;FStream&lt;/code&gt; e o &lt;em&gt;encoding&lt;/em&gt; alvo.&lt;/p&gt;

&lt;p&gt;Mas para todo o sistema, &lt;code&gt;TEncodedString&lt;/code&gt; não existe.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Constantes Públicas não devem ser utilizadas na programação Orientada a Objetos pelas razões explicadas acima. Porém, devido a questões tecnológicas e detalhes de implementação, as Constantes Privadas ainda são úteis, mas não essenciais.&lt;/p&gt;

&lt;p&gt;Ao invés de tentar deixar uma Classe mais genérica possível, com inúmeras possibilidades de parametrização por constantes, divida-a em várias Classes &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;especialistas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/constantes-publicas/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/constantes-publicas/</guid>
      </item>
    
      <item>
        <title>Scripts para Compilar FreePascal e Lazarus no Windows</title>
        <description>&lt;p&gt;Saiba como compilar uma nova versão do compilador FreePascal ou atualizar a IDE Lazarus utilizando diretamente o código fonte.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-v0zxmzw_-e0-john-mark-kuznietsov.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;A maneira mais fácil de começar a utilizar o FreePascal e Lazarus não é tentando compilar o compilador ou a IDE utilizando Scripts.&lt;/p&gt;

&lt;p&gt;Hoje em dia temos algumas opções de instalação:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://freepascal.org/download.var&quot;&gt;FPC Oficial&lt;/a&gt; ➝ apenas o compilador&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lazarus-ide.org/&quot;&gt;Lazarus Oficial&lt;/a&gt; ➝ FPC + IDE&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getlazarus.org/setup/?download&quot;&gt;GetLazarus&lt;/a&gt; ➝ FPC+Lazarus (versão modificada)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://newpascal.org/download.html&quot;&gt;NewPascal&lt;/a&gt; ➝ FPC+Lazarus (versão modificada)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pilotlogic.com/&quot;&gt;CodeTyphon&lt;/a&gt; ➝ versão ultra-modificada&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Caso você queira se aventurar em outra IDE que não é compatível com o Delphi mas é multiplataforma — todos os &lt;em&gt;widgets&lt;/em&gt; tem a mesma aparência em qualque Sistema Operacional — você pode tentar a IDE &lt;a href=&quot;http://www.msegui.com/&quot;&gt;MSE+GUI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você só “ouviu falar” de Lazarus e não sabia que existiam tantas opções para programar em &lt;em&gt;Object Pascal&lt;/em&gt; bem, deve ter sido uma boa surpresa, não?&lt;/p&gt;

&lt;h2 id=&quot;porque-utilizar-scripts&quot;&gt;Por que utilizar Scripts&lt;/h2&gt;

&lt;p&gt;Se existem tantas opções de instaladores automatizados, por quê precisamos de scripts para compilação manual?&lt;/p&gt;

&lt;p&gt;Há aqueles programadores que querem ter o controle total de seu compilador e IDE.&lt;/p&gt;

&lt;p&gt;Há aqueles que modificam o compilador, FCL ou RTL.&lt;/p&gt;

&lt;p&gt;Há aqueles que modificam a IDE, a LCL, os componentes e as ferramentas.&lt;/p&gt;

&lt;p&gt;Há aqueles que ajudam a comunidade FreePascal. Baixam as últimas versões do código fonte, compilam, testam e mandam &lt;em&gt;feedback&lt;/em&gt; através do &lt;a href=&quot;http://bugs.freepascal.org/main_page.php&quot;&gt;Mantis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você é um desses, você &lt;strong&gt;precisa&lt;/strong&gt; saber como compilar e instalar o FreePascal e Lazarus, utilizando diretamente o código fonte.&lt;/p&gt;

&lt;h2 id=&quot;compilar-com-scripts&quot;&gt;Compilar utilizando Scripts&lt;/h2&gt;

&lt;p&gt;Eu nunca executei nenhum instalador do FreePascal ou Lazarus. Na época que comecei a utilizar tais ferramentas, os instaladores não eram tão bons. Além disso eu queria me manter atualizado com os fontes, pois melhorias eram (ainda são) feitas diariamente.&lt;/p&gt;

&lt;p&gt;Você sabia que o compilador FreePascal é compilado em FreePascal? Isso mesmo! Você precisa ter a última versão do compilador estável para poder compilar uma nova versão do próprio compilador. Isso é chamdo de &lt;a href=&quot;https://en.wikipedia.org/wiki/Self-hosting&quot;&gt;Self-hosting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A única maneira de estar sempre atualizado é acompanhar as mudanças dos fontes (FreePascal e Lazarus) através do SVN ou &lt;em&gt;feed&lt;/em&gt;, atualizar seus fontes local e compilar ambos no seu computador.&lt;/p&gt;

&lt;p&gt;Então eu precisava ter um script mínimo para fazer essa tarefa. Na época eu utilizava Windows XP (ainda utilizo em alguns lugares), então um Script &lt;em&gt;Batch&lt;/em&gt; seria simples e eficaz.&lt;/p&gt;

&lt;p&gt;Eu utilizava a versão 2.”alguma coisa” do compilador FreePascal. Fiz o script e, depois de algum tempo de uso, publiquei-o para a comunidade &lt;a href=&quot;http://wiki.freepascal.org/Installing_Lazarus#Compiling.2Finstalling_FPC_and_Lazarus_from_Sources_of_SVN_.28Win32.29&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dias atrás eu descobri que o script vem sendo atualizado pela comunidade — OpenSource é legal, não? — e isso me inspirou escrever esse artigo.&lt;/p&gt;

&lt;h2 id=&quot;aprimoramentos&quot;&gt;Aprimoramentos&lt;/h2&gt;

&lt;p&gt;Fui utilizando esse script inicial por bastante tempo, mas como eu fazia testes com novas funcionailidades do FPC e Lazarus, precisei ir incrementando o script — hoje tenho alguns scripts — conforme minhas necessidades pessoais.&lt;/p&gt;

&lt;p&gt;Hoje em dia tudo está mais fácil. Se você quiser instalar FPC e Lazarus, utilizando o fontes e sem querer aprender sobre esse processo, poderá utilizar o projeto &lt;a href=&quot;http://wiki.lazarus.freepascal.org/fpcup&quot;&gt;fpCup&lt;/a&gt;. Tem até um aprimoramento desse projeto chamado &lt;a href=&quot;https://github.com/newpascal/fpcupdeluxe&quot;&gt;fpCup Deluxe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bem, eu não tinha nada disso na época, então fui aprimorando meus scripts que alias, funcionam muito bem até hoje, obrigado.&lt;/p&gt;

&lt;p&gt;Ontem eu transformei esses scripts num projeto no GitHub para que a comunidade também possa aprimorá-los.&lt;/p&gt;

&lt;p&gt;Eu nomeei esse projeto de &lt;strong&gt;fp-scripts&lt;/strong&gt;. 
Aqui está o &lt;a href=&quot;https://github.com/mdbs99/fp-scripts&quot;&gt;link&lt;/a&gt; do projeto no GitHub. Não deixe de ler o &lt;a href=&quot;https://github.com/mdbs99/fp-scripts/blob/master/README.md&quot;&gt;README&lt;/a&gt; do projeto.&lt;/p&gt;

&lt;p&gt;Futuramente vou subir para o GitHub minha versão do FPC, Lazarus e Libs que utilizo nos meus projetos em produção.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Esse artigo mostrou opções de instalação do FreePascal, Lazarus ou outros “sabores” para desenvolvimento em &lt;em&gt;Object Pascal&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Vimos também que é necessário conhecermos a compilação através de scripts para termos um maior controle e opções sobre nosso ambiente.&lt;/p&gt;

&lt;p&gt;Criei um novo projeto no GitHub chamado &lt;a href=&quot;https://github.com/mdbs99/fp-scripts&quot;&gt;fp-scripts&lt;/a&gt; que contém scripts para compilação e instalação do FPC e Lazarus, no Windows, através de simples scripts em &lt;em&gt;Batch&lt;/em&gt;. Espero que você e a comunidade goste.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/scripts-para-compilar-fpc-e-lazarus-no-windows/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/scripts-para-compilar-fpc-e-lazarus-no-windows/</guid>
      </item>
    
      <item>
        <title>Métodos Privados</title>
        <description>&lt;p&gt;Existe um pensamento que diz que todo Método Privado deveria ser, na verdade, a implementação de outro Objeto.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-q6vbepqsojc-rita-morais.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Dizemos que todo Objeto deve implementar apenas uma única &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;responsabilidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Então a ideia que todo Método Privado deveria ser outro Objeto faz sentido, pelo menos na teoria.&lt;/p&gt;

&lt;p&gt;Se o Objeto deveria ter apenas uma única responsabilidade, por que eu teria mais Métodos (privados) além dos Métodos Públicos?&lt;/p&gt;

&lt;p&gt;Não seriam os Métodos Públicos suficientes para implementar apenas uma única responsabilidade?&lt;/p&gt;

&lt;p&gt;É o que vamos tentar entender nesse artigo.&lt;/p&gt;

&lt;h2 id=&quot;implementando-um-objeto&quot;&gt;Implementando um Objeto&lt;/h2&gt;

&lt;p&gt;Um Objeto deve ser a &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;representação&lt;/a&gt; de uma Entidade. Mas não a representação total da Entidade. Isso seria quase impossível ou muito complexo.&lt;/p&gt;

&lt;p&gt;Temos que abstrair ao máximo, ou seja, implementar apenas o comportamento relevante para o software.&lt;/p&gt;

&lt;p&gt;Por isso é possível termos Objetos pequenos, coesos e que implementam apenas uma única responsabilidade.&lt;/p&gt;

&lt;p&gt;Vejamos alguns exemplos para determinarmos se há sentido termos Métodos Privados, mesmo em Objetos simples.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-1&quot;&gt;Exemplo 1&lt;/h4&gt;

&lt;p&gt;No código abaixo temos uma Classe que é inicilizada com uma &lt;code&gt;string&lt;/code&gt; que representa o nome do empregado.&lt;/p&gt;

&lt;p&gt;Há uma Método Privado para “limpar” o nome. Essa limpeza consiste em retirar os espaços em branco do início e do fim do nome. Depois há uma verificação se a &lt;code&gt;string&lt;/code&gt; não ficou em branco no final. Bem simples.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/bbdc509810890ea5724a94a021f16791.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Apesar dessa simplicidade aparente, esse código possui vários erros ou violações de princípios.&lt;/p&gt;

&lt;p&gt;O primeiro problema é conceitual: Você não deve fazer &lt;a href=&quot;/posts/validacoes-no-construtor/&quot;&gt;validações no construtor&lt;/a&gt;, pois segundo Alan Kay — inventor do nome/conceito Orientação a Objetos — &lt;a href=&quot;http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en&quot;&gt;aqui&lt;/a&gt; nesse email, ele diz: &lt;em&gt;“Programação Orientada a Objetos (para mim) significa apenas mensagens, encapsular e esconder estado, e &lt;strong&gt;extrema ligação tardia de todas as coisas&lt;/strong&gt;“&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primeiro você cria os Objetos, depois eles interagem. Se você for validando e/ou executando rotinas a medida que vai criando seus Objetos, você não está programando Orientado a Objetos, isso é Programação Procedural.&lt;/p&gt;

&lt;p&gt;Você nem deve chamar nenhum Método no construtor, pois esses Métodos podem gerar algum problema e o Objeto pode não ser criado.&lt;/p&gt;

&lt;p&gt;O segundo problema é que um Empregado não deveria “limpar o nome recebido”. Não faz sentido.&lt;/p&gt;

&lt;p&gt;O Nome deveria ser um &lt;a href=&quot;https://www.youtube.com/watch?v=nia7UqcpOAc&quot;&gt;Objeto&lt;/a&gt; e ele iria validar a si mesmo; retornar uma string válida, sem espaços, formatada, talvez até com o nome do meio abreviado.&lt;/p&gt;

&lt;p&gt;Em outras palavras, o Método &lt;code&gt;CleanName&lt;/code&gt; não deveria existir, mesmo sendo privado.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-2&quot;&gt;Exemplo 2&lt;/h4&gt;

&lt;p&gt;Então para corrigir o exemplo acima, vamos implementar a Classe &lt;code&gt;TEmployeeName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora sabemos que essa Classe deve ser responsável por tudo que envolve &lt;code&gt;Nome&lt;/code&gt;, então vamos incrementar e por alguns Métodos como &lt;code&gt;FirstName&lt;/code&gt; e &lt;code&gt;LastName&lt;/code&gt;. Assim esses Métodos poderão ser reutilizados por toda a aplicação e você não precisará ficar fazendo esses algoritmos em partes do código que não tem nada haver com manipulação de &lt;code&gt;Nome&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mas veja que eu introduzi um Método Privado.&lt;/p&gt;

&lt;p&gt;Esse Método tem três responsabilidades — portanto não está 100% correto, mas serve de exemplo — que é 1) implementar o algoritmo para obter o &lt;code&gt;FirstName&lt;/code&gt;, 2) implementar outro algoritmo para obter o &lt;code&gt;LastName&lt;/code&gt; e 3) também está fazendo &lt;em&gt;cache&lt;/em&gt; dos dados.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/a303d0bf83930fcf580aee818ee23a52.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Essa Classe é tão simples que não haveria necessidade de existir esse Método Privado, porém imagine que um Objeto dessa Classe seja muito utilizado e precisa de muita performance.&lt;/p&gt;

&lt;p&gt;Nesse caso o Método Privado está fazendo um &lt;em&gt;cache&lt;/em&gt; dos dados, assim não será necessário “calcular” as partes dos nomes sempre que executarmos esses Métodos.&lt;/p&gt;

&lt;p&gt;Essa é das ocasições que um Método Privado ajuda e é bem vindo. O Objeto é criado sem interferências, rápido, sem cálculos. Depois, se um de seus Métodos for realmente executado, o Objeto faz as devidas validações e execuções. Para o mundo externo é indiferente, já que ninguém sabe o que acontece dentro de um Objeto.&lt;/p&gt;

&lt;p&gt;Se você está curioso para saber como seria a “implementação pura” Orientada a Objetos, teríamos que implementar outra Classe para &lt;a href=&quot;/posts/decorator-pattern/&quot;&gt;decorar&lt;/a&gt; a &lt;code&gt;TEmployeeName&lt;/code&gt; somente para fazermos o &lt;em&gt;cache&lt;/em&gt; dos dados. Então cada Método de &lt;code&gt;TEmployeeName&lt;/code&gt; teria a implementação dos cálculos de partes do nome nos próprios Métodos Público — a Classe ficaria com menos código e mais simples.&lt;/p&gt;

&lt;p&gt;A Classe decoradora ficaria mais ou menos assim:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/f9f7aa261bd2e317df503f974429560f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas você sempre teria que instanciar esses dois Objetos, um decorando o outro.&lt;/p&gt;

&lt;p&gt;Se vale ou não a pena criar essa Classe, é você quem decide ou as Regras de Négócio decidem por você.&lt;/p&gt;

&lt;p&gt;Bom é saber que temos opções. Talvez começar a implementação com Métodos Privados e depois, se for o caso, refatorá-los.&lt;/p&gt;

&lt;p&gt;Veja que é possível fazer um design melhor, sem Métodos Privados, mas sempre temos que ver os prós e contras.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Em teoria um Objeto não deveria ter Métodos Privados, porém vimos que existem casos de natureza tecnológica no qual os Métodos Privados auxiliam a codificação.&lt;/p&gt;

&lt;p&gt;Como eu já disse em outro &lt;a href=&quot;/posts/singleton-e-um-anti-padrao/&quot;&gt;artigo&lt;/a&gt;: &lt;em&gt;“Não devemos ser puristas em Orientação a Objetos se não há nenhum benefício”&lt;/em&gt; ou se o benefício for apenas estético, talvez.&lt;/p&gt;

&lt;p&gt;Então fique atento sobre os Métodos Privados que você está criando. Veja se eles deveriam estar em outro Objeto. Mas não perca tempo buscando a perfeição, pois um Método Privado sempre poderá ser refatorado no futuro sem nenhum problema.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/metodos-privados/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/metodos-privados/</guid>
      </item>
    
      <item>
        <title>A Definição de Objeto</title>
        <description>&lt;p&gt;Nesse artigo/vídeo eu explico a definição correta de Objeto dentro do paradigma da Orientação a Objetos.&lt;/p&gt;

&lt;!--more--&gt;

&lt;iframe width=&quot;600&quot; height=&quot;355&quot; src=&quot;https://www.youtube.com/embed/nia7UqcpOAc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Então, o que é um Objeto?&lt;/p&gt;

&lt;p&gt;Para responder a essa pergunta precisamos 
saber o &lt;a href=&quot;/posts/delegacao-de-implementacao-de-interfaces/#contextos&quot;&gt;Contexto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No contexto puramente técnico, um Objeto 
nada mais é do que uma estrutura com dados
e funções.&lt;/p&gt;

&lt;p&gt;No contexto da &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/&quot;&gt;Orientação a Objetos&lt;/a&gt;,
no  entanto, um Objeto é a representação 
abstraída de uma Entidade.&lt;/p&gt;

&lt;p&gt;Uma &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;Entidade&lt;/a&gt; pode ser uma pessoa, um animal, 
uma bola, um pixel, um relatório, um arquivo,
um diretório… qualquer coisa que deva ser 
representado dentro do software é um forte 
candidato a ser um Objeto.&lt;/p&gt;

&lt;p&gt;Mas muitos desenvolvedores não conseguem 
fazer essa distinção, entre o contexto técnico e o contexto da arquitetura.&lt;/p&gt;

&lt;p&gt;Eles continuam enxergando um Objeto (apenas) 
como uma estrutura de dados e funções e não 
conseguem entender a diferença entre programação 
Procedural e a Orientada a Objetos.&lt;/p&gt;

&lt;h2 id=&quot;abstracoes-e-camadas&quot;&gt;Abstrações e Camadas&lt;/h2&gt;

&lt;p&gt;Desenvolvedores precisam entender que existem 
abstrações e camadas para o contexto Técnico 
e também para o contexto da Arquitetura.&lt;/p&gt;

&lt;p&gt;Desde a época do cartão perfurado, passando 
pela linguagem ASSEMBLY, até as linguagens 
mais modernas de hoje em dia, os engenheiros 
foram adicionando mais e mais camadas e 
abstrações às linguagens.&lt;/p&gt;

&lt;p&gt;As linguagens mais modernas hoje são frutos 
dessas adições de abstrações e camadas técnicas, 
com o objetivo de melhorar o código e a 
codificação em si.&lt;/p&gt;

&lt;p&gt;Paradigmas como a Orientação a Objetos 
adicionam abstrações para melhorar a arquitetura.&lt;/p&gt;

&lt;p&gt;Mas cada abstração ou camada, seja técnica ou 
arquitetural, são apenas simplificações da 
realidade, pois para o computador, no fim, 
tudo será representado por “zeros e uns”.&lt;/p&gt;

&lt;p&gt;A maioria dos programadores entendem e utilizam 
as abstrações técnicas no dia-a-dia sem nem 
mesmo pensar sobre isso.&lt;/p&gt;

&lt;p&gt;Estou falando do uso de estruturas de repetição
 como FOR ou WHILE e estruturas condicionais 
 como IF ou CASE.&lt;/p&gt;

&lt;p&gt;Quando você utiliza uma estrutura FOR, por 
exemplo, o compilador irá gerar uma série de 
comandos ASSEMBLY com instruções GOTO.&lt;/p&gt;

&lt;p&gt;Você não pensa sobre isso, não é? É como se 
a estrutura FOR fosse um Objeto e você apenas 
espera que ele exerça seu trabalho depois de 
passar os argumentos de inicialização.&lt;/p&gt;

&lt;p&gt;Você deveria ter esse mesmo pensamento quanto 
estiver trabalhando com Objetos, dentro do 
paradigma da Orientação a Objetos.&lt;/p&gt;

&lt;h2 id=&quot;objetos&quot;&gt;Objetos&lt;/h2&gt;

&lt;p&gt;Olhe para um Objeto do mesmo modo que você 
olha para uma estrutura FOR, WHILE, IF, etc., 
ou seja, você não pensa como essas estruturas 
funcionam internamente (encapsulamento). 
Você só sabe quais são seus argumentos de 
inicialização (construtor) e espera que eles 
trabalhem (comportamento) corretamente.&lt;/p&gt;

&lt;p&gt;Orientação a Objetos é isso, apenas mais 
uma camada, mais uma abstração de arquitetura 
acima do código procedural.&lt;/p&gt;

&lt;p&gt;Entender esse conceito sutil é o início 
para você começar a utilizar a Orientação a 
Objetos da forma mais correta.&lt;/p&gt;

&lt;p&gt;Orientação Objetos não substitui o paradigma 
Procedural, ela o complementa; o aprimora.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Os computadores continuam trabalhando com a 
mesma  premissa procedural desde que eles 
foram inventados.&lt;/p&gt;

&lt;p&gt;O fato é que estamos presos a isso, de certa
forma.&lt;/p&gt;

&lt;p&gt;Mas podemos abstrair, podemos adicionar 
camadas que facilitem o desenvolvimento da 
arquitetura e entendimento do código. 
A Orientação a Objetos faz isso muito bem 
utilizando artefatos que nós chamamos de… Objetos.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/o-que-e-um-objeto/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/o-que-e-um-objeto/</guid>
      </item>
    
      <item>
        <title>Tipos Primitivos nos Argumentos</title>
        <description>&lt;p&gt;Se os Objetos conversam entre si utilizando mensagens, 
ou seja, através dos seus Métodos, por que utilizaríamos
Tipos Primitivos nos argumentos desses Métodos ao invés
de utilizarmos Objetos?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-3_i4nvi9d1k-randall-bruder.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Os Objetos conectam-se uns aos outros através de seus 
&lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtores&lt;/a&gt;
e Métodos, enviando argumentos uns aos outros.&lt;/p&gt;

&lt;p&gt;No paradigma da Orientação a Objetos, tudo são Objetos.
Inclusive os argumentos.
Bem, deveriam ser, pelo menos na maioria dos casos.&lt;/p&gt;

&lt;p&gt;Imagine um um formulário onde o usuário precisa digitar
seu &lt;em&gt;login&lt;/em&gt;. Esse formulário, que contém Objetos visuais
para capturar a digitação, irá enviar o &lt;em&gt;login&lt;/em&gt; digitado
à outro Objeto para validar a identificação.&lt;/p&gt;

&lt;p&gt;Seria o &lt;em&gt;login&lt;/em&gt; um Objeto ou apenas texto?&lt;/p&gt;

&lt;p&gt;Você pode pensar que o &lt;em&gt;login&lt;/em&gt; é apenas uma informação
simples, um tipo &lt;em&gt;string&lt;/em&gt;, apenas texto puro, não havendo
necessidade de um Objeto.&lt;/p&gt;

&lt;p&gt;Mas, não seria esse &lt;em&gt;“texto puro”&lt;/em&gt; também um Objeto?&lt;/p&gt;

&lt;p&gt;Tudo são Objetos na Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;Confuso?&lt;/p&gt;

&lt;h2 id=&quot;argumentos&quot;&gt;Argumentos&lt;/h2&gt;

&lt;p&gt;Tudo são Objetos, mas nem sempre os requisitos são
implementados como tal.
Os motivos são diversos, mas &lt;em&gt;simplicidade&lt;/em&gt; e &lt;em&gt;performance&lt;/em&gt;
sempre são citados como motivos plausíveis para o uso
de tipos primitivos nos argumentos.&lt;/p&gt;

&lt;p&gt;Utilizar tipos primitivos nos argumentos é um anti-padrão chamado
&lt;a href=&quot;http://enterprisecraftsmanship.com/2015/03/07/functional-c-primitive-obsession/&quot;&gt;&lt;em&gt;“Primitive Obsession”&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Então vamos ver esses motivos e tentar dismitificá-los.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;É claro que Objetos são “mais lentos” para trabalhar e
consomem “mais recursos” que os tipos primitivos.
No entanto a Orientação a Objetos é sobre a arquitetura
do sistema, deixando a performance por conta do compilador
e código de máquina gerado.&lt;/p&gt;

&lt;p&gt;A diminuição da performance — mesmo que mínima —
em sistemas Orientado a Objetos é um preço justo a se 
pagar devido a melhoria na arquitetura que o paradigma
da Orientação a Objetos nos traz.&lt;/p&gt;

&lt;p&gt;Na minha experiência, utilizando Objetos pequenos e simples,
que implementam apenas
&lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;uma única responsabilidade&lt;/a&gt;,
não há perda de performance significativa.&lt;/p&gt;

&lt;p&gt;Mas, ainda assim, se seu maior requisito for performance,
talvez a Orientação a Objetos não sirva para seu projeto…
talvez.&lt;/p&gt;

&lt;h3 id=&quot;simplicidade&quot;&gt;Simplicidade&lt;/h3&gt;

&lt;p&gt;Seriam os tipos primitivos mais &lt;a href=&quot;/posts/simplicidade/&quot;&gt;simples&lt;/a&gt;
de usar do que Objetos?&lt;/p&gt;

&lt;p&gt;De acordo com a minha experiência, na maioria das vezes, não.&lt;/p&gt;

&lt;p&gt;Pense bem: Quantas vezes você teve que passar uma &lt;em&gt;“Data de Nascimento”&lt;/em&gt;
como argumento de um Método e lá dentro ter que convertê-la
em &lt;em&gt;String&lt;/em&gt;, por exemplo, para exibir ao usuário?&lt;/p&gt;

&lt;p&gt;Quantas vezes passou um &lt;em&gt;“Nome Completo”&lt;/em&gt; por parâmetro como
sendo apenas uma &lt;em&gt;String&lt;/em&gt; mas depois teve que usar uma função
&lt;code&gt;Copy&lt;/code&gt; porque só queria exibir o &lt;em&gt;“Primeiro Nome”&lt;/em&gt; ou a primeira
parte do nome?&lt;/p&gt;

&lt;p&gt;Sem falar na &lt;a href=&quot;/posts/codigo-duplicado-talvez-nao/&quot;&gt;repetição de código&lt;/a&gt;
que poderia ocorrer com o uso dessas funções auxiliares em 
várias partes do código.&lt;/p&gt;

&lt;p&gt;Com Objetos seria &lt;strong&gt;muito mais simples&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Veja. Um Objeto &lt;em&gt;“Data de Nascimento”&lt;/em&gt; seria responsável por
algum cálculo de idade, além de retornar a si mesmo no formato
&lt;em&gt;String&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Um Objeto &lt;em&gt;“Nome Completo”&lt;/em&gt; seria responsável por retornar
o primeiro nome e sobrenome; talvez retornar tudo em maiúsculo
seria outro Método.&lt;/p&gt;

&lt;p&gt;Quer outro exemplo?&lt;/p&gt;

&lt;p&gt;Trabalho bastante com &lt;em&gt;GUID’s&lt;/em&gt;. Elas são utilizadas em meus
sistemas como chaves-primárias de registros.&lt;/p&gt;

&lt;p&gt;Se não me engano, o tipo &lt;code&gt;TGuid&lt;/code&gt; no &lt;em&gt;Object Pascal&lt;/em&gt; é um &lt;em&gt;record&lt;/em&gt;.
Não lembro, pois eu não o utilizo mais, não diretamente.&lt;/p&gt;

&lt;p&gt;Eu tenho minha própria Classe &lt;code&gt;TDataGuid&lt;/code&gt; que implementa uma
Interface &lt;code&gt;IDataGuid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Essa Classe tem alguns construtores com argumentos diferentes
para inicializar o &lt;a href=&quot;/posts/objetos-sem-estado/&quot;&gt;estado&lt;/a&gt;
do Objeto, que internamente é um &lt;code&gt;TGuid&lt;/code&gt;.
Posso receber uma &lt;em&gt;String&lt;/em&gt; com ou sem “{…}”, posso receber um &lt;code&gt;TGuid&lt;/code&gt;
ou mesmo não receber nada e inicializar o estado internamente.&lt;/p&gt;

&lt;p&gt;Por quê um Objeto ao invés de um “simples” &lt;em&gt;record&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Nos meus sistemas, um &lt;em&gt;GUID&lt;/em&gt; tem &lt;a href=&quot;/posts/objetos-pensam-e-tomam-decisoes/&quot;&gt;comportamento&lt;/a&gt;.
Ele não é apenas um &lt;a href=&quot;/posts/pensando-em-dados/&quot;&gt;dado&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo. Para exibição de um &lt;em&gt;GUID&lt;/em&gt; para o usuário basta
utilizar o Método &lt;code&gt;AsString&lt;/code&gt;.
Se eu quiser exibir apenas o “formato de digitação” — os 8
primeiros caracteres — basta utilizar o Método &lt;code&gt;AsShortString&lt;/code&gt;.
Se eu quiser o próprio &lt;code&gt;TGuid&lt;/code&gt; basta chamar &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Seria mais simples ficar fazendo conversões por todo o código
utilizando funções auxiliares ou utilizar um Objeto como esse?&lt;/p&gt;

&lt;p&gt;Acho que não há dúvidas aqui.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Quando você implementa Objetos da forma correta, o código
é &lt;em&gt;simplificado&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Essa ideia vai contra o pensamento da maioria dos programadores
procedurais que acham que utilizando tipos primitivos e funções
deixaria o código mais simples de entender e alterar.&lt;/p&gt;

&lt;p&gt;Ledo engano.&lt;/p&gt;

&lt;p&gt;É claro que podemos e devemos utilizar os tipos primitivos, mas
utilíze-os apenas como argumentos de Métodos privados, 
variáveis locais ou para Classes de infraestrutura.&lt;/p&gt;

&lt;p&gt;Para a comunicação entre Objetos de Negócio, utilize Objetos.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/tipos-primitivos-nos-argumentos/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/tipos-primitivos-nos-argumentos/</guid>
      </item>
    
      <item>
        <title>Código Duplicado, Talvez Não</title>
        <description>&lt;p&gt;É quase impossível não haver duplicação de código num programa real,
com pelo menos algumas dezenas de linhas.&lt;/p&gt;

&lt;p&gt;O importante é saber se essa duplicação é de Infraestrutura ou
de Regras de Negócio.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-ceukkv42o40-aaron-burden.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Sempre ouvimos falar que não se deve ter código duplicado num
sistema, mas eu tenho certeza que isso é quase impossível de 
conseguir.&lt;/p&gt;

&lt;p&gt;O que é uma duplicação de código?&lt;/p&gt;

&lt;p&gt;Se você tem duas linhas iguais, elas estão duplicadas?&lt;/p&gt;

&lt;p&gt;Bem, depende muito do &lt;em&gt;ponto de vista&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pra mim existem dois tipos de código: &lt;em&gt;Infraestrutura&lt;/em&gt; e &lt;em&gt;Regras de Negócio&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Código de Infraestrutura pode estar duplicado mas você &lt;em&gt;não&lt;/em&gt;
pode — ou não deveria — duplicar Código de Regras de Negócio.&lt;/p&gt;

&lt;p&gt;Simples assim.&lt;/p&gt;

&lt;p&gt;Mas num sistema onde tudo é código, como saber a diferença entre
um tipo e outro?&lt;/p&gt;

&lt;p&gt;Nesse artigo você aprenderá a dinstinção entre eles.&lt;/p&gt;

&lt;h2 id=&quot;infraestrutura&quot;&gt;Infraestrutura&lt;/h2&gt;

&lt;p&gt;Dou esse nome para todo código que faz parte da infraestrutura
para criação de Classes, implementação de Interfaces, instanciação
de Objetos, chamadas aos métodos, etc.&lt;/p&gt;

&lt;p&gt;Vou lhe dar um exemplo. Imagine que você tem uma Classe com três
argumentos no construtor. Toda vez que você instanciar um Objeto
dessa Classe você terá que &lt;em&gt;duplicar&lt;/em&gt; a mesma construção:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ob1 := TFoo.New(&#39;a&#39;, 1, &#39;z&#39;);
Ob2 := TFoo.New(&#39;b&#39;, 5, &#39;a&#39;);
  
// in other place...
Ob3 := TFoo.New(&#39;a&#39;, 1, &#39;z&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O código acima parece duplicado, não?&lt;/p&gt;

&lt;p&gt;Bem os Objetos &lt;code&gt;Ob1&lt;/code&gt; e &lt;code&gt;Ob2&lt;/code&gt; tem argumentos diferentes, então essas
linhas não são totalmente iguais, apenas bem similares. Então o que
você acha? Há duplicação aqui?&lt;/p&gt;

&lt;p&gt;Não.&lt;/p&gt;

&lt;p&gt;Mas e o &lt;code&gt;Ob3&lt;/code&gt;? Ele foi construído com a mesma assinatura de &lt;code&gt;Ob1&lt;/code&gt; 
mas em outra parte do programa. Isso é uma duplicação?&lt;/p&gt;

&lt;p&gt;Também não.&lt;/p&gt;

&lt;p&gt;O fato de haver 2 chamadas iguais num mesmo projeto não quer dizer 
que há uma duplicação de código. Se assim fosse, toda vez que você
codifica um &lt;code&gt;TStringList.Create&lt;/code&gt; estaria duplicando código.&lt;/p&gt;

&lt;p&gt;Quer outro exemplo? Vamos lá.&lt;/p&gt;

&lt;p&gt;Você tem uma Interface com dois métodos.
Toda Classe que implementar essa Interface terá que, obrigatoriamente,
&lt;em&gt;duplicar&lt;/em&gt; os dois métodos dessa Interface na Classe.&lt;/p&gt;

&lt;p&gt;Isso é uma duplicação? Não.&lt;/p&gt;

&lt;p&gt;Isso é &lt;em&gt;Código de Infraestrutura&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Poderia ser menos verboso implementar uma Interface? Talvez. 
Mas se a linguagem &lt;em&gt;exige&lt;/em&gt; que seja dessa forma,
então não é duplicação.&lt;/p&gt;

&lt;p&gt;O código de Infraestrutura são como “tijolos” no seu projeto.
Eles são iguais — ou bem parecidos — e você precisa deles dessa forma.&lt;/p&gt;

&lt;p&gt;Você irá vê-los por todo o projeto. As vezes ficará tentado a refatorar,
criando uma função — ou mesmo outro Objeto — para agrupar chamadas iguais
removendo, assim, a “duplicação” de código… mas, espere, essa nova função
também será duplicada toda vez que você utilizá-la, pois sempre será a 
mesma assinatura. Então, talvez…&lt;/p&gt;

&lt;p&gt;Impossível.&lt;/p&gt;

&lt;h2 id=&quot;regras-de-negocio&quot;&gt;Regras de Negócio&lt;/h2&gt;

&lt;p&gt;As Regras de Negócio são todo o tipo de código que não é de Infraestrutura.
São as implementações do Negócio do seu Cliente. São as Regras que os usuários
já utilizam mesmo sem haver um sistema informatizado. São os cálculos, as validações,
as restrições… as regras.&lt;/p&gt;

&lt;p&gt;Aqui &lt;em&gt;não&lt;/em&gt; pode haver duplicação. Se, por exemplo, há um cálculo de desconto
para determinado grupo de produtos, a implementação desse cálculo deverá estar em
apenas uma Classe.&lt;/p&gt;

&lt;p&gt;Isso é &lt;em&gt;Código de Regras de Negócio&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Seu Cliente poderá mudar essas regras e você deverá alterar a implementação de cada
uma delas apenas uma vez, num único ponto no código, para cada uma das Regras.&lt;/p&gt;

&lt;p&gt;Para toda Regra de Negócio deve existir um ou mais testes automatizados.
Esses Objetos que implementam as Regras não devem ter dependências externas que
impeçam os testes. Não podem depender de recursos como Banco de Dados ou arquivos
no disco. Todos os seus argumentos devem ser passados através dos
&lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtores&lt;/a&gt;
de suas Classes e, preferencialmente, todos esses Objetos devem ser
&lt;a href=&quot;/posts/objetos-imutaveis/&quot;&gt;imutáveis&lt;/a&gt;, garantindo que uma vez
criados eles não podem ser corrompidos de nenhuma forma.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Se você leu até aqui deve estar pensando: Ora, isso é óbvio!&lt;/p&gt;

&lt;p&gt;Bem, nem tanto, pois ainda tem programadores que desenvolvem suas Classes 
pensando apenas na reutilização e na não-duplicação de código de Infraestrutura.
A &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;herança de Classes&lt;/a&gt;
é o caminho mais utilizado para isso… erroneamente, é claro.&lt;/p&gt;

&lt;p&gt;Você deveria codificar suas Classes pelo que elas são sem se preocupar com 
reaproveitamento de &lt;em&gt;Código de Infraestrutura&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Uma asa-delta pode voar e fazer acrobacias como um pássaro, no entanto eles 
não devem ter uma subclasse em comum para “reutilizar” Código de Infraestrutura
afim de escrever menos.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;Código de Regras de Negócio&lt;/em&gt; é bem diferente. Não deve haver duplicações. Nunca.
Esse tipo de código é como um Manual de construção, ou seja, as Regras de construção.&lt;/p&gt;

&lt;p&gt;Você pode &lt;em&gt;duplicar&lt;/em&gt; as paredes da sua casa, mas não as &lt;em&gt;regras&lt;/em&gt; de como
fazer isso.&lt;/p&gt;

&lt;p&gt;Saiba distinguir essas diferenças.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/codigo-duplicado-talvez-nao/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/codigo-duplicado-talvez-nao/</guid>
      </item>
    
      <item>
        <title>Retrospectiva 2016</title>
        <description>&lt;p&gt;A um ano atrás eu tinha a minha frente um oceano infinito de Blogs.&lt;/p&gt;

&lt;p&gt;Há espaço para mais um blog?
Como fazer diferença?
Como ser notado nesse oceano que cresce exponencialmente
todos os dias?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-34343-cbjdurrrka-daiga-ellaby.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;inicio&quot;&gt;A apenas 1 ano atrás…&lt;/h2&gt;

&lt;p&gt;Mais um ano se foi, mas para esse blog foi apenas o primeiro
ano de vida.&lt;/p&gt;

&lt;p&gt;Nas minhas Férias em 2015 tive a ideia de criar um blog para
escrever sobre desenvolvimento de &lt;em&gt;software&lt;/em&gt; com foco na 
linguagem Object Pascal.&lt;/p&gt;

&lt;p&gt;Quando escrevia o primeiro artigo eu quase desisti.&lt;/p&gt;

&lt;p&gt;Pensei: — Mais um blog fará diferença dentre muitos outros?&lt;/p&gt;

&lt;p&gt;Eu não sabia se faria diferença, mas sentia que deveria escrever
um pouco sobre minha experiência, meu dia-a-dia e sobre a Orientação
a Objetos verdadeiramente aplicada.&lt;/p&gt;

&lt;p&gt;Os assuntos que eu queria escrever eu não encontrava em 
nenhum outro blog em Português, então, por quê não?&lt;/p&gt;

&lt;p&gt;Não desisti.&lt;/p&gt;

&lt;p&gt;Aqui estamos. Ano 2017. Total de &lt;a href=&quot;/archive/&quot;&gt;50 artigos&lt;/a&gt;.
Agora, 51 artigos.&lt;/p&gt;

&lt;p&gt;Minha meta era escrever 1 artigo semanalmente, durante 1 ano,
sem se importar se alguém estaria lendo. Sem se importar se 
alguém estaria se identificando com as ideias. Sem se importar
se faria diferença… apenas escrever e ver os resultados após
um ano.&lt;/p&gt;

&lt;p&gt;Falar sobre Object Pascal, uma linguagem “morta”?&lt;/p&gt;

&lt;p&gt;O fato é que fez diferença… e continua fazendo.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/lista-vip/&quot;&gt;inscrições&lt;/a&gt; para fazer parte da minha Lista VIP
cresce a cada dia.&lt;/p&gt;

&lt;p&gt;Incrivelmente há também um aumento no número de inscritos que,
em muitos casos, não desenvolvem em Object Pascal mas estão 
conosco para fazer parte desse &lt;em&gt;mindset&lt;/em&gt; sobre Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;O sucesso do blog superou todas as minhas expectativas.&lt;/p&gt;

&lt;h2 id=&quot;melhores-artigos&quot;&gt;Melhores Artigos&lt;/h2&gt;

&lt;p&gt;Selecionei os melhores artigos de 2016. Não houve uma ciência para
escolher esses artigos. Apenas selecionei os 10 mais relevantes pra
mim ou para os leitores baseados no &lt;em&gt;feedback&lt;/em&gt; e comentários.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;Interfaces e o Método estático New&lt;/a&gt;
É sem dúvida um artigo que eu adoro porque essa “técnica” mudou a 
maneira que eu trabalho com Object Pascal e Interfaces.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interfaces em Todo Lugar&lt;/a&gt;
Mostra que com a utilização do Método &lt;code&gt;New&lt;/code&gt; é possível  utilizar Interfaces em todo o código,
sem problemas com vazamentos de memória.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;Objetos devem representar Entidades reais&lt;/a&gt;
Diz que cada Objeto deverá representar uma Entidade num determinado
momento para um determinado Contexto.
Sempre tenham em mente a dupla Entidade e Contexto, quando estiverem
programando Orientado a Objetos.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;Classes devem Implementar apenas uma Responsabilidade&lt;/a&gt;
É uma regra que todos conhecem mas quase ninguém respeita. Porque é difícil.
Mas é difícil quando utilizamos o pensamento Procedural para (tentar)
codificar um Objeto. Não pense nos procedimentos, pense no comportamento
do Objeto apenas para um Contexto específico e essa regra ficará mais fácil
de ser cumprida.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/objetos-pensam-e-tomam-decisoes/&quot;&gt;Objetos pensam e tomam decisões&lt;/a&gt;
É um conceito difícil para quem ainda não entendeu, realmente, a
programação Orientada a Objetos. No modelo Procedural você tem um 
Controlador (você); no Modelo Orientado a Objetos, há apenas Objetos
que sabem o que fazer.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/validacoes-no-construtor/&quot;&gt;Validações no Construtor&lt;/a&gt;
É um conceito que eu conhecia, mas não seguia. Mas ele faz todo o sentido.
Você não deve validar (todo) o Objeto no construtor. Se existisse um mundo 
onde todos os Objetos fossem validados antes de serem criados, então 
seria um mundo perfeito com Objetos perfeitos. E perfeição não existe.
Dê um voto de confiança aos seus Objetos e deixe-os tentar executar o
trabalho.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;Herança pode ser o Mal da Orientação a Objetos&lt;/a&gt;
Foi uma série de 5 artigos. Uma série provocativa que gerou
dúvidas, argumentações, mas também admiração e sintonia com outros 
leitores que pensam da mesma forma.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/classes-de-dados/&quot;&gt;Classe de Dados&lt;/a&gt;
Pode ser uma ideia controversa quando pensamos em Objetos. Será?
Quando leio sobre Orientação a Objetos em outros blogs,
livros ou publicações, fica claro que os autores dizem ser errado o pensamento
procedural, o pensamento em dados. Mas eles não explicam como utilizamos
dados puros dentro de um código Orientado a Objetos. Essa é a maneira que eu 
utilizo nos meus sistemas.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/procedural-e-facil-orientado-a-objetos-e-dificil/&quot;&gt;Procedural é fácil, Orientado a Objetos é difícil&lt;/a&gt;
É um artigo simples, de 2 minutos de leitura, que foi escrito em menos de
30 minutos… e mesmo assim teve uma ótima repercussão para os leitores.
Incrível.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/diga-me-algo-sobre-voce/&quot;&gt;Diga-me algo Sobre você&lt;/a&gt;
É uma ideia pessoal, mas baseada no conceito que um Objeto deve ser
auto-suficiente para descrever a si mesmo, sem quebra de encapsulamento,
sem &lt;em&gt;Getters&lt;/em&gt;, sem ser um &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/#objeto-nao-e-um-balde-de-funcoes-e-dados&quot;&gt;“balde de dados”&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;e-sobre-o-futuro&quot;&gt;E sobre o Futuro…&lt;/h2&gt;

&lt;p&gt;Os artigos continuarão a serem publicados semanalmente, mas vou
expandir. Haverá também vídeos no meu novo
&lt;a href=&quot;https://www.youtube.com/c/mdbs99&quot;&gt;Canal do YouTube&lt;/a&gt; que irão falar
sobre os artigos do blog, desenvolvimento de &lt;em&gt;software&lt;/em&gt; e, claro,
Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;Está sendo uma experiência única compartilhar ideias que somente eu 
e poucas pessoas que trabalham comigo tinham acesso.&lt;/p&gt;

&lt;p&gt;Agradeço sua leitura, seus comentários e os e-mails de incentivo.&lt;/p&gt;

&lt;p&gt;Obrigado e FELIZ 2017!&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/retrospectiva-2016/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/retrospectiva-2016/</guid>
      </item>
    
      <item>
        <title>Simplicidade</title>
        <description>&lt;p&gt;Hoje em dia temos acesso a dezenas de linguagens com
inúmeros recursos como Orientação a Objetos, Generics, Classes 
anônimas, paradigma Funcional, Lambdas, Paralelismo…&lt;/p&gt;

&lt;p&gt;Mas nós já dominamos o básico antes de começar a usar tais
&lt;em&gt;features&lt;/em&gt;?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-hdnslau35ky-jeffrey-wegrzyn.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“When there is freedom from mechanical conditioning, there is
simplicity. The classical man is just a bundle of routine, ideas 
and tradition. If you follow the classical pattern, you are 
understanding the routine, the tradition, the shadow — you are 
not understanding yourself” — Bruce Lee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Me considero um programador &lt;em&gt;old-school&lt;/em&gt;. Já desenvolvi/estudei com
linguagens como C, C++, COBOL, Pascal, &lt;em&gt;Object Pascal&lt;/em&gt;, Visual Basic,
JavaScript, Java, PHP, C#, Lua e talvez algumas outras que tenha 
esquecido agora.&lt;/p&gt;

&lt;p&gt;Apesar de ter estudado várias linguagens e utilizado algumas delas em 
projetos reais, o que tenho aprendido ao longo desses anos é que eu
poderia fazer (quase) tudo com apenas algumas linguagens, poucas
ferramentas.&lt;/p&gt;

&lt;p&gt;Então escolhi &lt;em&gt;Object Pascal&lt;/em&gt; para meus projetos. É uma linguagem
simples, elegante, fácil de ler/escrever, fortemente tipada e
possui (possuía) poucas features. Com ela eu consigo fazer desde um
simples projeto de fim de semana até grandes sistemas com centenas de
linhas de código.&lt;/p&gt;

&lt;p&gt;Mas a “linguagem morta” — Object Pascal — cresce a cada dia, adicionando
mais e mais &lt;em&gt;features&lt;/em&gt;, tentanto seguir outras linguagens.
E eu não gosto disso.&lt;/p&gt;

&lt;h2 id=&quot;ferramenta&quot;&gt;Uma Ferramenta para cada tipo de Problema&lt;/h2&gt;

&lt;p&gt;É eu também já ouvi isso. Devemos usar a ferramenta apropriada
para cada tipo de problema. É claro que todos concordam.
Mas se você consegue ter 80% de eficácia investindo apenas 20%
do seu tempo e energia em algumas poucas ferramentas, por que acha
necessário aprender outras dezenas de linguagens e ferramentas complexas,
investindo mais tempo e dinheiro para conseguir produzir “apenas” 
20% a mais?
Lembre-se que segundo
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Princ%C3%ADpio_de_Pareto&quot;&gt;Paretto&lt;/a&gt;, 
você irá precisar investir 80% a mais de recursos para conseguir
aumentar a produtividade em 20%. Vale a pena?&lt;/p&gt;

&lt;p&gt;Bem, talvez sim, talvez não. Depende.&lt;/p&gt;

&lt;p&gt;Que tipos de projetos você faz hoje?&lt;/p&gt;

&lt;p&gt;Ou melhor: Os tipos de projetos que você fazia a 3 anos ou mais são
os mesmos tipos de projetos em que trabalha hoje?
Se sim, quais são as grandes diferenças que uma mudança de linguagem
faria para toda a equipe?&lt;/p&gt;

&lt;p&gt;Muitas mudanças positivas? Pode ser.
Mas será que o problema é a linguagem ou o problema é com a equipe
que A) não domina a linguagem que utiliza e B) não domina os requisitos
do sistema?&lt;/p&gt;

&lt;p&gt;Talvez você diga que precisa de novas &lt;em&gt;features&lt;/em&gt; para facilitar
o desenvolvimento. Sim, algumas &lt;em&gt;features&lt;/em&gt; melhoraram muito o
desenvolvimento — a Orientação a Objetos, por exemplo — no entanto
outras não são tão essenciais assim.&lt;/p&gt;

&lt;p&gt;O que eu vejo, na verdade, é que muitos programadores utilizam
novas &lt;em&gt;features&lt;/em&gt; apenas porque são
&lt;a href=&quot;https://medium.freecodecamp.com/constant-confusion-why-i-still-use-javascript-function-statements-984ece0b72fd#.8b7hytmfk&quot;&gt;legais ou “&lt;em&gt;sexy&lt;/em&gt;”&lt;/a&gt;
mas isso, na minha opinião, não deveria ser motivo para utilizá-las.&lt;/p&gt;

&lt;h2 id=&quot;dia-a-dia&quot;&gt;Dia a Dia&lt;/h2&gt;

&lt;p&gt;No meu trabalho diário vejo problemas que seriam evitados se o código
tivesse um &lt;em&gt;design&lt;/em&gt; mais simples.&lt;/p&gt;

&lt;p&gt;Os programadores desejam mais e mais utilizar as novas &lt;em&gt;features&lt;/em&gt;
sem pensar se uma adição de complexidade irá beneficiar o projeto 
no longo prazo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It’s not the daily increase but daily decrease.
Hack away at the unessential.” — Bruce Lee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alguns projetos em Java, por exemplo, são pura magia pra mim. São tantos 
artefatos que devem se interconectar que você perde a noção do que é
seu e do que faz parte das dezenas de &lt;em&gt;libs&lt;/em&gt; e &lt;em&gt;frameworks&lt;/em&gt;. Você
não codifica, apenas dá à esses &lt;em&gt;frameworks&lt;/em&gt; o que eles querem.&lt;/p&gt;

&lt;p&gt;É ótimo quando tudo funciona, mas quando há um problema…&lt;/p&gt;

&lt;p&gt;Objetos são criados por “pura magia”, pois foram “injetados” por
alguma entidade; registros não são salvos porque o &lt;em&gt;Session&lt;/em&gt; não 
for marcado com “atributos especiais”; classes são “mapeadas” em
tabelas utilizando-se de dezenas de “atributos” que parece haver
mais código do que o próprio código da Classe! Mas a maioria acha
tudo isso bem legal. Programadores que não codificam. Esse é o mundo
hoje…&lt;/p&gt;

&lt;p&gt;Você já parou pra pensar que talvez seja mais simples utilizar
&lt;a href=&quot;/posts/menos-e-mais/&quot;&gt;menos&lt;/a&gt; artefatos do que 
tentar aprender e aplicar todas as novidades que nos apresentam
diariamente?&lt;/p&gt;

&lt;p&gt;Saint-Exupéry disse: &lt;em&gt;“Você sabe que alcançou a perfeição em design,
não quando não há mais nada para adicionar, mas quando já não há
mais nada que se possa retirar”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ao invés de aumentar a complexidade e uso de artefatos, tente
diminuí-los.&lt;/p&gt;

&lt;p&gt;Busque a simplicidade, não o contrário.&lt;/p&gt;

&lt;h2 id=&quot;simplicidade&quot;&gt;Simplicidade&lt;/h2&gt;

&lt;p&gt;Eu vejo a Simplicidade como a &lt;a href=&quot;http://www.extremeprogramming.org/rules/simple.html&quot;&gt;chave&lt;/a&gt;
para minimizar 80% de todos os problemas existentes em projetos
de &lt;em&gt;software&lt;/em&gt;. Bem, na verdade em qualquer tipo de projeto,
não apenas &lt;em&gt;software&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Eu tento aplicar a simplicidade em tudo que eu faço. Diariamente.&lt;/p&gt;

&lt;p&gt;Mas o que é simples para uns, pode ser complexo para outros.
Por exemplo. Um sistema pode ser altamente complexo, mas seus
desenvolvedores o consideram simples. Isso acontece porque eles
já estão acostumados e conhecem todos os módulos e problemas.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Simplicity is complex. It’s never simple to keep things simple.
Simple solutions require the most advanced thinking”
― Richie Norton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então como saber se algo é realmente simples? Há alguma medida?&lt;/p&gt;

&lt;p&gt;Em minhas pesquisas por essa definição, encontrei uma palestra
intitulada “Rumo a Ciência da Simplicidade” por George Whitesides.
Eu a tenho arquivada desde 2012 e agora compartilho o link com você.&lt;/p&gt;

&lt;iframe src=&quot;https://embed.ted.com/talks/lang/pt-br/george_whitesides_toward_a_science_of_simplicity&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Para um Objeto ser considerável simples deve ter uma função 
&lt;em&gt;previsível&lt;/em&gt; e &lt;em&gt;confiável&lt;/em&gt;, com &lt;em&gt;baixo custo&lt;/em&gt; e característica de servir,
ou ter o potencial de servir, como &lt;em&gt;blocos modulares&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Não deixe de ver o vídeo. Pois essa é a melhor definição de 
Simplicidade que eu já ouvi. Perfeito.&lt;/p&gt;

&lt;p&gt;Desde então eu tento seguir essa linha de raciocínio.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Abrace a simplicidade em todas as parte do projeto.
Faça com que suas Classes e Objetos sejam previsíveis, confiáveis,
de baixo custo computacional e que ajam como blocos modulares
que possam ser conectados entre si.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Simplicity is the ultimate sophistication” — Leonardo da Vinci&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quanto mais simples, menos &lt;em&gt;bugs&lt;/em&gt;, menos &lt;em&gt;debug&lt;/em&gt;, menos curva de
aprendizado, menos releitura do código.&lt;/p&gt;

&lt;p&gt;Meu objetivo principal nos meus projetos é &lt;em&gt;qualidade&lt;/em&gt;. 
Quero construí-los, entregá-los e esquecê-los. 
Não quero ficar fazendo remendos.
Quero fazê-los certo logo na primeira vez. 
Pra isso sua base de código deve ser simples.&lt;/p&gt;

&lt;p&gt;Esse é o caminho.&lt;/p&gt;

&lt;p&gt;Ou talvez eu seja apenas um “velho” programador,
avesso as “novidades”… você decide.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/simplicidade/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/simplicidade/</guid>
      </item>
    
      <item>
        <title>Desenvolvimento Profissional</title>
        <description>&lt;p&gt;Como você controla o desenvolvimento dos seus projetos?&lt;/p&gt;

&lt;p&gt;Eu quero dizer, os requisitos, fontes, 
tickets, &lt;em&gt;releases&lt;/em&gt;, documentação… ou seja, todo os
artefatos do software.&lt;/p&gt;

&lt;p&gt;Eu utilizo Git, &lt;em&gt;Tickets&lt;/em&gt;, &lt;em&gt;Wikis&lt;/em&gt; e &lt;strong&gt;GitLab&lt;/strong&gt; para o controle
de todos os meus projetos privados.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-gitlab86186324.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Codificar um software hoje em dia não é tão difícil.
São tantas ferramentas automatizadas, vídeos com tutoriais
completos ou IDE’s fantásticas, que praticamente qualquer
pessoa que realmente se interesse pelo assunto iria conseguir 
fazer um software.&lt;/p&gt;

&lt;p&gt;Isso é incrível.&lt;/p&gt;

&lt;p&gt;Mas existe uma &lt;em&gt;grande diferença&lt;/em&gt; entre fazer um simples programa
e desenvolver um projeto &lt;em&gt;profissional&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;controle&quot;&gt;Controle&lt;/h2&gt;

&lt;p&gt;Como desenvolvedor, arquiteto e gerente de projetos pessoais ou 
de clientes, preciso ter o controle de todos os artefatos que compõe
todos os softwares para qual eu trabalho.&lt;/p&gt;

&lt;p&gt;Sendo o software um trabalho de engenharia, mas também arte e trabalho
manual, ter o controle 100% de todos os detalhes é impossível.&lt;/p&gt;

&lt;p&gt;No entanto precisamos ter o controle da &lt;em&gt;qualidade&lt;/em&gt;, &lt;em&gt;prazo&lt;/em&gt; e &lt;em&gt;orçamento&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;É necessário haver ferramentas para controlar tudo, desde o levantamento
de requisitos, codificação, testes, acompanhamento de problemas, lançamento
de versões e documentação.&lt;/p&gt;

&lt;p&gt;As ferramentas para esse tipo de controle existem e estão a disposição para
qualquer desenvolvedor, mas nem todos as utilizam.&lt;/p&gt;

&lt;p&gt;O uso dessas ferramentas separam os &lt;em&gt;amadores&lt;/em&gt; dos &lt;em&gt;profissionais&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ferramentas&quot;&gt;Ferramentas&lt;/h2&gt;

&lt;p&gt;Qualquer ferramenta que realmente ajude no controle do desenvolvimento de
software é válida. No entanto algumas dessas ferramentas já foram e são utilizadas
diariamente e, por serem tão eficazes, considero-as como um padrão
no mundo do desenvolvimento de software. E é sobre elas que irei falar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Git&lt;/em&gt;&lt;/strong&gt;, segundo a &lt;a href=&quot;https://pt.wikipedia.org/wiki/Git&quot;&gt;Wikipedia&lt;/a&gt;,
é um sistema de controle de versão distribuído e um sistema de gerenciamento de 
código fonte, com ênfase em velocidade. O Git foi inicialmente projetado e desenvolvido 
por Linus Torvalds para o desenvolvimento do kernel Linux, mas foi adotado por muitos 
outros projetos.&lt;/p&gt;

&lt;p&gt;Ele é o padrão atual para o controle de versão de softwares. Mas, não apenas por isso,
você &lt;em&gt;deve&lt;/em&gt; utilizá-lo porque não há nenhum outro concorrente que seja tão &lt;em&gt;simples&lt;/em&gt; 
e &lt;em&gt;eficaz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ticket&lt;/em&gt; ou &lt;em&gt;Issue&lt;/em&gt;&lt;/strong&gt; é a ferramenta mais utilizada por um profissional.
Tudo sobre o software deverá estar registrado em &lt;em&gt;tickets&lt;/em&gt;. Desde uma 
dúvida do usuário sobre uma documentação, até a resolução de um &lt;em&gt;bug&lt;/em&gt; complicado.
Tudo, &lt;em&gt;absolutamente tudo&lt;/em&gt;, deverá ser registrado &lt;em&gt;antes&lt;/em&gt; do desenvolvimento
ou execução da solicitação.&lt;/p&gt;

&lt;p&gt;Eles mantém todo o histórico de solicitações e &lt;em&gt;decisões&lt;/em&gt; desde o início do desenvolvimento.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wikis&lt;/em&gt;&lt;/strong&gt; são sites que permitem a edição colaborativa de seu conteúdo e 
estrutura pelos usuários do sistema. Os usuários são os arquitetos, desenvolvedores
e &lt;em&gt;stakeholders&lt;/em&gt; (partes interessadas).&lt;/p&gt;

&lt;p&gt;Esses sites fazem parte da documentação do projeto. 
Todas as Regras de Negócio, configurações, manuais e informações gerais deverão estar
preservados nas páginas desses sites.
No entanto algumas poucas informações não deverão estar nesse formato, como 
configurações de usuário/senha, orçamentos e contratos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Branches&lt;/em&gt;&lt;/strong&gt; são ramificações do código indo em outras direções do &lt;em&gt;branch&lt;/em&gt; principal,
o &lt;em&gt;master&lt;/em&gt;. O objetivo é manter o &lt;em&gt;branch&lt;/em&gt; principal &lt;em&gt;master&lt;/em&gt; sempre com a última versão
liberada para o usuário, enquanto o desenvolvimento vai sendo feito em outros &lt;em&gt;branches&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Todo projeto deve ter no &lt;em&gt;mínimo&lt;/em&gt; dois &lt;em&gt;branches&lt;/em&gt;: &lt;em&gt;master&lt;/em&gt; e &lt;em&gt;develop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Enquanto o &lt;em&gt;master&lt;/em&gt; é “intocável” pela maioria dos desenvolvedores, o &lt;em&gt;develop&lt;/em&gt; está em
constante desenvolvimento.
Você pode até utilizar outros nomes, mas é isso aí.&lt;/p&gt;

&lt;p&gt;Cada &lt;em&gt;ticket&lt;/em&gt; poderá gerar um novo &lt;em&gt;branch&lt;/em&gt;, porém temporario. Após mesclar o
&lt;em&gt;branch&lt;/em&gt; temporário no &lt;em&gt;develop&lt;/em&gt;, ele poderá ser apagado. Isso melhora a rastreabilidade
das modificações do código.&lt;/p&gt;

&lt;p&gt;No momento que o &lt;em&gt;develop&lt;/em&gt; está pronto para ser liberado como uma nova versão do sistema,
uma mesclagem de todo o desenvolvimento deve ser feito no &lt;em&gt;master&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tags&lt;/em&gt;&lt;/strong&gt; são como &lt;em&gt;branches&lt;/em&gt; imutáveis. A cada &lt;em&gt;release&lt;/em&gt; do software devemos criar uma
&lt;em&gt;tag&lt;/em&gt; correspondente a versão. Uma vez criada uma &lt;em&gt;tag&lt;/em&gt;, seu código não poderá ser mais
alterado. Elas devem contar a história de todas as versões do software.&lt;/p&gt;

&lt;h2 id=&quot;servicos&quot;&gt;Serviços&lt;/h2&gt;

&lt;p&gt;Existem vários serviços para o controle do desenvolvimento de softwares, no entanto vou
escrever apenas sobre os três maiores, que são os mesmos no qual tenho maior experiência.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; é um portal de projetos&lt;/strong&gt; OpenSource incrível.
Como o próprio nome diz, ele oferece repositórios &lt;em&gt;Git&lt;/em&gt;. Todo mundo utiliza.
Desde programadores amadores até grandes corporações privadas.&lt;/p&gt;

&lt;p&gt;Eu o &lt;a href=&quot;https://github.com/mdbs99&quot;&gt;utilizo&lt;/a&gt; diariamente.&lt;/p&gt;

&lt;p&gt;Essa &lt;a href=&quot;https://github.com/mdbs99/opp&quot;&gt;página&lt;/a&gt; que você está lendo agora está hospedado lá,
assim com alguns dos meus &lt;a href=&quot;https://github.com/mdbs99?tab=repositories&quot;&gt;projetos&lt;/a&gt; OpenSource.
Também contribuo em outros projetos e utilizo bastante
&lt;em&gt;libs&lt;/em&gt; e &lt;em&gt;frameworks&lt;/em&gt;. É fácil encontrar outros projetos. Fácil de usar. Fantástico.&lt;/p&gt;

&lt;p&gt;Mas se você quiser ter um projeto privado lá, terá que pagar. Não é caro, 
na verdade, porém nem todo mundo quer ou pode pagar. Talvez você apenas queira
trabalhar num projeto acadêmico ou talvez só armazenar alguns exemplos de código…
não importa o motivo, você não quer pagar um valor mensal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://bitbucket.org/&quot;&gt;BitBucket&lt;/a&gt; é outro serviço&lt;/strong&gt; um pouco diferente do Github.
Ele também oferece repositórios &lt;em&gt;Git&lt;/em&gt; e outros serviços que são “instalados” se 
você quiser. No entanto sua interface e usabilidade não são tão &lt;em&gt;simples&lt;/em&gt; como no Github.&lt;/p&gt;

&lt;p&gt;A boa notícia é que ele dá direito a repositórios privados e gratuitos. Esse foi um 
dos fatores que me fez escolher o BitBucket como meu serviço para projetos privados
desde 2012. Mas esses repositórios privados, somados todos,
&lt;a href=&quot;https://bitbucket.org/product/pricing/&quot;&gt;só podem ter&lt;/a&gt; até 5 desenvolvedores.
Então quando seus  projetos começarem a crescer e você ainda não quiser pagar ou 
não estiver satisfeito com o funcionamento geral do sistema, você terá que procurar 
outra solução.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://gitlab.com/&quot;&gt;GitLab&lt;/a&gt; é o melhor&lt;/strong&gt; dentre eles pois une o que ambos
acima tem de melhor: projetos privados, gratuitos, ótima interface e usabilidade.&lt;/p&gt;

&lt;p&gt;Quem me indicou o GitLab foi meu amigo &lt;a href=&quot;https://github.com/fabriciofx&quot;&gt;Fabricio Cabral&lt;/a&gt;,
que também estava em busca de algo parecido com o Github.&lt;/p&gt;

&lt;p&gt;O GitLab tem a interface parecida com o Github. Simples e elegante. No entanto o Github
ainda consegue ser “perfeito” nesse quesito.&lt;/p&gt;

&lt;p&gt;Mas o GitLab tem outras features que, até o momento — ou até onde eu saiba —, não existem
no Github:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Tickets&lt;/em&gt; com &lt;a href=&quot;https://help.github.com/articles/file-attachments-on-issues-and-pull-requests/&quot;&gt;anexo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/2016/11/03/track-your-time-in-the-same-tool-you-do-your-work/&quot;&gt;Time tracking&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dar a possibilidade ao usuário para anexar um relatório, documento, &lt;em&gt;prinscreen&lt;/em&gt;
ou um esboço de tela sempre foi imprescindível pra mim.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Time tracking&lt;/em&gt; é uma &lt;em&gt;feature&lt;/em&gt; nova que estou começando a utilizar. É aquele tipo de coisa
que falamos: “Como ninguém havia pensando nisso antes?”&lt;/p&gt;

&lt;p&gt;E você ainda tem a possibilidade de ajudar no desenvolvimento do projeto e propor melhorias.
É tudo OpenSource — mas eles comercializam uma versão paga — e codificado em Ruby.&lt;/p&gt;

&lt;p&gt;A companhia responsável pelo desenvolvimento do GitLab não para de crescer.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;pt&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Thanks &lt;a href=&quot;https://twitter.com/businessinsider&quot;&gt;@businessinsider&lt;/a&gt; for including us on your list of &amp;quot;enterprise &lt;a href=&quot;https://twitter.com/hashtag/startups?src=hash&quot;&gt;#startups&lt;/a&gt; to bet your career on&amp;quot;&lt;a href=&quot;https://t.co/YFuLfGFheS&quot;&gt;https://t.co/YFuLfGFheS&lt;/a&gt; &lt;a href=&quot;https://t.co/4DmHdbAcZs&quot;&gt;pic.twitter.com/4DmHdbAcZs&lt;/a&gt;&lt;/p&gt;&amp;mdash; GitLab (@gitlab) &lt;a href=&quot;https://twitter.com/gitlab/status/806489296261812224&quot;&gt;7 de dezembro de 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Por isso tudo acho que este é ótimo serviço de uma grande companhia.
Não teria restrições se tivesse que pagar por ele no futuro, caso meus 
projetos ficassem maiores do que a versão gratuita é capaz de suportar.&lt;/p&gt;

&lt;p&gt;Eu posso começar pequeno, com projetos privados e gratuitos, testar
todo o sistema e ver se me adapto à ele antes de começar a pagar. Perfeito.&lt;/p&gt;

&lt;p&gt;O único problema que tive até agora no uso do GitLab é encontrar o serviço temporariamente 
indisponível por estar sendo atualizado. Eles utilizam o GitLab para fazer o GitLab.
Então a cada nova versão liberada o serviço pode ficar intermitente.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;pt&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;We&amp;#39;ll be deploying 8.14.4 shortly. No downtime is expected but you may see intermittent errors during this time.&lt;/p&gt;&amp;mdash; GitLab.com Status (@gitlabstatus) &lt;a href=&quot;https://twitter.com/gitlabstatus/status/806931030674460673&quot;&gt;8 de dezembro de 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas quando você não está pagamento nada e ainda é avisado — por Twitter — antes
do serviço ficar indisponível bem, você não teria o direito de reclamar, teria?&lt;/p&gt;

&lt;p&gt;A verdade é que estou utilizando o GitLab a apenas 1 mês. Mas como tenho bastante
conhecimento dos outros serviços, posso dizer que o GitLab superou minhas expectativas.&lt;/p&gt;

&lt;p&gt;Atualmente estou migrando todos os meus projetos privados do BitBucket para o GitLab — ele tem
um &lt;em&gt;importador de projetos&lt;/em&gt; que facilita muito esse trabalho.&lt;/p&gt;

&lt;p&gt;Mesmo em tão pouco tempo posso afirmar que o GitLab é um grande concorrente, senão o melhor.
E, até agora, estou bastante satisfeito.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Projetos profissionais não são feitos apenas com código e boa intensão. Temos que ter
o controle sobre todos os artefatos.&lt;/p&gt;

&lt;p&gt;Esse controle é feito utilizando ferramentas especializadas.
Acima você pode ver quais foram as minhas escolhas.&lt;/p&gt;

&lt;p&gt;Mas, antes de tudo, é necessário ter disciplina e conhecimento. Do contrário nenhuma ferramenta 
será suficiente.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/desenvolvimento-profissional/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/desenvolvimento-profissional/</guid>
      </item>
    
  </channel>
</rss>
