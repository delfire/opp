<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Pascal Programming</title>
    <description>Sacadas sobre Programação Orientada a Objetos e Object Pascal.
</description>
    <link>http://objectpascalprogramming.com/</link>
    <atom:link href="http://objectpascalprogramming.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Métodos Privados</title>
        <description>&lt;p&gt;Existe um pensamento que diz que todo Método Privado deveria ser, na verdade, a implementação de outro Objeto.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-q6vbepqsojc-rita-morais.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Dizemos que todo Objeto deve implementar apenas uma única &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;responsabilidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Então a ideia que todo Método Privado deveria ser outro Objeto faz sentido, pelo menos na teoria.&lt;/p&gt;

&lt;p&gt;Se o Objeto deveria ter apenas uma única responsabilidade, por que eu teria mais Métodos (privados) além dos Métodos Públicos?&lt;/p&gt;

&lt;p&gt;Não seriam os Métodos Públicos suficientes para implementar apenas uma única responsabilidade?&lt;/p&gt;

&lt;p&gt;É o que vamos tentar entender nesse artigo.&lt;/p&gt;

&lt;h2 id=&quot;implementando-um-objeto&quot;&gt;Implementando um Objeto&lt;/h2&gt;

&lt;p&gt;Um Objeto deve ser a &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;representação&lt;/a&gt; de uma Entidade. Mas não a representação total da Entidade. Isso seria quase impossível ou muito complexo.&lt;/p&gt;

&lt;p&gt;Temos que abstrair ao máximo, ou seja, implementar apenas o comportamento relevante para o software.&lt;/p&gt;

&lt;p&gt;Por isso é possível termos Objetos pequenos, coesos e que implementam apenas uma única responsabilidade.&lt;/p&gt;

&lt;p&gt;Vejamos alguns exemplos para determinarmos se há sentido termos Métodos Privados, mesmo em Objetos simples.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-1&quot;&gt;Exemplo 1&lt;/h4&gt;

&lt;p&gt;No código abaixo temos uma Classe que é inicilizada com uma &lt;code&gt;string&lt;/code&gt; que representa o nome do empregado.&lt;/p&gt;

&lt;p&gt;Há uma Método Privado para “limpar” o nome. Essa limpeza consiste em retirar os espaços em branco do início e do fim do nome. Depois há uma verificação se a &lt;code&gt;string&lt;/code&gt; não ficou em branco no final. Bem simples.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/bbdc509810890ea5724a94a021f16791.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Apesar dessa simplicidade aparente, esse código possui vários erros ou violações de princípios.&lt;/p&gt;

&lt;p&gt;O primeiro problema é conceitual: Você não deve fazer &lt;a href=&quot;/posts/validacoes-no-construtor/&quot;&gt;validações no construtor&lt;/a&gt;, pois segundo Alan Kay — inventor do nome/conceito Orientação a Objetos — &lt;a href=&quot;http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en&quot;&gt;aqui&lt;/a&gt; nesse email, ele diz: &lt;em&gt;“Programação Orientada a Objetos (para mim) significa apenas mensagens, encapsular e esconder estado, e &lt;strong&gt;extrema ligação tardia de todas as coisas&lt;/strong&gt;“&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primeiro você cria os Objetos, depois eles interagem. Se você for validando e/ou executando rotinas a medida que vai criando seus Objetos, você não está programando Orientado a Objetos, isso é Programação Procedural.&lt;/p&gt;

&lt;p&gt;Você nem deve chamar nenhum Método no construtor, pois esses Métodos podem gerar algum problema e o Objeto pode não ser criado.&lt;/p&gt;

&lt;p&gt;O segundo problema é que um Empregado não deveria “limpar o nome recebido”. Não faz sentido.&lt;/p&gt;

&lt;p&gt;O Nome deveria ser um &lt;a href=&quot;https://www.youtube.com/watch?v=nia7UqcpOAc&quot;&gt;Objeto&lt;/a&gt; e ele iria validar a si mesmo; retornar uma string válida, sem espaços, formatada, talvez até com o nome do meio abreviado.&lt;/p&gt;

&lt;p&gt;Em outras palavras, o Método &lt;code&gt;CleanName&lt;/code&gt; não deveria existir, mesmo sendo privado.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-2&quot;&gt;Exemplo 2&lt;/h4&gt;

&lt;p&gt;Então para corrigir o exemplo acima, vamos implementar a Classe &lt;code&gt;TEmployeeName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora sabemos que essa Classe deve ser responsável por tudo que envolve &lt;code&gt;Nome&lt;/code&gt;, então vamos incrementar e por alguns Métodos como &lt;code&gt;FirstName&lt;/code&gt; e &lt;code&gt;LastName&lt;/code&gt;. Assim esses Métodos poderão ser reutilizados por toda a aplicação e você não precisará ficar fazendo esses algoritmos em partes do código que não tem nada haver com manipulação de &lt;code&gt;Nome&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mas veja que eu introduzi um Método Privado.&lt;/p&gt;

&lt;p&gt;Esse Método tem três responsabilidades — portanto não está 100% correto, mas serve de exemplo — que é 1) implementar o algoritmo para obter o &lt;code&gt;FirstName&lt;/code&gt;, 2) implementar outro algoritmo para obter o &lt;code&gt;LastName&lt;/code&gt; e 3) também está fazendo &lt;em&gt;cache&lt;/em&gt; dos dados.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/a303d0bf83930fcf580aee818ee23a52.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Essa Classe é tão simples que não haveria necessidade de existir esse Método Privado, porém imagine que um Objeto dessa Classe seja muito utilizado e precisa de muita performance.&lt;/p&gt;

&lt;p&gt;Nesse caso o Método Privado está fazendo um &lt;em&gt;cache&lt;/em&gt; dos dados, assim não será necessário “calcular” as partes dos nomes sempre que executarmos esses Métodos.&lt;/p&gt;

&lt;p&gt;Essa é das ocasições que um Método Privado ajuda e é bem vindo. O Objeto é criado sem interferências, rápido, sem cálculos. Depois, se um de seus Métodos for realmente executado, o Objeto faz as devidas validações e execuções. Para o mundo externo é indiferente, já que ninguém sabe o que acontece dentro de um Objeto.&lt;/p&gt;

&lt;p&gt;Se você está curioso para saber como seria a “implementação pura” Orientada a Objetos, teríamos que implementar outra Classe para &lt;a href=&quot;/posts/decorator-pattern/&quot;&gt;decorar&lt;/a&gt; a &lt;code&gt;TEmployeeName&lt;/code&gt; somente para fazermos o &lt;em&gt;cache&lt;/em&gt; dos dados. Então cada Método de &lt;code&gt;TEmployeeName&lt;/code&gt; teria a implementação dos cálculos de partes do nome nos próprios Métodos Público — a Classe ficaria com menos código e mais simples.&lt;/p&gt;

&lt;p&gt;A Classe decoradora ficaria mais ou menos assim:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/f9f7aa261bd2e317df503f974429560f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas você sempre teria que instanciar esses dois Objetos, um decorando o outro.&lt;/p&gt;

&lt;p&gt;Se vale ou não a pena criar essa Classe, é você quem decide ou as Regras de Négócio decidem por você.&lt;/p&gt;

&lt;p&gt;Bom é saber que temos opções. Talvez começar a implementação com Métodos Privados e depois, se for o caso, refatorá-los.&lt;/p&gt;

&lt;p&gt;Veja que é possível fazer um design melhor, sem Métodos Privados, mas sempre temos que ver os prós e contras.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Em teoria um Objeto não deveria ter Métodos Privados, porém vimos que existem casos de natureza tecnológica no qual os Métodos Privados auxiliam a codificação.&lt;/p&gt;

&lt;p&gt;Como eu já disse em outro &lt;a href=&quot;/posts/singleton-e-um-anti-padrao/&quot;&gt;artigo&lt;/a&gt;: &lt;em&gt;“Não devemos ser puristas em Orientação a Objetos se não há nenhum benefício”&lt;/em&gt; ou se o benefício for apenas estético, talvez.&lt;/p&gt;

&lt;p&gt;Então fique atento sobre os Métodos Privados que você está criando. Veja se eles deveriam estar em outro Objeto. Mas não perca tempo buscando a perfeição, pois um Método Privado sempre poderá ser refatorado no futuro sem nenhum problema.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/metodos-privados/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/metodos-privados/</guid>
      </item>
    
      <item>
        <title>A Definição de Objeto</title>
        <description>&lt;p&gt;Nesse artigo/vídeo eu explico a definição correta de Objeto dentro do paradigma da Orientação a Objetos.&lt;/p&gt;

&lt;!--more--&gt;

&lt;iframe width=&quot;600&quot; height=&quot;355&quot; src=&quot;https://www.youtube.com/embed/nia7UqcpOAc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Então, o que é um Objeto?&lt;/p&gt;

&lt;p&gt;Para responder a essa pergunta precisamos 
saber o &lt;a href=&quot;/posts/delegacao-de-implementacao-de-interfaces/#contextos&quot;&gt;Contexto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No contexto puramente técnico, um Objeto 
nada mais é do que uma estrutura com dados
e funções.&lt;/p&gt;

&lt;p&gt;No contexto da &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/&quot;&gt;Orientação a Objetos&lt;/a&gt;,
no  entanto, um Objeto é a representação 
abstraída de uma Entidade.&lt;/p&gt;

&lt;p&gt;Uma &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;Entidade&lt;/a&gt; pode ser uma pessoa, um animal, 
uma bola, um pixel, um relatório, um arquivo,
um diretório… qualquer coisa que deva ser 
representado dentro do software é um forte 
candidato a ser um Objeto.&lt;/p&gt;

&lt;p&gt;Mas muitos desenvolvedores não conseguem 
fazer essa distinção, entre o contexto técnico e o contexto da arquitetura.&lt;/p&gt;

&lt;p&gt;Eles continuam enxergando um Objeto (apenas) 
como uma estrutura de dados e funções e não 
conseguem entender a diferença entre programação 
Procedural e a Orientada a Objetos.&lt;/p&gt;

&lt;h2 id=&quot;abstracoes-e-camadas&quot;&gt;Abstrações e Camadas&lt;/h2&gt;

&lt;p&gt;Desenvolvedores precisam entender que existem 
abstrações e camadas para o contexto Técnico 
e também para o contexto da Arquitetura.&lt;/p&gt;

&lt;p&gt;Desde a época do cartão perfurado, passando 
pela linguagem ASSEMBLY, até as linguagens 
mais modernas de hoje em dia, os engenheiros 
foram adicionando mais e mais camadas e 
abstrações às linguagens.&lt;/p&gt;

&lt;p&gt;As linguagens mais modernas hoje são frutos 
dessas adições de abstrações e camadas técnicas, 
com o objetivo de melhorar o código e a 
codificação em si.&lt;/p&gt;

&lt;p&gt;Paradigmas como a Orientação a Objetos 
adicionam abstrações para melhorar a arquitetura.&lt;/p&gt;

&lt;p&gt;Mas cada abstração ou camada, seja técnica ou 
arquitetural, são apenas simplificações da 
realidade, pois para o computador, no fim, 
tudo será representado por “zeros e uns”.&lt;/p&gt;

&lt;p&gt;A maioria dos programadores entendem e utilizam 
as abstrações técnicas no dia-a-dia sem nem 
mesmo pensar sobre isso.&lt;/p&gt;

&lt;p&gt;Estou falando do uso de estruturas de repetição
 como FOR ou WHILE e estruturas condicionais 
 como IF ou CASE.&lt;/p&gt;

&lt;p&gt;Quando você utiliza uma estrutura FOR, por 
exemplo, o compilador irá gerar uma série de 
comandos ASSEMBLY com instruções GOTO.&lt;/p&gt;

&lt;p&gt;Você não pensa sobre isso, não é? É como se 
a estrutura FOR fosse um Objeto e você apenas 
espera que ele exerça seu trabalho depois de 
passar os argumentos de inicialização.&lt;/p&gt;

&lt;p&gt;Você deveria ter esse mesmo pensamento quanto 
estiver trabalhando com Objetos, dentro do 
paradigma da Orientação a Objetos.&lt;/p&gt;

&lt;h2 id=&quot;objetos&quot;&gt;Objetos&lt;/h2&gt;

&lt;p&gt;Olhe para um Objeto do mesmo modo que você 
olha para uma estrutura FOR, WHILE, IF, etc., 
ou seja, você não pensa como essas estruturas 
funcionam internamente (encapsulamento). 
Você só sabe quais são seus argumentos de 
inicialização (construtor) e espera que eles 
trabalhem (comportamento) corretamente.&lt;/p&gt;

&lt;p&gt;Orientação a Objetos é isso, apenas mais 
uma camada, mais uma abstração de arquitetura 
acima do código procedural.&lt;/p&gt;

&lt;p&gt;Entender esse conceito sutil é o início 
para você começar a utilizar a Orientação a 
Objetos da forma mais correta.&lt;/p&gt;

&lt;p&gt;Orientação Objetos não substitui o paradigma 
Procedural, ela o complementa; o aprimora.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Os computadores continuam trabalhando com a 
mesma  premissa procedural desde que eles 
foram inventados.&lt;/p&gt;

&lt;p&gt;O fato é que estamos presos a isso, de certa
forma.&lt;/p&gt;

&lt;p&gt;Mas podemos abstrair, podemos adicionar 
camadas que facilitem o desenvolvimento da 
arquitetura e entendimento do código. 
A Orientação a Objetos faz isso muito bem 
utilizando artefatos que nós chamamos de… Objetos.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/o-que-e-um-objeto/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/o-que-e-um-objeto/</guid>
      </item>
    
      <item>
        <title>Tipos Primitivos nos Argumentos</title>
        <description>&lt;p&gt;Se os Objetos conversam entre si utilizando mensagens, 
ou seja, através dos seus Métodos, por que utilizaríamos
Tipos Primitivos nos argumentos desses Métodos ao invés
de utilizarmos Objetos?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-3_i4nvi9d1k-randall-bruder.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Os Objetos conectam-se uns aos outros através de seus 
&lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtores&lt;/a&gt;
e Métodos, enviando argumentos uns aos outros.&lt;/p&gt;

&lt;p&gt;No paradigma da Orientação a Objetos, tudo são Objetos.
Inclusive os argumentos.
Bem, deveriam ser, pelo menos na maioria dos casos.&lt;/p&gt;

&lt;p&gt;Imagine um um formulário onde o usuário precisa digitar
seu &lt;em&gt;login&lt;/em&gt;. Esse formulário, que contém Objetos visuais
para capturar a digitação, irá enviar o &lt;em&gt;login&lt;/em&gt; digitado
à outro Objeto para validar a identificação.&lt;/p&gt;

&lt;p&gt;Seria o &lt;em&gt;login&lt;/em&gt; um Objeto ou apenas texto?&lt;/p&gt;

&lt;p&gt;Você pode pensar que o &lt;em&gt;login&lt;/em&gt; é apenas uma informação
simples, um tipo &lt;em&gt;string&lt;/em&gt;, apenas texto puro, não havendo
necessidade de um Objeto.&lt;/p&gt;

&lt;p&gt;Mas, não seria esse &lt;em&gt;“texto puro”&lt;/em&gt; também um Objeto?&lt;/p&gt;

&lt;p&gt;Tudo são Objetos na Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;Confuso?&lt;/p&gt;

&lt;h2 id=&quot;argumentos&quot;&gt;Argumentos&lt;/h2&gt;

&lt;p&gt;Tudo são Objetos, mas nem sempre os requisitos são
implementados como tal.
Os motivos são diversos, mas &lt;em&gt;simplicidade&lt;/em&gt; e &lt;em&gt;performance&lt;/em&gt;
sempre são citados como motivos plausíveis para o uso
de tipos primitivos nos argumentos.&lt;/p&gt;

&lt;p&gt;Utilizar tipos primitivos nos argumentos é um anti-padrão chamado
&lt;a href=&quot;http://enterprisecraftsmanship.com/2015/03/07/functional-c-primitive-obsession/&quot;&gt;&lt;em&gt;“Primitive Obsession”&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Então vamos ver esses motivos e tentar dismitificá-los.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;É claro que Objetos são “mais lentos” para trabalhar e
consomem “mais recursos” que os tipos primitivos.
No entanto a Orientação a Objetos é sobre a arquitetura
do sistema, deixando a performance por conta do compilador
e código de máquina gerado.&lt;/p&gt;

&lt;p&gt;A diminuição da performance — mesmo que mínima —
em sistemas Orientado a Objetos é um preço justo a se 
pagar devido a melhoria na arquitetura que o paradigma
da Orientação a Objetos nos traz.&lt;/p&gt;

&lt;p&gt;Na minha experiência, utilizando Objetos pequenos e simples,
que implementam apenas
&lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;uma única responsabilidade&lt;/a&gt;,
não há perda de performance significativa.&lt;/p&gt;

&lt;p&gt;Mas, ainda assim, se seu maior requisito for performance,
talvez a Orientação a Objetos não sirva para seu projeto…
talvez.&lt;/p&gt;

&lt;h3 id=&quot;simplicidade&quot;&gt;Simplicidade&lt;/h3&gt;

&lt;p&gt;Seriam os tipos primitivos mais &lt;a href=&quot;/posts/simplicidade/&quot;&gt;simples&lt;/a&gt;
de usar do que Objetos?&lt;/p&gt;

&lt;p&gt;De acordo com a minha experiência, na maioria das vezes, não.&lt;/p&gt;

&lt;p&gt;Pense bem: Quantas vezes você teve que passar uma &lt;em&gt;“Data de Nascimento”&lt;/em&gt;
como argumento de um Método e lá dentro ter que convertê-la
em &lt;em&gt;String&lt;/em&gt;, por exemplo, para exibir ao usuário?&lt;/p&gt;

&lt;p&gt;Quantas vezes passou um &lt;em&gt;“Nome Completo”&lt;/em&gt; por parâmetro como
sendo apenas uma &lt;em&gt;String&lt;/em&gt; mas depois teve que usar uma função
&lt;code&gt;Copy&lt;/code&gt; porque só queria exibir o &lt;em&gt;“Primeiro Nome”&lt;/em&gt; ou a primeira
parte do nome?&lt;/p&gt;

&lt;p&gt;Sem falar na &lt;a href=&quot;/posts/codigo-duplicado-talvez-nao/&quot;&gt;repetição de código&lt;/a&gt;
que poderia ocorrer com o uso dessas funções auxiliares em 
várias partes do código.&lt;/p&gt;

&lt;p&gt;Com Objetos seria &lt;strong&gt;muito mais simples&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Veja. Um Objeto &lt;em&gt;“Data de Nascimento”&lt;/em&gt; seria responsável por
algum cálculo de idade, além de retornar a si mesmo no formato
&lt;em&gt;String&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Um Objeto &lt;em&gt;“Nome Completo”&lt;/em&gt; seria responsável por retornar
o primeiro nome e sobrenome; talvez retornar tudo em maiúsculo
seria outro Método.&lt;/p&gt;

&lt;p&gt;Quer outro exemplo?&lt;/p&gt;

&lt;p&gt;Trabalho bastante com &lt;em&gt;GUID’s&lt;/em&gt;. Elas são utilizadas em meus
sistemas como chaves-primárias de registros.&lt;/p&gt;

&lt;p&gt;Se não me engano, o tipo &lt;code&gt;TGuid&lt;/code&gt; no &lt;em&gt;Object Pascal&lt;/em&gt; é um &lt;em&gt;record&lt;/em&gt;.
Não lembro, pois eu não o utilizo mais, não diretamente.&lt;/p&gt;

&lt;p&gt;Eu tenho minha própria Classe &lt;code&gt;TDataGuid&lt;/code&gt; que implementa uma
Interface &lt;code&gt;IDataGuid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Essa Classe tem alguns construtores com argumentos diferentes
para inicializar o &lt;a href=&quot;/posts/objetos-sem-estado/&quot;&gt;estado&lt;/a&gt;
do Objeto, que internamente é um &lt;code&gt;TGuid&lt;/code&gt;.
Posso receber uma &lt;em&gt;String&lt;/em&gt; com ou sem “{…}”, posso receber um &lt;code&gt;TGuid&lt;/code&gt;
ou mesmo não receber nada e inicializar o estado internamente.&lt;/p&gt;

&lt;p&gt;Por quê um Objeto ao invés de um “simples” &lt;em&gt;record&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Nos meus sistemas, um &lt;em&gt;GUID&lt;/em&gt; tem &lt;a href=&quot;/posts/objetos-pensam-e-tomam-decisoes/&quot;&gt;comportamento&lt;/a&gt;.
Ele não é apenas um &lt;a href=&quot;/posts/pensando-em-dados/&quot;&gt;dado&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo. Para exibição de um &lt;em&gt;GUID&lt;/em&gt; para o usuário basta
utilizar o Método &lt;code&gt;AsString&lt;/code&gt;.
Se eu quiser exibir apenas o “formato de digitação” — os 8
primeiros caracteres — basta utilizar o Método &lt;code&gt;AsShortString&lt;/code&gt;.
Se eu quiser o próprio &lt;code&gt;TGuid&lt;/code&gt; basta chamar &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Seria mais simples ficar fazendo conversões por todo o código
utilizando funções auxiliares ou utilizar um Objeto como esse?&lt;/p&gt;

&lt;p&gt;Acho que não há dúvidas aqui.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Quando você implementa Objetos da forma correta, o código
é &lt;em&gt;simplificado&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Essa ideia vai contra o pensamento da maioria dos programadores
procedurais que acham que utilizando tipos primitivos e funções
deixaria o código mais simples de entender e alterar.&lt;/p&gt;

&lt;p&gt;Ledo engano.&lt;/p&gt;

&lt;p&gt;É claro que podemos e devemos utilizar os tipos primitivos, mas
utilíze-os apenas como argumentos de Métodos privados, 
variáveis locais ou para Classes de infraestrutura.&lt;/p&gt;

&lt;p&gt;Para a comunicação entre Objetos de Negócio, utilize Objetos.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/tipos-primitivos-nos-argumentos/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/tipos-primitivos-nos-argumentos/</guid>
      </item>
    
      <item>
        <title>Código Duplicado, Talvez Não</title>
        <description>&lt;p&gt;É quase impossível não haver duplicação de código num programa real,
com pelo menos algumas dezenas de linhas.&lt;/p&gt;

&lt;p&gt;O importante é saber se essa duplicação é de Infraestrutura ou
de Regras de Negócio.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-ceukkv42o40-aaron-burden.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Sempre ouvimos falar que não se deve ter código duplicado num
sistema, mas eu tenho certeza que isso é quase impossível de 
conseguir.&lt;/p&gt;

&lt;p&gt;O que é uma duplicação de código?&lt;/p&gt;

&lt;p&gt;Se você tem duas linhas iguais, elas estão duplicadas?&lt;/p&gt;

&lt;p&gt;Bem, depende muito do &lt;em&gt;ponto de vista&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pra mim existem dois tipos de código: &lt;em&gt;Infraestrutura&lt;/em&gt; e &lt;em&gt;Regras de Negócio&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Código de Infraestrutura pode estar duplicado mas você &lt;em&gt;não&lt;/em&gt;
pode — ou não deveria — duplicar Código de Regras de Negócio.&lt;/p&gt;

&lt;p&gt;Simples assim.&lt;/p&gt;

&lt;p&gt;Mas num sistema onde tudo é código, como saber a diferença entre
um tipo e outro?&lt;/p&gt;

&lt;p&gt;Nesse artigo você aprenderá a dinstinção entre eles.&lt;/p&gt;

&lt;h2 id=&quot;infraestrutura&quot;&gt;Infraestrutura&lt;/h2&gt;

&lt;p&gt;Dou esse nome para todo código que faz parte da infraestrutura
para criação de Classes, implementação de Interfaces, instanciação
de Objetos, chamadas aos métodos, etc.&lt;/p&gt;

&lt;p&gt;Vou lhe dar um exemplo. Imagine que você tem uma Classe com três
argumentos no construtor. Toda vez que você instanciar um Objeto
dessa Classe você terá que &lt;em&gt;duplicar&lt;/em&gt; a mesma construção:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ob1 := TFoo.New(&#39;a&#39;, 1, &#39;z&#39;);
Ob2 := TFoo.New(&#39;b&#39;, 5, &#39;a&#39;);
  
// in other place...
Ob3 := TFoo.New(&#39;a&#39;, 1, &#39;z&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O código acima parece duplicado, não?&lt;/p&gt;

&lt;p&gt;Bem os Objetos &lt;code&gt;Ob1&lt;/code&gt; e &lt;code&gt;Ob2&lt;/code&gt; tem argumentos diferentes, então essas
linhas não são totalmente iguais, apenas bem similares. Então o que
você acha? Há duplicação aqui?&lt;/p&gt;

&lt;p&gt;Não.&lt;/p&gt;

&lt;p&gt;Mas e o &lt;code&gt;Ob3&lt;/code&gt;? Ele foi construído com a mesma assinatura de &lt;code&gt;Ob1&lt;/code&gt; 
mas em outra parte do programa. Isso é uma duplicação?&lt;/p&gt;

&lt;p&gt;Também não.&lt;/p&gt;

&lt;p&gt;O fato de haver 2 chamadas iguais num mesmo projeto não quer dizer 
que há uma duplicação de código. Se assim fosse, toda vez que você
codifica um &lt;code&gt;TStringList.Create&lt;/code&gt; estaria duplicando código.&lt;/p&gt;

&lt;p&gt;Quer outro exemplo? Vamos lá.&lt;/p&gt;

&lt;p&gt;Você tem uma Interface com dois métodos.
Toda Classe que implementar essa Interface terá que, obrigatoriamente,
&lt;em&gt;duplicar&lt;/em&gt; os dois métodos dessa Interface na Classe.&lt;/p&gt;

&lt;p&gt;Isso é uma duplicação? Não.&lt;/p&gt;

&lt;p&gt;Isso é &lt;em&gt;Código de Infraestrutura&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Poderia ser menos verboso implementar uma Interface? Talvez. 
Mas se a linguagem &lt;em&gt;exige&lt;/em&gt; que seja dessa forma,
então não é duplicação.&lt;/p&gt;

&lt;p&gt;O código de Infraestrutura são como “tijolos” no seu projeto.
Eles são iguais — ou bem parecidos — e você precisa deles dessa forma.&lt;/p&gt;

&lt;p&gt;Você irá vê-los por todo o projeto. As vezes ficará tentado a refatorar,
criando uma função — ou mesmo outro Objeto — para agrupar chamadas iguais
removendo, assim, a “duplicação” de código… mas, espere, essa nova função
também será duplicada toda vez que você utilizá-la, pois sempre será a 
mesma assinatura. Então, talvez…&lt;/p&gt;

&lt;p&gt;Impossível.&lt;/p&gt;

&lt;h2 id=&quot;regras-de-negocio&quot;&gt;Regras de Negócio&lt;/h2&gt;

&lt;p&gt;As Regras de Negócio são todo o tipo de código que não é de Infraestrutura.
São as implementações do Negócio do seu Cliente. São as Regras que os usuários
já utilizam mesmo sem haver um sistema informatizado. São os cálculos, as validações,
as restrições… as regras.&lt;/p&gt;

&lt;p&gt;Aqui &lt;em&gt;não&lt;/em&gt; pode haver duplicação. Se, por exemplo, há um cálculo de desconto
para determinado grupo de produtos, a implementação desse cálculo deverá estar em
apenas uma Classe.&lt;/p&gt;

&lt;p&gt;Isso é &lt;em&gt;Código de Regras de Negócio&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Seu Cliente poderá mudar essas regras e você deverá alterar a implementação de cada
uma delas apenas uma vez, num único ponto no código, para cada uma das Regras.&lt;/p&gt;

&lt;p&gt;Para toda Regra de Negócio deve existir um ou mais testes automatizados.
Esses Objetos que implementam as Regras não devem ter dependências externas que
impeçam os testes. Não podem depender de recursos como Banco de Dados ou arquivos
no disco. Todos os seus argumentos devem ser passados através dos
&lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtores&lt;/a&gt;
de suas Classes e, preferencialmente, todos esses Objetos devem ser
&lt;a href=&quot;/posts/objetos-imutaveis/&quot;&gt;imutáveis&lt;/a&gt;, garantindo que uma vez
criados eles não podem ser corrompidos de nenhuma forma.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Se você leu até aqui deve estar pensando: Ora, isso é óbvio!&lt;/p&gt;

&lt;p&gt;Bem, nem tanto, pois ainda tem programadores que desenvolvem suas Classes 
pensando apenas na reutilização e na não-duplicação de código de Infraestrutura.
A &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;herança de Classes&lt;/a&gt;
é o caminho mais utilizado para isso… erroneamente, é claro.&lt;/p&gt;

&lt;p&gt;Você deveria codificar suas Classes pelo que elas são sem se preocupar com 
reaproveitamento de &lt;em&gt;Código de Infraestrutura&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Uma asa-delta pode voar e fazer acrobacias como um pássaro, no entanto eles 
não devem ter uma subclasse em comum para “reutilizar” Código de Infraestrutura
afim de escrever menos.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;Código de Regras de Negócio&lt;/em&gt; é bem diferente. Não deve haver duplicações. Nunca.
Esse tipo de código é como um Manual de construção, ou seja, as Regras de construção.&lt;/p&gt;

&lt;p&gt;Você pode &lt;em&gt;duplicar&lt;/em&gt; as paredes da sua casa, mas não as &lt;em&gt;regras&lt;/em&gt; de como
fazer isso.&lt;/p&gt;

&lt;p&gt;Saiba distinguir essas diferenças.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/codigo-duplicado-talvez-nao/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/codigo-duplicado-talvez-nao/</guid>
      </item>
    
      <item>
        <title>Retrospectiva 2016</title>
        <description>&lt;p&gt;A um ano atrás eu tinha a minha frente um oceano infinito de Blogs.&lt;/p&gt;

&lt;p&gt;Há espaço para mais um blog?
Como fazer diferença?
Como ser notado nesse oceano que cresce exponencialmente
todos os dias?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-34343-cbjdurrrka-daiga-ellaby.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;inicio&quot;&gt;A apenas 1 ano atrás…&lt;/h2&gt;

&lt;p&gt;Mais um ano se foi, mas para esse blog foi apenas o primeiro
ano de vida.&lt;/p&gt;

&lt;p&gt;Nas minhas Férias em 2015 tive a ideia de criar um blog para
escrever sobre desenvolvimento de &lt;em&gt;software&lt;/em&gt; com foco na 
linguagem Object Pascal.&lt;/p&gt;

&lt;p&gt;Quando escrevia o primeiro artigo eu quase desisti.&lt;/p&gt;

&lt;p&gt;Pensei: — Mais um blog fará diferença dentre muitos outros?&lt;/p&gt;

&lt;p&gt;Eu não sabia se faria diferença, mas sentia que deveria escrever
um pouco sobre minha experiência, meu dia-a-dia e sobre a Orientação
a Objetos verdadeiramente aplicada.&lt;/p&gt;

&lt;p&gt;Os assuntos que eu queria escrever eu não encontrava em 
nenhum outro blog em Português, então, por quê não?&lt;/p&gt;

&lt;p&gt;Não desisti.&lt;/p&gt;

&lt;p&gt;Aqui estamos. Ano 2017. Total de &lt;a href=&quot;/archive/&quot;&gt;50 artigos&lt;/a&gt;.
Agora, 51 artigos.&lt;/p&gt;

&lt;p&gt;Minha meta era escrever 1 artigo semanalmente, durante 1 ano,
sem se importar se alguém estaria lendo. Sem se importar se 
alguém estaria se identificando com as ideias. Sem se importar
se faria diferença… apenas escrever e ver os resultados após
um ano.&lt;/p&gt;

&lt;p&gt;Falar sobre Object Pascal, uma linguagem “morta”?&lt;/p&gt;

&lt;p&gt;O fato é que fez diferença… e continua fazendo.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/lista-vip/&quot;&gt;inscrições&lt;/a&gt; para fazer parte da minha Lista VIP
cresce a cada dia.&lt;/p&gt;

&lt;p&gt;Incrivelmente há também um aumento no número de inscritos que,
em muitos casos, não desenvolvem em Object Pascal mas estão 
conosco para fazer parte desse &lt;em&gt;mindset&lt;/em&gt; sobre Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;O sucesso do blog superou todas as minhas expectativas.&lt;/p&gt;

&lt;h2 id=&quot;melhores-artigos&quot;&gt;Melhores Artigos&lt;/h2&gt;

&lt;p&gt;Selecionei os melhores artigos de 2016. Não houve uma ciência para
escolher esses artigos. Apenas selecionei os 10 mais relevantes pra
mim ou para os leitores baseados no &lt;em&gt;feedback&lt;/em&gt; e comentários.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;Interfaces e o Método estático New&lt;/a&gt;
É sem dúvida um artigo que eu adoro porque essa “técnica” mudou a 
maneira que eu trabalho com Object Pascal e Interfaces.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interfaces em Todo Lugar&lt;/a&gt;
Mostra que com a utilização do Método &lt;code&gt;New&lt;/code&gt; é possível  utilizar Interfaces em todo o código,
sem problemas com vazamentos de memória.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;Objetos devem representar Entidades reais&lt;/a&gt;
Diz que cada Objeto deverá representar uma Entidade num determinado
momento para um determinado Contexto.
Sempre tenham em mente a dupla Entidade e Contexto, quando estiverem
programando Orientado a Objetos.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;Classes devem Implementar apenas uma Responsabilidade&lt;/a&gt;
É uma regra que todos conhecem mas quase ninguém respeita. Porque é difícil.
Mas é difícil quando utilizamos o pensamento Procedural para (tentar)
codificar um Objeto. Não pense nos procedimentos, pense no comportamento
do Objeto apenas para um Contexto específico e essa regra ficará mais fácil
de ser cumprida.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/objetos-pensam-e-tomam-decisoes/&quot;&gt;Objetos pensam e tomam decisões&lt;/a&gt;
É um conceito difícil para quem ainda não entendeu, realmente, a
programação Orientada a Objetos. No modelo Procedural você tem um 
Controlador (você); no Modelo Orientado a Objetos, há apenas Objetos
que sabem o que fazer.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/validacoes-no-construtor/&quot;&gt;Validações no Construtor&lt;/a&gt;
É um conceito que eu conhecia, mas não seguia. Mas ele faz todo o sentido.
Você não deve validar (todo) o Objeto no construtor. Se existisse um mundo 
onde todos os Objetos fossem validados antes de serem criados, então 
seria um mundo perfeito com Objetos perfeitos. E perfeição não existe.
Dê um voto de confiança aos seus Objetos e deixe-os tentar executar o
trabalho.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;Herança pode ser o Mal da Orientação a Objetos&lt;/a&gt;
Foi uma série de 5 artigos. Uma série provocativa que gerou
dúvidas, argumentações, mas também admiração e sintonia com outros 
leitores que pensam da mesma forma.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/classes-de-dados/&quot;&gt;Classe de Dados&lt;/a&gt;
Pode ser uma ideia controversa quando pensamos em Objetos. Será?
Quando leio sobre Orientação a Objetos em outros blogs,
livros ou publicações, fica claro que os autores dizem ser errado o pensamento
procedural, o pensamento em dados. Mas eles não explicam como utilizamos
dados puros dentro de um código Orientado a Objetos. Essa é a maneira que eu 
utilizo nos meus sistemas.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/procedural-e-facil-orientado-a-objetos-e-dificil/&quot;&gt;Procedural é fácil, Orientado a Objetos é difícil&lt;/a&gt;
É um artigo simples, de 2 minutos de leitura, que foi escrito em menos de
30 minutos… e mesmo assim teve uma ótima repercussão para os leitores.
Incrível.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/diga-me-algo-sobre-voce/&quot;&gt;Diga-me algo Sobre você&lt;/a&gt;
É uma ideia pessoal, mas baseada no conceito que um Objeto deve ser
auto-suficiente para descrever a si mesmo, sem quebra de encapsulamento,
sem &lt;em&gt;Getters&lt;/em&gt;, sem ser um &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/#objeto-nao-e-um-balde-de-funcoes-e-dados&quot;&gt;“balde de dados”&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;e-sobre-o-futuro&quot;&gt;E sobre o Futuro…&lt;/h2&gt;

&lt;p&gt;Os artigos continuarão a serem publicados semanalmente, mas vou
expandir. Haverá também vídeos no meu novo
&lt;a href=&quot;https://www.youtube.com/c/mdbs99&quot;&gt;Canal do YouTube&lt;/a&gt; que irão falar
sobre os artigos do blog, desenvolvimento de &lt;em&gt;software&lt;/em&gt; e, claro,
Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;Está sendo uma experiência única compartilhar ideias que somente eu 
e poucas pessoas que trabalham comigo tinham acesso.&lt;/p&gt;

&lt;p&gt;Agradeço sua leitura, seus comentários e os e-mails de incentivo.&lt;/p&gt;

&lt;p&gt;Obrigado e FELIZ 2017!&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/retrospectiva-2016/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/retrospectiva-2016/</guid>
      </item>
    
      <item>
        <title>Simplicidade</title>
        <description>&lt;p&gt;Hoje em dia temos acesso a dezenas de linguagens com
inúmeros recursos como Orientação a Objetos, Generics, Classes 
anônimas, paradigma Funcional, Lambdas, Paralelismo…&lt;/p&gt;

&lt;p&gt;Mas nós já dominamos o básico antes de começar a usar tais
&lt;em&gt;features&lt;/em&gt;?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-hdnslau35ky-jeffrey-wegrzyn.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“When there is freedom from mechanical conditioning, there is
simplicity. The classical man is just a bundle of routine, ideas 
and tradition. If you follow the classical pattern, you are 
understanding the routine, the tradition, the shadow — you are 
not understanding yourself” — Bruce Lee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Me considero um programador &lt;em&gt;old-school&lt;/em&gt;. Já desenvolvi/estudei com
linguagens como C, C++, COBOL, Pascal, &lt;em&gt;Object Pascal&lt;/em&gt;, Visual Basic,
JavaScript, Java, PHP, C#, Lua e talvez algumas outras que tenha 
esquecido agora.&lt;/p&gt;

&lt;p&gt;Apesar de ter estudado várias linguagens e utilizado algumas delas em 
projetos reais, o que tenho aprendido ao longo desses anos é que eu
poderia fazer (quase) tudo com apenas algumas linguagens, poucas
ferramentas.&lt;/p&gt;

&lt;p&gt;Então escolhi &lt;em&gt;Object Pascal&lt;/em&gt; para meus projetos. É uma linguagem
simples, elegante, fácil de ler/escrever, fortemente tipada e
possui (possuía) poucas features. Com ela eu consigo fazer desde um
simples projeto de fim de semana até grandes sistemas com centenas de
linhas de código.&lt;/p&gt;

&lt;p&gt;Mas a “linguagem morta” — Object Pascal — cresce a cada dia, adicionando
mais e mais &lt;em&gt;features&lt;/em&gt;, tentanto seguir outras linguagens.
E eu não gosto disso.&lt;/p&gt;

&lt;h2 id=&quot;ferramenta&quot;&gt;Uma Ferramenta para cada tipo de Problema&lt;/h2&gt;

&lt;p&gt;É eu também já ouvi isso. Devemos usar a ferramenta apropriada
para cada tipo de problema. É claro que todos concordam.
Mas se você consegue ter 80% de eficácia investindo apenas 20%
do seu tempo e energia em algumas poucas ferramentas, por que acha
necessário aprender outras dezenas de linguagens e ferramentas complexas,
investindo mais tempo e dinheiro para conseguir produzir “apenas” 
20% a mais?
Lembre-se que segundo
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Princ%C3%ADpio_de_Pareto&quot;&gt;Paretto&lt;/a&gt;, 
você irá precisar investir 80% a mais de recursos para conseguir
aumentar a produtividade em 20%. Vale a pena?&lt;/p&gt;

&lt;p&gt;Bem, talvez sim, talvez não. Depende.&lt;/p&gt;

&lt;p&gt;Que tipos de projetos você faz hoje?&lt;/p&gt;

&lt;p&gt;Ou melhor: Os tipos de projetos que você fazia a 3 anos ou mais são
os mesmos tipos de projetos em que trabalha hoje?
Se sim, quais são as grandes diferenças que uma mudança de linguagem
faria para toda a equipe?&lt;/p&gt;

&lt;p&gt;Muitas mudanças positivas? Pode ser.
Mas será que o problema é a linguagem ou o problema é com a equipe
que A) não domina a linguagem que utiliza e B) não domina os requisitos
do sistema?&lt;/p&gt;

&lt;p&gt;Talvez você diga que precisa de novas &lt;em&gt;features&lt;/em&gt; para facilitar
o desenvolvimento. Sim, algumas &lt;em&gt;features&lt;/em&gt; melhoraram muito o
desenvolvimento — a Orientação a Objetos, por exemplo — no entanto
outras não são tão essenciais assim.&lt;/p&gt;

&lt;p&gt;O que eu vejo, na verdade, é que muitos programadores utilizam
novas &lt;em&gt;features&lt;/em&gt; apenas porque são
&lt;a href=&quot;https://medium.freecodecamp.com/constant-confusion-why-i-still-use-javascript-function-statements-984ece0b72fd#.8b7hytmfk&quot;&gt;legais ou “&lt;em&gt;sexy&lt;/em&gt;”&lt;/a&gt;
mas isso, na minha opinião, não deveria ser motivo para utilizá-las.&lt;/p&gt;

&lt;h2 id=&quot;dia-a-dia&quot;&gt;Dia a Dia&lt;/h2&gt;

&lt;p&gt;No meu trabalho diário vejo problemas que seriam evitados se o código
tivesse um &lt;em&gt;design&lt;/em&gt; mais simples.&lt;/p&gt;

&lt;p&gt;Os programadores desejam mais e mais utilizar as novas &lt;em&gt;features&lt;/em&gt;
sem pensar se uma adição de complexidade irá beneficiar o projeto 
no longo prazo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It’s not the daily increase but daily decrease.
Hack away at the unessential.” — Bruce Lee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alguns projetos em Java, por exemplo, são pura magia pra mim. São tantos 
artefatos que devem se interconectar que você perde a noção do que é
seu e do que faz parte das dezenas de &lt;em&gt;libs&lt;/em&gt; e &lt;em&gt;frameworks&lt;/em&gt;. Você
não codifica, apenas dá à esses &lt;em&gt;frameworks&lt;/em&gt; o que eles querem.&lt;/p&gt;

&lt;p&gt;É ótimo quando tudo funciona, mas quando há um problema…&lt;/p&gt;

&lt;p&gt;Objetos são criados por “pura magia”, pois foram “injetados” por
alguma entidade; registros não são salvos porque o &lt;em&gt;Session&lt;/em&gt; não 
for marcado com “atributos especiais”; classes são “mapeadas” em
tabelas utilizando-se de dezenas de “atributos” que parece haver
mais código do que o próprio código da Classe! Mas a maioria acha
tudo isso bem legal. Programadores que não codificam. Esse é o mundo
hoje…&lt;/p&gt;

&lt;p&gt;Você já parou pra pensar que talvez seja mais simples utilizar
&lt;a href=&quot;/posts/menos-e-mais/&quot;&gt;menos&lt;/a&gt; artefatos do que 
tentar aprender e aplicar todas as novidades que nos apresentam
diariamente?&lt;/p&gt;

&lt;p&gt;Saint-Exupéry disse: &lt;em&gt;“Você sabe que alcançou a perfeição em design,
não quando não há mais nada para adicionar, mas quando já não há
mais nada que se possa retirar”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ao invés de aumentar a complexidade e uso de artefatos, tente
diminuí-los.&lt;/p&gt;

&lt;p&gt;Busque a simplicidade, não o contrário.&lt;/p&gt;

&lt;h2 id=&quot;simplicidade&quot;&gt;Simplicidade&lt;/h2&gt;

&lt;p&gt;Eu vejo a Simplicidade como a &lt;a href=&quot;http://www.extremeprogramming.org/rules/simple.html&quot;&gt;chave&lt;/a&gt;
para minimizar 80% de todos os problemas existentes em projetos
de &lt;em&gt;software&lt;/em&gt;. Bem, na verdade em qualquer tipo de projeto,
não apenas &lt;em&gt;software&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Eu tento aplicar a simplicidade em tudo que eu faço. Diariamente.&lt;/p&gt;

&lt;p&gt;Mas o que é simples para uns, pode ser complexo para outros.
Por exemplo. Um sistema pode ser altamente complexo, mas seus
desenvolvedores o consideram simples. Isso acontece porque eles
já estão acostumados e conhecem todos os módulos e problemas.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Simplicity is complex. It’s never simple to keep things simple.
Simple solutions require the most advanced thinking”
― Richie Norton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então como saber se algo é realmente simples? Há alguma medida?&lt;/p&gt;

&lt;p&gt;Em minhas pesquisas por essa definição, encontrei uma palestra
intitulada “Rumo a Ciência da Simplicidade” por George Whitesides.
Eu a tenho arquivada desde 2012 e agora compartilho o link com você.&lt;/p&gt;

&lt;iframe src=&quot;https://embed.ted.com/talks/lang/pt-br/george_whitesides_toward_a_science_of_simplicity&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Para um Objeto ser considerável simples deve ter uma função 
&lt;em&gt;previsível&lt;/em&gt; e &lt;em&gt;confiável&lt;/em&gt;, com &lt;em&gt;baixo custo&lt;/em&gt; e característica de servir,
ou ter o potencial de servir, como &lt;em&gt;blocos modulares&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Não deixe de ver o vídeo. Pois essa é a melhor definição de 
Simplicidade que eu já ouvi. Perfeito.&lt;/p&gt;

&lt;p&gt;Desde então eu tento seguir essa linha de raciocínio.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Abrace a simplicidade em todas as parte do projeto.
Faça com que suas Classes e Objetos sejam previsíveis, confiáveis,
de baixo custo computacional e que ajam como blocos modulares
que possam ser conectados entre si.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Simplicity is the ultimate sophistication” — Leonardo da Vinci&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quanto mais simples, menos &lt;em&gt;bugs&lt;/em&gt;, menos &lt;em&gt;debug&lt;/em&gt;, menos curva de
aprendizado, menos releitura do código.&lt;/p&gt;

&lt;p&gt;Meu objetivo principal nos meus projetos é &lt;em&gt;qualidade&lt;/em&gt;. 
Quero construí-los, entregá-los e esquecê-los. 
Não quero ficar fazendo remendos.
Quero fazê-los certo logo na primeira vez. 
Pra isso sua base de código deve ser simples.&lt;/p&gt;

&lt;p&gt;Esse é o caminho.&lt;/p&gt;

&lt;p&gt;Ou talvez eu seja apenas um “velho” programador,
avesso as “novidades”… você decide.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/simplicidade/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/simplicidade/</guid>
      </item>
    
      <item>
        <title>Desenvolvimento Profissional</title>
        <description>&lt;p&gt;Como você controla o desenvolvimento dos seus projetos?&lt;/p&gt;

&lt;p&gt;Eu quero dizer, os requisitos, fontes, 
tickets, &lt;em&gt;releases&lt;/em&gt;, documentação… ou seja, todo os
artefatos do software.&lt;/p&gt;

&lt;p&gt;Eu utilizo Git, &lt;em&gt;Tickets&lt;/em&gt;, &lt;em&gt;Wikis&lt;/em&gt; e &lt;strong&gt;GitLab&lt;/strong&gt; para o controle
de todos os meus projetos privados.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-gitlab86186324.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Codificar um software hoje em dia não é tão difícil.
São tantas ferramentas automatizadas, vídeos com tutoriais
completos ou IDE’s fantásticas, que praticamente qualquer
pessoa que realmente se interesse pelo assunto iria conseguir 
fazer um software.&lt;/p&gt;

&lt;p&gt;Isso é incrível.&lt;/p&gt;

&lt;p&gt;Mas existe uma &lt;em&gt;grande diferença&lt;/em&gt; entre fazer um simples programa
e desenvolver um projeto &lt;em&gt;profissional&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;controle&quot;&gt;Controle&lt;/h2&gt;

&lt;p&gt;Como desenvolvedor, arquiteto e gerente de projetos pessoais ou 
de clientes, preciso ter o controle de todos os artefatos que compõe
todos os softwares para qual eu trabalho.&lt;/p&gt;

&lt;p&gt;Sendo o software um trabalho de engenharia, mas também arte e trabalho
manual, ter o controle 100% de todos os detalhes é impossível.&lt;/p&gt;

&lt;p&gt;No entanto precisamos ter o controle da &lt;em&gt;qualidade&lt;/em&gt;, &lt;em&gt;prazo&lt;/em&gt; e &lt;em&gt;orçamento&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;É necessário haver ferramentas para controlar tudo, desde o levantamento
de requisitos, codificação, testes, acompanhamento de problemas, lançamento
de versões e documentação.&lt;/p&gt;

&lt;p&gt;As ferramentas para esse tipo de controle existem e estão a disposição para
qualquer desenvolvedor, mas nem todos as utilizam.&lt;/p&gt;

&lt;p&gt;O uso dessas ferramentas separam os &lt;em&gt;amadores&lt;/em&gt; dos &lt;em&gt;profissionais&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ferramentas&quot;&gt;Ferramentas&lt;/h2&gt;

&lt;p&gt;Qualquer ferramenta que realmente ajude no controle do desenvolvimento de
software é válida. No entanto algumas dessas ferramentas já foram e são utilizadas
diariamente e, por serem tão eficazes, considero-as como um padrão
no mundo do desenvolvimento de software. E é sobre elas que irei falar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Git&lt;/em&gt;&lt;/strong&gt;, segundo a &lt;a href=&quot;https://pt.wikipedia.org/wiki/Git&quot;&gt;Wikipedia&lt;/a&gt;,
é um sistema de controle de versão distribuído e um sistema de gerenciamento de 
código fonte, com ênfase em velocidade. O Git foi inicialmente projetado e desenvolvido 
por Linus Torvalds para o desenvolvimento do kernel Linux, mas foi adotado por muitos 
outros projetos.&lt;/p&gt;

&lt;p&gt;Ele é o padrão atual para o controle de versão de softwares. Mas, não apenas por isso,
você &lt;em&gt;deve&lt;/em&gt; utilizá-lo porque não há nenhum outro concorrente que seja tão &lt;em&gt;simples&lt;/em&gt; 
e &lt;em&gt;eficaz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ticket&lt;/em&gt; ou &lt;em&gt;Issue&lt;/em&gt;&lt;/strong&gt; é a ferramenta mais utilizada por um profissional.
Tudo sobre o software deverá estar registrado em &lt;em&gt;tickets&lt;/em&gt;. Desde uma 
dúvida do usuário sobre uma documentação, até a resolução de um &lt;em&gt;bug&lt;/em&gt; complicado.
Tudo, &lt;em&gt;absolutamente tudo&lt;/em&gt;, deverá ser registrado &lt;em&gt;antes&lt;/em&gt; do desenvolvimento
ou execução da solicitação.&lt;/p&gt;

&lt;p&gt;Eles mantém todo o histórico de solicitações e &lt;em&gt;decisões&lt;/em&gt; desde o início do desenvolvimento.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wikis&lt;/em&gt;&lt;/strong&gt; são sites que permitem a edição colaborativa de seu conteúdo e 
estrutura pelos usuários do sistema. Os usuários são os arquitetos, desenvolvedores
e &lt;em&gt;stakeholders&lt;/em&gt; (partes interessadas).&lt;/p&gt;

&lt;p&gt;Esses sites fazem parte da documentação do projeto. 
Todas as Regras de Negócio, configurações, manuais e informações gerais deverão estar
preservados nas páginas desses sites.
No entanto algumas poucas informações não deverão estar nesse formato, como 
configurações de usuário/senha, orçamentos e contratos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Branches&lt;/em&gt;&lt;/strong&gt; são ramificações do código indo em outras direções do &lt;em&gt;branch&lt;/em&gt; principal,
o &lt;em&gt;master&lt;/em&gt;. O objetivo é manter o &lt;em&gt;branch&lt;/em&gt; principal &lt;em&gt;master&lt;/em&gt; sempre com a última versão
liberada para o usuário, enquanto o desenvolvimento vai sendo feito em outros &lt;em&gt;branches&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Todo projeto deve ter no &lt;em&gt;mínimo&lt;/em&gt; dois &lt;em&gt;branches&lt;/em&gt;: &lt;em&gt;master&lt;/em&gt; e &lt;em&gt;develop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Enquanto o &lt;em&gt;master&lt;/em&gt; é “intocável” pela maioria dos desenvolvedores, o &lt;em&gt;develop&lt;/em&gt; está em
constante desenvolvimento.
Você pode até utilizar outros nomes, mas é isso aí.&lt;/p&gt;

&lt;p&gt;Cada &lt;em&gt;ticket&lt;/em&gt; poderá gerar um novo &lt;em&gt;branch&lt;/em&gt;, porém temporario. Após mesclar o
&lt;em&gt;branch&lt;/em&gt; temporário no &lt;em&gt;develop&lt;/em&gt;, ele poderá ser apagado. Isso melhora a rastreabilidade
das modificações do código.&lt;/p&gt;

&lt;p&gt;No momento que o &lt;em&gt;develop&lt;/em&gt; está pronto para ser liberado como uma nova versão do sistema,
uma mesclagem de todo o desenvolvimento deve ser feito no &lt;em&gt;master&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tags&lt;/em&gt;&lt;/strong&gt; são como &lt;em&gt;branches&lt;/em&gt; imutáveis. A cada &lt;em&gt;release&lt;/em&gt; do software devemos criar uma
&lt;em&gt;tag&lt;/em&gt; correspondente a versão. Uma vez criada uma &lt;em&gt;tag&lt;/em&gt;, seu código não poderá ser mais
alterado. Elas devem contar a história de todas as versões do software.&lt;/p&gt;

&lt;h2 id=&quot;servicos&quot;&gt;Serviços&lt;/h2&gt;

&lt;p&gt;Existem vários serviços para o controle do desenvolvimento de softwares, no entanto vou
escrever apenas sobre os três maiores, que são os mesmos no qual tenho maior experiência.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; é um portal de projetos&lt;/strong&gt; OpenSource incrível.
Como o próprio nome diz, ele oferece repositórios &lt;em&gt;Git&lt;/em&gt;. Todo mundo utiliza.
Desde programadores amadores até grandes corporações privadas.&lt;/p&gt;

&lt;p&gt;Eu o &lt;a href=&quot;https://github.com/mdbs99&quot;&gt;utilizo&lt;/a&gt; diariamente.&lt;/p&gt;

&lt;p&gt;Essa &lt;a href=&quot;https://github.com/mdbs99/opp&quot;&gt;página&lt;/a&gt; que você está lendo agora está hospedado lá,
assim com alguns dos meus &lt;a href=&quot;https://github.com/mdbs99?tab=repositories&quot;&gt;projetos&lt;/a&gt; OpenSource.
Também contribuo em outros projetos e utilizo bastante
&lt;em&gt;libs&lt;/em&gt; e &lt;em&gt;frameworks&lt;/em&gt;. É fácil encontrar outros projetos. Fácil de usar. Fantástico.&lt;/p&gt;

&lt;p&gt;Mas se você quiser ter um projeto privado lá, terá que pagar. Não é caro, 
na verdade, porém nem todo mundo quer ou pode pagar. Talvez você apenas queira
trabalhar num projeto acadêmico ou talvez só armazenar alguns exemplos de código…
não importa o motivo, você não quer pagar um valor mensal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://bitbucket.org/&quot;&gt;BitBucket&lt;/a&gt; é outro serviço&lt;/strong&gt; um pouco diferente do Github.
Ele também oferece repositórios &lt;em&gt;Git&lt;/em&gt; e outros serviços que são “instalados” se 
você quiser. No entanto sua interface e usabilidade não são tão &lt;em&gt;simples&lt;/em&gt; como no Github.&lt;/p&gt;

&lt;p&gt;A boa notícia é que ele dá direito a repositórios privados e gratuitos. Esse foi um 
dos fatores que me fez escolher o BitBucket como meu serviço para projetos privados
desde 2012. Mas esses repositórios privados, somados todos,
&lt;a href=&quot;https://bitbucket.org/product/pricing/&quot;&gt;só podem ter&lt;/a&gt; até 5 desenvolvedores.
Então quando seus  projetos começarem a crescer e você ainda não quiser pagar ou 
não estiver satisfeito com o funcionamento geral do sistema, você terá que procurar 
outra solução.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://gitlab.com/&quot;&gt;GitLab&lt;/a&gt; é o melhor&lt;/strong&gt; dentre eles pois une o que ambos
acima tem de melhor: projetos privados, gratuitos, ótima interface e usabilidade.&lt;/p&gt;

&lt;p&gt;Quem me indicou o GitLab foi meu amigo &lt;a href=&quot;https://github.com/fabriciofx&quot;&gt;Fabricio Cabral&lt;/a&gt;,
que também estava em busca de algo parecido com o Github.&lt;/p&gt;

&lt;p&gt;O GitLab tem a interface parecida com o Github. Simples e elegante. No entanto o Github
ainda consegue ser “perfeito” nesse quesito.&lt;/p&gt;

&lt;p&gt;Mas o GitLab tem outras features que, até o momento — ou até onde eu saiba —, não existem
no Github:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Tickets&lt;/em&gt; com &lt;a href=&quot;https://help.github.com/articles/file-attachments-on-issues-and-pull-requests/&quot;&gt;anexo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/2016/11/03/track-your-time-in-the-same-tool-you-do-your-work/&quot;&gt;Time tracking&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dar a possibilidade ao usuário para anexar um relatório, documento, &lt;em&gt;prinscreen&lt;/em&gt;
ou um esboço de tela sempre foi imprescindível pra mim.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Time tracking&lt;/em&gt; é uma &lt;em&gt;feature&lt;/em&gt; nova que estou começando a utilizar. É aquele tipo de coisa
que falamos: “Como ninguém havia pensando nisso antes?”&lt;/p&gt;

&lt;p&gt;E você ainda tem a possibilidade de ajudar no desenvolvimento do projeto e propor melhorias.
É tudo OpenSource — mas eles comercializam uma versão paga — e codificado em Ruby.&lt;/p&gt;

&lt;p&gt;A companhia responsável pelo desenvolvimento do GitLab não para de crescer.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;pt&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Thanks &lt;a href=&quot;https://twitter.com/businessinsider&quot;&gt;@businessinsider&lt;/a&gt; for including us on your list of &amp;quot;enterprise &lt;a href=&quot;https://twitter.com/hashtag/startups?src=hash&quot;&gt;#startups&lt;/a&gt; to bet your career on&amp;quot;&lt;a href=&quot;https://t.co/YFuLfGFheS&quot;&gt;https://t.co/YFuLfGFheS&lt;/a&gt; &lt;a href=&quot;https://t.co/4DmHdbAcZs&quot;&gt;pic.twitter.com/4DmHdbAcZs&lt;/a&gt;&lt;/p&gt;&amp;mdash; GitLab (@gitlab) &lt;a href=&quot;https://twitter.com/gitlab/status/806489296261812224&quot;&gt;7 de dezembro de 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Por isso tudo acho que este é ótimo serviço de uma grande companhia.
Não teria restrições se tivesse que pagar por ele no futuro, caso meus 
projetos ficassem maiores do que a versão gratuita é capaz de suportar.&lt;/p&gt;

&lt;p&gt;Eu posso começar pequeno, com projetos privados e gratuitos, testar
todo o sistema e ver se me adapto à ele antes de começar a pagar. Perfeito.&lt;/p&gt;

&lt;p&gt;O único problema que tive até agora no uso do GitLab é encontrar o serviço temporariamente 
indisponível por estar sendo atualizado. Eles utilizam o GitLab para fazer o GitLab.
Então a cada nova versão liberada o serviço pode ficar intermitente.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;pt&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;We&amp;#39;ll be deploying 8.14.4 shortly. No downtime is expected but you may see intermittent errors during this time.&lt;/p&gt;&amp;mdash; GitLab.com Status (@gitlabstatus) &lt;a href=&quot;https://twitter.com/gitlabstatus/status/806931030674460673&quot;&gt;8 de dezembro de 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas quando você não está pagamento nada e ainda é avisado — por Twitter — antes
do serviço ficar indisponível bem, você não teria o direito de reclamar, teria?&lt;/p&gt;

&lt;p&gt;A verdade é que estou utilizando o GitLab a apenas 1 mês. Mas como tenho bastante
conhecimento dos outros serviços, posso dizer que o GitLab superou minhas expectativas.&lt;/p&gt;

&lt;p&gt;Atualmente estou migrando todos os meus projetos privados do BitBucket para o GitLab — ele tem
um &lt;em&gt;importador de projetos&lt;/em&gt; que facilita muito esse trabalho.&lt;/p&gt;

&lt;p&gt;Mesmo em tão pouco tempo posso afirmar que o GitLab é um grande concorrente, senão o melhor.
E, até agora, estou bastante satisfeito.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Projetos profissionais não são feitos apenas com código e boa intensão. Temos que ter
o controle sobre todos os artefatos.&lt;/p&gt;

&lt;p&gt;Esse controle é feito utilizando ferramentas especializadas.
Acima você pode ver quais foram as minhas escolhas.&lt;/p&gt;

&lt;p&gt;Mas, antes de tudo, é necessário ter disciplina e conhecimento. Do contrário nenhuma ferramenta 
será suficiente.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/desenvolvimento-profissional/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/desenvolvimento-profissional/</guid>
      </item>
    
      <item>
        <title>Objetos Agregados</title>
        <description>&lt;p&gt;Objetos Agregados é uma &lt;em&gt;feature&lt;/em&gt; da linguagem &lt;em&gt;Object Pascal&lt;/em&gt;. 
Ela nos permite delegar uma implementação
de uma Interface para outro Objeto, utilizando uma sintaxe especial.&lt;/p&gt;

&lt;p&gt;No entanto existe um grande problema
no &lt;em&gt;design&lt;/em&gt; dessa &lt;em&gt;feature&lt;/em&gt; que não permite o programador utilizá-la em
sua plenitude. Estou falando dos terríveis vazamentos de memória.&lt;/p&gt;

&lt;p&gt;Muitos programadores desistem de utilizar Objetos Agregados devido
a esses problemas…&lt;/p&gt;

&lt;p&gt;Bem, não mais.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/icfxslgjq50-james-garcia.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Já faz algum tempo que venho pesquisando uma maneira de utilizar Objetos Agregados
sem comprometer o &lt;em&gt;software&lt;/em&gt; com vazamentos de memória.&lt;/p&gt;

&lt;p&gt;Mas como minhas Interfaces possuem &lt;a href=&quot;/posts/menos-e-mais/#metodos&quot;&gt;poucos métodos&lt;/a&gt;,
é fácil implementar os métodos (as assinaturas) e delegar para um Objeto privado,
ou seja, aquele que realmente irá fazer o trabalho.&lt;/p&gt;

&lt;p&gt;Infelizmente essa abordagem é verbosa, ineficiente e nos leva a duplicação de código.&lt;/p&gt;

&lt;h2 id=&quot;voce-lembra&quot;&gt;Você lembra?&lt;/h2&gt;

&lt;p&gt;A primeira vez que falei sobre esse assunto foi nesse
&lt;a href=&quot;/posts/delegacao-de-implementacao-de-interfaces/&quot;&gt;artigo&lt;/a&gt;, no entanto
a implementação original possui vazamentos de memória.&lt;/p&gt;

&lt;p&gt;Enviei um &lt;a href=&quot;https://www.mail-archive.com/fpc-pascal@lists.freepascal.org/msg43835.html&quot;&gt;email&lt;/a&gt;
sobre esse problema &lt;strong&gt;crítico&lt;/strong&gt; na lista oficial do FreePascal e ninguém deu alguma 
solução plausível.&lt;/p&gt;

&lt;p&gt;Utilizando o mesmo código de exemplo que enviei a lista, fiz algumas considerações
e publiquei um novo &lt;a href=&quot;/posts/interfaces-delegacao-problemas-solucoes/&quot;&gt;artigo&lt;/a&gt;
com uma possível solução.&lt;/p&gt;

&lt;p&gt;A solução para corrigir o código do exemplo foi implementar a classe &lt;code&gt;TDelegatedIntegerValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mas eu estava &lt;strong&gt;errado&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O motivo era simples, a &lt;em&gt;duplicação&lt;/em&gt; de código continuava.&lt;/p&gt;

&lt;p&gt;A Classe &lt;code&gt;TDelegatedIntegerValue&lt;/code&gt; tem sua própria implementação.
Não há nenhuma reutilização da &lt;code&gt;TIntegerValue&lt;/code&gt; original.&lt;/p&gt;

&lt;p&gt;Eu poderia utilizar &lt;code&gt;TIntegerValue&lt;/code&gt; como um atributo privado de &lt;code&gt;TDelegatedIntegerValue&lt;/code&gt; e 
repassar as mensagens. Estaria correto. É o que todos fazem. Trivial.&lt;/p&gt;

&lt;p&gt;Mas mesmo assim não ficaria satisfeito.&lt;/p&gt;

&lt;p&gt;Para cada Classe que faz o real trabalho, eu teria
que ter uma outra Classe, herdada de &lt;code&gt;TAggregatedObject&lt;/code&gt; que seria utilizada nas agregações.
Sempre teria um par de Classes: uma normal e outra para agregação.&lt;/p&gt;

&lt;p&gt;Eu não queria ter &lt;em&gt;pares&lt;/em&gt; de Classes para fazer o mesmo trabalho.&lt;/p&gt;

&lt;p&gt;Eu não queria ter Classes que só poderiam ser utilizadas como &lt;em&gt;agregadas&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Eu não queria ter Classes que só poderiam ser utilizadas &lt;em&gt;diretamente&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O que eu queria era ter apenas uma &lt;strong&gt;única classe&lt;/strong&gt; que pudesse ser utilizada &lt;em&gt;diretamente&lt;/em&gt; ou
&lt;em&gt;agregada&lt;/em&gt; a outro Objeto. E, claro, sem vazamentos de memória.&lt;/p&gt;

&lt;h2 id=&quot;codigo-perfeito&quot;&gt;Em busca do “código perfeito”&lt;/h2&gt;

&lt;p&gt;Então eu comecei a implementação de um método que permitisse que qualquer Classe
fosse utilizada &lt;em&gt;diretamente&lt;/em&gt; ou na forma &lt;em&gt;agregada&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Comecei essa implementação no Delphi 7.&lt;/p&gt;

&lt;p&gt;Tenho alguns (grandes) projetos que ainda
utilizam essa versão do Delphi. Nesses projetos você encontra de tudo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Código Procedural&lt;/li&gt;
  &lt;li&gt;Código que &lt;em&gt;parece&lt;/em&gt; Orientado a Objetos&lt;/li&gt;
  &lt;li&gt;Código que &lt;em&gt;realmente&lt;/em&gt; é Orientado a Objetos&lt;/li&gt;
  &lt;li&gt;Código RAD&lt;/li&gt;
  &lt;li&gt;e muito mais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então quando tenho que fazer alguma manutenção neles, é uma boa hora
para fazer uma refatoração.&lt;/p&gt;

&lt;p&gt;Tive uma ideia que, a princípio, pareceu brilhante:&lt;/p&gt;

&lt;p&gt;Iria unir as Classes &lt;code&gt;TInterfacedObject&lt;/code&gt; e &lt;code&gt;TAggregatedObject&lt;/code&gt; numa única nova Classe 
e herdaria todas as minhas Classes a partir daí.&lt;/p&gt;

&lt;p&gt;Perfeito!&lt;/p&gt;

&lt;p&gt;Certo? Err…&lt;/p&gt;

&lt;p&gt;Bem, não tão rápido.&lt;/p&gt;

&lt;p&gt;Se você abrir o código da RTL e localizar ambas as Classes, verão que elas divergem
muito na implementação. Para unir as duas eu tive que fazer várias condições — IF’s —
em várias chamadas de métodos.&lt;/p&gt;

&lt;p&gt;Exemplo. Se o argumento &lt;code&gt;Controller&lt;/code&gt; que &lt;code&gt;TAggregatedObject&lt;/code&gt; utiliza não é &lt;code&gt;nil&lt;/code&gt;, então o
Objeto iria agir de um jeito, do contrário agiria de outra maneira.&lt;/p&gt;

&lt;p&gt;Tive que copiar/colar o código de ambas as Classes;
estava trabalhando com o &lt;a href=&quot;/posts/nao-utilize-nil-ou-null/&quot;&gt;anti-padrão&lt;/a&gt; &lt;code&gt;nil/NULL&lt;/code&gt;;
a Classe estava complexa e não estava mais implementando apenas uma
&lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;única responsabilidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A “solução” estava criando um monstro.&lt;/p&gt;

&lt;p&gt;Isso estava indo contra muitas ideias que eu &lt;em&gt;defendo&lt;/em&gt; como &lt;em&gt;corretas&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Então…&lt;/p&gt;

&lt;p&gt;Joguei tudo fora, esqueci do assunto e continuei minha vida.&lt;/p&gt;

&lt;p&gt;Nenhuma outra linguagem tem isso — eu pensei — então por que continuar nessa busca?&lt;/p&gt;

&lt;p&gt;Isso não funciona. Desisto.&lt;/p&gt;

&lt;h2 id=&quot;uma-soluo-absurdamente-simples&quot;&gt;Uma solução absurdamente simples&lt;/h2&gt;

&lt;p&gt;O tempo passou.&lt;/p&gt;

&lt;p&gt;Então num belo dia tive uma &lt;em&gt;inspiração&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Todo esse tempo eu queria uma solução simples, mas estava pensando de forma errada… novamente!&lt;/p&gt;

&lt;p&gt;Não tenho que ter apenas uma única Classe. Tenho que utilizar a
&lt;a href=&quot;/posts/decorator-pattern/&quot;&gt;decoração&lt;/a&gt; e composição de Objetos.&lt;/p&gt;

&lt;p&gt;Voltei o exemplo original do
&lt;a href=&quot;/posts/interfaces-delegacao-problemas-solucoes/#exemplo-2&quot;&gt;artigo anterior&lt;/a&gt;
e, ao invés de implementar &lt;code&gt;TDelegatedIntegerValue&lt;/code&gt;, implementei a Classe &lt;code&gt;TAggregateValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pouquíssimas linhas de código. Sem copiar/colar. Sem complexidade. Simples.&lt;/p&gt;

&lt;p&gt;E isso fez &lt;strong&gt;toda&lt;/strong&gt; diferença.&lt;/p&gt;

&lt;p&gt;Veja o código completo do programa anterior, reescrito:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/a37d69af39bf859c0c9da77ce48f6a3b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;A Classe &lt;code&gt;TAggregateValue&lt;/code&gt; implementa &lt;code&gt;IValue&lt;/code&gt;, porém ela não tem uma própria implementação. 
Essa Classe apenas repassa as mensagens a instância &lt;code&gt;FOrigin&lt;/code&gt; — argumento passado no construtor —
que também implementa &lt;code&gt;IValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Em outras palavras, para cada Interface no seu código você terá uma, e apenas uma, implementação agregada 
que poderá ser utilizada com qualquer outra “classe normal” que implemente a mesma Interface.&lt;/p&gt;

&lt;p&gt;A Classe &lt;code&gt;TMyApp&lt;/code&gt; continua implementando &lt;code&gt;IValue&lt;/code&gt;, mas seu atributo privado que realmente
implementa &lt;code&gt;IValue&lt;/code&gt; através da delegação, é 
&lt;a href=&quot;https://gist.github.com/mdbs99/a37d69af39bf859c0c9da77ce48f6a3b#file-project-lpr-L75-L83&quot;&gt;inicializado&lt;/a&gt;
através de uma composição/decoração entre &lt;code&gt;TAggregateValue&lt;/code&gt; e &lt;code&gt;TIntegerValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Apesar de continuarmos com 2 Classes como no exemplo anterior, veja que é possível codificar 
infinitas Classes que implementem &lt;code&gt;IValue&lt;/code&gt;, mas utilizar apenas 1 Classe agregadora em todos 
os casos.&lt;/p&gt;

&lt;p&gt;E tão bom quanto isso tudo é não ter vazamentos de memória:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IntegerValue:
TIntegerValue.Create
Number is 5
TIntegerValue.Destroy

MyApp:
TIntegerValue.Create
TMyApp.Create
Number is 10
TMyApp.Destroy
TIntegerValue.Destroy

MyAppAsInterface:
TIntegerValue.Create
TMyApp.Create
Number is 20
TMyApp.Destroy
TIntegerValue.Destroy

Heap dump by heaptrc unit
85 memory blocks allocated : 2049/2232
85 memory blocks freed     : 2049/2232
0 unfreed memory blocks : 0
True heap size : 196608 (128 used in System startup)
True free heap : 196480
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Todas as minhas soluções anteriores iriam, de alguma forma, mudar a implementação
original das Classes que já estavam funcionando por todo o sistema. Esse é um dos
indícios que &lt;strong&gt;A)&lt;/strong&gt; suas classes foram mal implementadas ou &lt;strong&gt;B)&lt;/strong&gt; sua abordagem atual está 
errada porque você não deveria alterar Classes que já funcionam para adaptá-las a
novas exigências.&lt;/p&gt;

&lt;p&gt;Eu estava insistindo na opção B, enquanto a resposta sempre esteve comigo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decoração e Composição de Objetos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/objetos-agregados/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/objetos-agregados/</guid>
      </item>
    
      <item>
        <title>Menos é Mais</title>
        <description>&lt;p&gt;Já pensou qual seria a quantidade ideal para argumentos em um 
método? E a quantidade de métodos em uma Interface ou Classe?
E quantas Classes você codificaria dentro de uma única unidade?&lt;/p&gt;

&lt;p&gt;Vamos tentar obter alguns números.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-14541995559820-04de78c094e9.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;O tamanho de uma Classe, ou seja, a quantidade de métodos que
ela implementa diz muito sobre ela. Uma Classe com muitos métodos
está fazendo coisas demais, possui
&lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;responsabilidades&lt;/a&gt;
demais.&lt;/p&gt;

&lt;p&gt;Podemos utilizar o mesmo princípio para argumentos de métodos. 
Mais argumentos, mais informação, mais comunicações com outros
Objetos. Então, teoricamente, o método está fazendo coisas demais.&lt;/p&gt;

&lt;p&gt;Nesse artigo vou lhe mostrar alguns números ideais.&lt;/p&gt;

&lt;p&gt;Não presumo que você irá concordar com tudo o que ler abaixo mas, 
concordando ou não, esses são &lt;em&gt;meus&lt;/em&gt; números.&lt;/p&gt;

&lt;h2 id=&quot;metodos&quot;&gt;Métodos&lt;/h2&gt;

&lt;p&gt;Interfaces devem ser pequenas, com poucos métodos.
Não é por que a Interface representa
um &lt;code&gt;Carro&lt;/code&gt; que ela deverá conter todos os métodos inimagináveis
para implementar o comportamento de um Carro.&lt;/p&gt;

&lt;p&gt;Cada Interface deve ter o número de métodos que represente uma
&lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;entidade&lt;/a&gt;
num contexto bem &lt;em&gt;delimitado&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O número de métodos ideal está entre &lt;strong&gt;1 e 5&lt;/strong&gt; para Interfaces e,
consequentemente, é o mesmo para Classes.&lt;/p&gt;

&lt;p&gt;No entanto eu não considero a sobrecarga de métodos nessa contagem, ou seja, se
a Classe possui 3 métodos &lt;code&gt;Save&lt;/code&gt; sobrecarregados, eu considero apenas
como 1 método. Mas, mesmo que possa haver muitos métodos sobrecarregados,
não quer dizer que a inteligência está dentro desses métodos. Não.
Quase tudo pode ser &lt;a href=&quot;/posts/delegacao-de-implementacao-de-interfaces/&quot;&gt;delegado&lt;/a&gt;
à outros Objetos mais especialistas.&lt;/p&gt;

&lt;h2 id=&quot;construtores&quot;&gt;Construtores&lt;/h2&gt;

&lt;p&gt;Os construtores &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;primários e secundários&lt;/a&gt;
sempre serão sobrecargas. Então você poderá ter quantos quiser.&lt;/p&gt;

&lt;p&gt;Mas eu prefiro ter apenas 1 construtor e muitos
&lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;Métodos &lt;em&gt;New&lt;/em&gt;&lt;/a&gt;. Assim eu me
beneficio de duas maneiras: a) A Classe só terá um meio para construir
Objetos e b) Os métodos &lt;em&gt;New&lt;/em&gt; obrigam outros desenvolvedores a utilizarem 
instâncias de Interfaces e não instâncias de Classe.&lt;/p&gt;

&lt;h2 id=&quot;argumentos&quot;&gt;Argumentos&lt;/h2&gt;

&lt;p&gt;Utilize a menor quantidade possível de argumentos nos métodos.
Um método com muitos argumentos é difícil de escrever, entender e ler.
Lembre-se que a maior parte do trabalho de um programador é &lt;em&gt;ler&lt;/em&gt; o código e não
escrevê-lo.&lt;/p&gt;

&lt;p&gt;O mesmo para argumentos dos &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtores&lt;/a&gt;
da Classe.&lt;/p&gt;

&lt;p&gt;O número ideal para os argumentos está entre &lt;strong&gt;0 e 5&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;variaveis-locais&quot;&gt;Variáveis locais&lt;/h2&gt;

&lt;p&gt;Antes de utilizar a técnica do &lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;Método &lt;em&gt;New&lt;/em&gt;&lt;/a&gt;,
eu precisava utilizar um número maior de variáveis, somente para
ter a &lt;a href=&quot;http://docwiki.embarcadero.com/RADStudio/Seattle/en/Using_Reference_Counting&quot;&gt;contagem de referência&lt;/a&gt;
funcionando sem vazamentos de memória.&lt;/p&gt;

&lt;p&gt;Não mais.&lt;/p&gt;

&lt;p&gt;Agora eu utilizo cada vez menos variáveis locais e esse é um indício
de um código mais Orientado a Objetos. Variáveis locais são utilizados
em código &lt;em&gt;procedural&lt;/em&gt;. Você precisa de uma variável para &lt;em&gt;guardar&lt;/em&gt; algum
valor, enquanto executa outro processamento, e então utiliza a variável
que guardou em outro processamento… procedural.&lt;/p&gt;

&lt;p&gt;O número ideal para variáveis locais está entre &lt;strong&gt;0 e 3&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;atributos&quot;&gt;Atributos&lt;/h2&gt;

&lt;p&gt;Os atributos de um Objeto devem estar em conformidade com o que
ele representa. Se você tem um método que retorna o Objeto no formato
de XML, por exemplo, mas não utiliza esse formato em nenhum outro 
método, então você não deveria ter um atributo que representa um XML.
Em vez disso, crie o Objeto só quando ele for necessário, ou seja, 
quanto o método que retorna um XML for requisitado.&lt;/p&gt;

&lt;p&gt;O número ideal para atributos está entre &lt;strong&gt;1 e 7&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Aqui, no entanto, você pode quebrar essa regra &lt;em&gt;temporariamente&lt;/em&gt; se
necessário, devido a prazos, complexidade, etc. Você pode aumentar
o número de atributos e refatorar depois sem problemas, pois eles estarão 
&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/#encapsulamento&quot;&gt;encapsulados&lt;/a&gt;
dentro da Classe.&lt;/p&gt;

&lt;p&gt;Ninguém sabe o que acontece dentro de um Objeto, não é?&lt;/p&gt;

&lt;p&gt;O que não pode ocorrer é ter um Objeto que não encapsula &lt;em&gt;nenhum&lt;/em&gt; atributo.
Um Objeto &lt;em&gt;sempre&lt;/em&gt; deve encapsular alguma coisa, porque ele representa
algo. Ele deve ter algum &lt;a href=&quot;/posts/objetos-sem-estado/&quot;&gt;estado&lt;/a&gt;
que é implementado por seus atributos.&lt;/p&gt;

&lt;h2 id=&quot;classes&quot;&gt;Classes na Unidade&lt;/h2&gt;

&lt;p&gt;A linguagem Object Pascal foi uma das primeiras a implementar o conceito
de &lt;em&gt;packages&lt;/em&gt; ou &lt;em&gt;namespaces&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sim, estou falando das &lt;em&gt;units&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Cada &lt;a href=&quot;/posts/unidades-limitrofes/&quot;&gt;Unidade&lt;/a&gt; pode conter Classes 
públicas ou privadas.&lt;/p&gt;

&lt;p&gt;O número ideal para Classes dentro da mesma Unidade está entre &lt;strong&gt;1 e 11&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Dificilmente eu utilizo Classes privadas, pois sempre acho que elas podem 
ser utilizadas em outros módulos. No entanto, se necessário, Classe privadas — 
não importa se é privado no nível de Classe ou de Unidade — podem ser implementadas 
seguindo as mesmas regras dos atributos. 
Como são privadas, podem ser alteradas sem problemas futuramente.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Definir números máximos de usabilidade, é o mesmo que &lt;em&gt;restringir&lt;/em&gt;.
E restrição pode ser uma coisa boa. Restrição nos faz pensar em como tornar as
coisas mais &lt;em&gt;eficazes&lt;/em&gt; e com menos &lt;em&gt;desperdícios&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pense bem. Para fazer uma viagem para fora do seu país, por exemplo, você precisa 
planejar com cuidado o que levar na mochila.
Você deve escolher o que é mais &lt;em&gt;importante&lt;/em&gt; e &lt;em&gt;essencial&lt;/em&gt;, e nada a mais.
O motivo é viajar &lt;em&gt;leve&lt;/em&gt; e curtir ao máximo, sem se preocupar com inúmeros objetos
ou malas cheias de coisas que você estaria arrastando com você.&lt;/p&gt;

&lt;p&gt;É muito mais difícil &lt;em&gt;pensar&lt;/em&gt; no que é essencial ao invés de “por tudo na mala”,
mas é um exercício que vale a pena fazer. Você fica abismado ao saber que necessita
de tão pouco.&lt;/p&gt;

&lt;p&gt;O mesmo vale para o seu código. Mantenha tudo &lt;em&gt;leve&lt;/em&gt; e &lt;em&gt;simples&lt;/em&gt;.
Apenas com o essencial. Porque &lt;strong&gt;menos, é mais&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/menos-e-mais/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/menos-e-mais/</guid>
      </item>
    
      <item>
        <title>Classes Adaptadoras</title>
        <description>&lt;p&gt;Os dados sempre deverão estar encapsulados em Objetos que conversam
entre si enviando mensagens uns aos outros. No entanto essas mensagens
podem conter dados no formato que só o Objeto emissor conhece.&lt;/p&gt;

&lt;p&gt;Como o Objeto receptor irá saber ler esses dados que, outrora, estavam
encapsulados no Objeto emissor?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1428954376791-d9ae785dfb2d.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Cada Objeto detém o conhecimento sobre seus próprios dados encapsulados.
Ninguém mais.&lt;/p&gt;

&lt;p&gt;Para um sistema funcionar esses Objetos devem conversar entre si, enviando
&lt;a href=&quot;/posts/diga-me-algo-sobre-voce/#mensagens&quot;&gt;mensagens&lt;/a&gt;
uns aos outros.&lt;/p&gt;

&lt;p&gt;Sabemos o que fazer quando queremos saber informações sobre um determinado
Objeto. Basta utilizar seu
&lt;a href=&quot;/posts/diga-me-algo-sobre-voce/#metodo-about&quot;&gt;Método &lt;em&gt;About&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você, programador, sabe o que fazer com esses dados pois
você detém o conhecimento sobre todas as Classes e Objetos. No entanto são
os Objetos que devem &lt;a href=&quot;/posts/objetos-pensam-e-tomam-decisoes/&quot;&gt;conversar&lt;/a&gt;
entre eles mesmos. Você está &lt;em&gt;fora&lt;/em&gt; dessa conversa. Você não pode ajudá-los.
Esse é o problema.&lt;/p&gt;

&lt;p&gt;Então deve haver uma maneira do Objeto emissor conversar com o Objeto receptor,
utilizando um mesmo dialeto, sem que &lt;em&gt;você&lt;/em&gt; faça conversões explícitas para que
essa conversa aconteça.&lt;/p&gt;

&lt;h2 id=&quot;dados-entre-formularios&quot;&gt;Dados entre Formulários&lt;/h2&gt;

&lt;p&gt;Sempre que utilizamos formulários — ou qualquer tipo de &lt;em&gt;view&lt;/em&gt; — é porque
queremos exibir alguma informação para que o usuário tome alguma decisão ou 
execute alguma tarefa.&lt;/p&gt;

&lt;p&gt;Esses formulários podem obter seus dados quando são criados ou posteriormente,
devido a alguma ação do usuário.&lt;/p&gt;

&lt;p&gt;Vamos nos concentrar nesses dados inicias.&lt;/p&gt;

&lt;p&gt;Imagine um sistema Financeiro. Há dois formulários:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Faturas a Pagar&lt;/li&gt;
  &lt;li&gt;Opções de Pagamento&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No formulário de Faturas a Pagar o usuário irá selecionar as faturas, clicar
em algum botão para pagar e, nesse momento, um outro formulário com as Opções
de Pagamento será exibido.&lt;/p&gt;

&lt;p&gt;O que o formulário de Faturas a Pagar deveria enviar para o formulário de 
Opções de Pagamento no seu
&lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtor&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Bem, isso depende.&lt;/p&gt;

&lt;p&gt;Antes precisamos definir, nesse pequeno exemplo, o que é uma Fatura a Pagar,
assim como o que são Opções de Pagamento.&lt;/p&gt;

&lt;p&gt;Vamos nos concentrar nos dados:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Uma Fatura encapsula um número sequencial, um valor a pagar original, um valor
  a pagar atual (com multa e juros), uma data, uma descrição, itens…
  vamos parar aqui.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Uma Opção de Pagamento encapsula opções (dinheiro, cartão de crédito, etc),
  valor para cada opção, valor total a pagar e… tudo bem, já está bom.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;opcoes-de-implementacao&quot;&gt;Oções de Implementação&lt;/h2&gt;

&lt;p&gt;Agora que temos algumas definições, podemos pensar no modelo que iremos
seguir para determinar como será feita a implementação.&lt;/p&gt;

&lt;p&gt;Vamos ver as opções.&lt;/p&gt;

&lt;h3 id=&quot;banco-de-dados-e-registros&quot;&gt;1- Banco de dados e registros&lt;/h3&gt;

&lt;p&gt;Não pense em &lt;a href=&quot;/posts/pensando-em-dados/&quot;&gt;dados&lt;/a&gt; provenientes de
um banco de dados, &lt;em&gt;queries&lt;/em&gt; ou &lt;em&gt;DataSet&lt;/em&gt;. Os dados já estão no formulário, numa 
&lt;em&gt;grid&lt;/em&gt; listando todas as faturas.&lt;/p&gt;

&lt;p&gt;Você já tem tudo que precisa nos &lt;em&gt;widgets&lt;/em&gt; do formulário. Não há necessidade
de fazer uma nova requisição de dados.&lt;/p&gt;

&lt;p&gt;E agora, ficou mais fácil?&lt;/p&gt;

&lt;p&gt;Ainda não.&lt;/p&gt;

&lt;p&gt;Se toda Entidade deve ser
&lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;representada&lt;/a&gt;
por um Objeto, você já sabe que não são apenas 2 Objetos (formulários) que irão
fazer parte dessa conversa. Haverá outros Objetos.&lt;/p&gt;

&lt;p&gt;Mas lembre-se que ainda estamos falando de dados.&lt;/p&gt;

&lt;h3 id=&quot;objetos-anemicos-e-listas&quot;&gt;2- Objetos anêmicos e listas&lt;/h3&gt;

&lt;p&gt;Não pense em criar Classes Anêmicas
como &lt;code&gt;TInvoice&lt;/code&gt; com todos os campos acima, utilizando 
&lt;a href=&quot;/posts/getters-e-setters/&quot;&gt;Getters e Setters&lt;/a&gt;
e uma lista &lt;code&gt;TInvoices&lt;/code&gt; para passar ao formulário de Opções de Pagamento.&lt;/p&gt;

&lt;p&gt;Pensou nisso mesmo?&lt;/p&gt;

&lt;p&gt;Essa é uma opção de implementação que irá acoplar ambos os formulários
a essa lista de Faturas. E isso irá restringir o formulário de Opções de 
Pagamento.&lt;/p&gt;

&lt;p&gt;Então vamos adicionar um complicador:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;O formulário de Opções de Pagamento será utilizado
  para pagar &lt;em&gt;qualquer coisa&lt;/em&gt; dentro do sistema, ou seja, não &lt;em&gt;apenas&lt;/em&gt; Faturas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nesse caso uma refatoração seria necessária.&lt;/p&gt;

&lt;p&gt;Ainda acha que criar uma lista de Faturas seria a melhor opção?&lt;/p&gt;

&lt;h3 id=&quot;heranca-e-esperanca&quot;&gt;3- Herança e esperança&lt;/h3&gt;

&lt;p&gt;Ora, vamos criar uma lista genérica ou Interface, utilizar herança para &lt;code&gt;TInvoices&lt;/code&gt;
e refatorar o formulário para receber essa lista.&lt;/p&gt;

&lt;p&gt;É claro que não.&lt;/p&gt;

&lt;p&gt;Já sabemos que
&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;herança&lt;/a&gt;
não foi feita para compartilhar código e que ela pode piorar (e muito) a arquitetura do projeto.&lt;/p&gt;

&lt;p&gt;Essa seria uma das piores opções. Esqueça-a.&lt;/p&gt;

&lt;h3 id=&quot;manual&quot;&gt;4- Manualmente&lt;/h3&gt;

&lt;p&gt;Então você, o programador, manipula os dados do formulário de Faturas, criando 
um XML que você sabe que o formulário de Opções de Pagamento espera receber — 
porque você pode ver o código-fonte de todas as Classes — e então repassa esse XML
para o formulário de Opções de Pagamento.&lt;/p&gt;

&lt;p&gt;É, talvez irá funcionar… mas por quanto tempo?&lt;/p&gt;

&lt;p&gt;Sabendo que o formulário de Opções de Pagamento pode ser utilizado por outros módulos,
se houver alguma alteração nos dados que ele espera receber, será muito difícil
procurar em todos esses lugares para fazer alterações. Cada equipe que trabalha em 
módulos distintos — mas que utiliza esse mesmo formulário — pode ter criado suas próprias
versões do XML para enviar ao formulário. O código foi duplicado. Terrível.&lt;/p&gt;

&lt;h3 id=&quot;classes-adaptadoras&quot;&gt;5- Classes Adaptadoras&lt;/h3&gt;

&lt;p&gt;Minha sugestão é utilizarmos Classes Adaptadoras.&lt;/p&gt;

&lt;p&gt;Elas poderão ser muitas. Vai depender de quantos módulos/classes irão utilizar 
o formulário de Opções de Pagamentos.&lt;/p&gt;

&lt;p&gt;Classes Adaptadoras são &lt;strong&gt;conectores&lt;/strong&gt;. Elas adaptam as interfaces, adaptam os
&lt;a href=&quot;/posts/interfaces-em-todo-lugar/#interfaces-sao-contratos&quot;&gt;contratos&lt;/a&gt;
que cada Objeto tem para com o sistema.&lt;/p&gt;

&lt;p&gt;Elas tornam possível uma &lt;em&gt;Classe-A&lt;/em&gt; trabalhar em conjunto com a uma &lt;em&gt;Classe-B&lt;/em&gt;,
mesmo que ambas não se conheçam.&lt;/p&gt;

&lt;p&gt;Os programadores só precisam saber que essas Classes Adaptadoras existem e onde estão 
guardadas, quando eles precisarem delas.&lt;/p&gt;

&lt;h2 id=&quot;adaptando&quot;&gt;Adaptando&lt;/h2&gt;

&lt;p&gt;No formulário de Faturas a Pagar teremos, no mínimo, mais duas Classes que irão fazer
parte da conversa. São elas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A Classe &lt;code&gt;TGridSelectedRows&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A Classe &lt;code&gt;TInvoiceMedia&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A Classe &lt;code&gt;TGridSelectedRows&lt;/code&gt; é responsável por &lt;em&gt;adaptar&lt;/em&gt; as linhas selecionadas da &lt;em&gt;grid&lt;/em&gt; para o
formato XML — ou qualquer outro formato que lhe agrade — e seu resultado é utilizado ou
validado pela &lt;code&gt;TInvoiceMedia&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TInvoiceMedia.New(
  TGridSelectedRows.New(
    InvoiceGrid, &#39;invoices&#39;, &#39;invoice&#39;
  )
  .Stream
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A chamada a &lt;code&gt;TGridSelectedRows::Stream&lt;/code&gt; irá retorna uma instância de
&lt;code&gt;IDataStream&lt;/code&gt; (veja &lt;a href=&quot;http://objectpascalprogramming.com/posts/microservices-delphi-parte-1/#comment-2982613320&quot;&gt;aqui&lt;/a&gt;
a implementação). Os outros argumentos são utilizados para criar o XML dessa forma:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;invoices&amp;gt;
  &amp;lt;invoice&amp;gt;
    &amp;lt;number...
    &amp;lt;value...
  &amp;lt;/invoice&amp;gt;
  &amp;lt;invoice&amp;gt;
    &amp;lt;number...
    &amp;lt;value...
  &amp;lt;/invoice&amp;gt;
&amp;lt;/invoices&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A implementação de &lt;code&gt;TGridSelectedRows&lt;/code&gt; não é relevante para o entendimento do problema.&lt;/p&gt;

&lt;p&gt;Nesse exemplo &lt;code&gt;TInvoiceMedia&lt;/code&gt; implementa &lt;code&gt;IDataStream&lt;/code&gt;. Mas essa classe também terá a
inteligência para validar o XML (stream) que foi lhe passado no construtor.&lt;/p&gt;

&lt;p&gt;Então temos o XML válido com todas as faturas encapsulado em &lt;code&gt;TInvoiceMedia&lt;/code&gt;. Precisamos
agora de uma Classe Adaptadora para transformar Faturas no formato que Opções de Pagamento
entenda.&lt;/p&gt;

&lt;p&gt;E aqui vai uma &lt;strong&gt;dica&lt;/strong&gt; importante: A Classes que adaptam um conceito devem estar “próximas”
umas das outras para que seja fácil para o programador achá-las e utilizá-las.&lt;/p&gt;

&lt;p&gt;Vamos dar nomes as outras Classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Formulário Opções de Pagamento: &lt;code&gt;TPaymentOptionsForm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Tipo do argumento no construtor do Formulário: &lt;code&gt;IPaymentOptionsMedia&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Classe Adaptadora de Faturas para Opções: &lt;code&gt;TPaymentOptionsForInvoices&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O código do evento no botão para exibir as Opções de Pagamento, ou seja, a 
chamada do formulário, seria parecido com o código abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;with
  TPaymentOptionsForm.Create(
    TPaymentOptionsForInvoices.New(
      TInvoiceMedia.New(
        TGridSelectedRows.New(
          InvoiceGrid, &#39;invoices&#39;, &#39;invoice&#39;
        )
        .Stream
      )
    )
  )
do
  try
    ShowModal;
  finally
    Free;
  end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Classe &lt;code&gt;TPaymentOptionsForInvoices&lt;/code&gt; irá receber o XML de Faturas a Pagar
e irá &lt;em&gt;adaptar&lt;/em&gt; num XML de Opções de Pagamento (somar todos os valores das
faturas, verificar alguma insconcistência, etc).&lt;/p&gt;

&lt;p&gt;O formulário de Opções de Pagamento só &lt;em&gt;conhece&lt;/em&gt; implementações de &lt;em&gt;IPaymentOptionsMedia&lt;/em&gt;,
que é a Interface implementada por &lt;code&gt;TPaymentOptionsForInvoices&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para todos os outros casos de pagamentos, basta criar outra Classe Adaptadora especialista
com o mesmo prefixo &lt;code&gt;TPaymentOptionsFor...&lt;/code&gt; para facilitar o &lt;em&gt;code-completion&lt;/em&gt; quando
o programador estiver procurando um &lt;em&gt;conector&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Quando houver alguma alteração no XML que o formulário Opções de Pagamento
recebe, basta alterar as Classes Adaptadoras. Você saberá exatamente onde procurar. E,
tão importante quanto, é ter em mente que essas Classes poderão compartilhar código entre
elas bastando criar mais Classes especialistas — talvez privada na unidade.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Classes Adaptadoras e Interfaces é como plugamos as &lt;em&gt;peças&lt;/em&gt; dentro de um software Orientado
a Objetos.&lt;/p&gt;

&lt;p&gt;Em alguns casos pode ser bem difícil identificar essas Classes ou a melhor forma de
implementá-las. Mas, não desista, pois vale muito a pena. Seu código irá ficar mais 
desacoplado, sem duplicação e muito mais reutilizável.&lt;/p&gt;

&lt;p&gt;Dessa forma um Objeto receptor saberá ler os dados de Objetos emissores mesmo sem
conhecê-los intimamente.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/classes-adaptadoras/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/classes-adaptadoras/</guid>
      </item>
    
  </channel>
</rss>
