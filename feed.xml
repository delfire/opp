<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Pascal Programming</title>
    <description>Sacadas sobre Programação Orientada a Objetos e Object Pascal.
</description>
    <link>http://objectpascalprogramming.com/</link>
    <atom:link href="http://objectpascalprogramming.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>James Package</title>
        <description>&lt;p&gt;James é um pacote de Classes e Interfaces para projetos Orientados a Objetos.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-wesley-caribe-63610.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eu tenho um diretório com código-fonte que é utilizado por quase todos os meus projetos, particulares ou não.&lt;/p&gt;

&lt;p&gt;Apenas 1 diretório com quase 100 arquivos.&lt;/p&gt;

&lt;p&gt;São fontes para trabalhar com &lt;em&gt;stream&lt;/em&gt;, XML, arquivos, HTTP, &lt;em&gt;WebServices&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;Não há pacotes ou subprojetos. Apenas arquivos que são compartilhados por vários projetos.&lt;/p&gt;

&lt;p&gt;Como todo desenvolvedor Pascal faz, basta ter um diretório, adicionar o &lt;em&gt;path&lt;/em&gt; no projeto e começar a usar os fontes. Simples.&lt;/p&gt;

&lt;p&gt;Esse código-fonte foi sendo construído e modificando por vários anos. Alguns fontes são bem novos, outros bem antigos.&lt;/p&gt;

&lt;p&gt;Mesmo que tudo esteja funcionando, essa “organização” me tira o sono.&lt;/p&gt;

&lt;p&gt;Faz tempo que eu quero organizar esse código-fonte. Fazer uma limpeza. Atualizar. Criar pacotes lógicos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Então pensei: Por quê não criar um projeto &lt;em&gt;Open Source&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Bem, é o que estou fazendo agora. Esse é meu presente de Páscoa pra você.&lt;/p&gt;

&lt;p&gt;Criei o primeiro projeto.&lt;/p&gt;

&lt;p&gt;Chama-se &lt;strong&gt;James&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Eu tenho nomeado meus projetos utilizando nomes comuns — a maioria em Inglês — já faz quase 2 anos.&lt;/p&gt;

&lt;p&gt;É divertido.&lt;/p&gt;

&lt;p&gt;É como se cada projeto fizesse parte de uma família.&lt;/p&gt;

&lt;p&gt;A maioria dos meus &lt;em&gt;aplicativos&lt;/em&gt; tem nomes femininos. Já os projetos que são &lt;em&gt;ferramentas&lt;/em&gt; ou &lt;em&gt;libs&lt;/em&gt;, costumam ter nomes masculinos.&lt;/p&gt;

&lt;p&gt;Você pode fazer um &lt;em&gt;fork&lt;/em&gt; do James &lt;a href=&quot;https://github.com/mdbs99/james&quot;&gt;aqui&lt;/a&gt; e contribuir.&lt;/p&gt;

&lt;p&gt;Até agora subi poucos arquivos.&lt;/p&gt;

&lt;p&gt;Ainda estou organizando.&lt;/p&gt;

&lt;p&gt;Mas estou lhe avisando agora, justamente porque tem poucos arquivos para ficar fácil o entendimento do código.&lt;/p&gt;

&lt;p&gt;Estou pretendendo criar vários outros projetos &lt;em&gt;Open Source&lt;/em&gt; que sejam compatíveis com o Delphi na versão mais atual.&lt;/p&gt;

&lt;p&gt;Por isso preciso da sua ajuda.&lt;/p&gt;

&lt;p&gt;Os fontes foram compilados no dialeto do Free Pascal. Basta utilizar &lt;code&gt;{$mode delphi}&lt;/code&gt; para compilar no dialeto do Delphi, utilizando o FPC.&lt;/p&gt;

&lt;p&gt;Vou utilizar o dialeto Delphi para que os fontes sejam compatíveis, mas somente se houver interesse por parte da comunidade Delphi (utilize os comentários abaixo se você está interessado).&lt;/p&gt;

&lt;p&gt;O James será a base (refatorada) de todos os meus projetos. Ele possui Classes base que é útil na maioria dos meus projetos.&lt;/p&gt;

&lt;p&gt;Durante esse semana vou subir os fontes das &lt;em&gt;Unit Tests&lt;/em&gt;. Já estão prontos, mas precisam ser refatorados.&lt;/p&gt;

&lt;p&gt;Outro projeto que irá utilizar o James, eu já criei no Github. Seu nome é &lt;a href=&quot;https://github.com/mdbs99/kate&quot;&gt;Kate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kate é uma &lt;em&gt;lib&lt;/em&gt; para trabalhar com certificação e assinatura digital. Essa &lt;em&gt;lib&lt;/em&gt; irá utilizar o &lt;a href=&quot;/posts/assinatura-digital-em-arquivos-xml/#utilizando-acbr&quot;&gt;Projeto ACBr&lt;/a&gt; nos “bastidores”.&lt;/p&gt;

&lt;p&gt;Todos esses projetos serão baseados nas premissas dos artigos que venho escrevendo aqui no blog.&lt;/p&gt;

&lt;p&gt;Todos serão &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/&quot;&gt;Orientados a Objetos&lt;/a&gt; e 100% baseados em &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interfaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&quot;https://github.com/mdbs99/aws&quot;&gt;AWS&lt;/a&gt; também será atualizado para compilar na versão mais atual do FPC e, quem sabe, irá compilar no Delphi.&lt;/p&gt;

&lt;p&gt;Quando tudo estiver organizado, será o momento de iniciarmos um novo &lt;strong&gt;Framework Web&lt;/strong&gt; 100% Orientado a Objetos para FPC e Delphi.&lt;/p&gt;

&lt;p&gt;Você está comigo?&lt;/p&gt;

&lt;p&gt;Então vamos! &lt;strong&gt;#ObjectPascal4Ever&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Apr 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/james/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/james/</guid>
      </item>
    
      <item>
        <title>Objetos Puros</title>
        <description>&lt;p&gt;Mesmo que você tenha utilizado linguagens imperativas por toda a sua vida, você já deve ter ouvido falar em linguagens funcionais, assim como o termo &lt;em&gt;Funções Puras&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;E sobre &lt;em&gt;Objetos Puros&lt;/em&gt;, você já ouviu algo a respeito?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-florian-klauer-489.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Se você não conhece o termo &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;Funções Puras&lt;/a&gt; ou linguagens funcionais, bem, você deveria.&lt;/p&gt;

&lt;p&gt;A verdadeira &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/&quot;&gt;Orientação a Objetos&lt;/a&gt; tem muito em comum com a Programação Funcional.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;p&gt;A Programação Funcional é declarativa. Você não deve dizer ao compilador o que fazer linha-a-linha. Assim como na Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;A Programação Funcional trabalha com estruturas &lt;a href=&quot;/posts/objetos-imutaveis/&quot;&gt;imutáveis&lt;/a&gt;, que é um ótimo conceito para simplificar a interperabilidade entre Objetos na Programação Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;A Programação Funcional também tem o conceito de Funções Puras ou Impuras.&lt;/p&gt;

&lt;p&gt;Será que esse mesmo conceito tem algo em comum com a Orientação a Objetos?&lt;/p&gt;

&lt;h2 id=&quot;funcoes-puras&quot;&gt;Funções Puras&lt;/h2&gt;

&lt;p&gt;Segundo a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;Wikipedia&lt;/a&gt;, para uma função ser considerada &lt;em&gt;Pura&lt;/em&gt;, as seguintes afirmações abaixo devem ser verdadeiras (tradução livre):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A função sempre avalia o mesmo valor de resultado dado o mesmo valor do(s) argumento(s). O valor do resultado da função não pode depender de nenhuma informação oculta ou estado que possa mudar enquanto a execução do programa prossegue ou entre diferentes execuções do programa, nem pode depender de qualquer entrada externa dos dispositivos de E/S.&lt;/li&gt;
  &lt;li&gt;A avaliação do resultado não causa qualquer efeito ou saída secundária observável semanticamente, como a mutação de objetos mutáveis ​​ou a saída para dispositivos de E/S.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Se ambas as afirmações não forem verdadeiras, a função é considerada &lt;em&gt;Impura&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Eu acho que essas afirmações são cabíveis na Orientação a Objetos, pois é bem possível criar um Objeto que cumpre ambas as afirmações.&lt;/p&gt;

&lt;p&gt;Mas Objetos podem ser mais complexos que funções. Os Objetos tem &lt;em&gt;estado&lt;/em&gt; encapsulado. Podem ser mutáveis ou imutáveis.&lt;/p&gt;

&lt;p&gt;Então, é possível considerarmos um Objeto como puro?&lt;/p&gt;

&lt;h2 id=&quot;objetos-puros&quot;&gt;Objetos Puros&lt;/h2&gt;

&lt;p&gt;Eu não encontrei esse termo na Web então, será que posso dizer que eu cunhei o termo?&lt;/p&gt;

&lt;p&gt;Na verdade eu não me importo, visto que não é uma ideia 100% original. Eu me inspirei nas Funções Puras e apenas ampliei o conceito para a Programação Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, um Objeto Puro deve ter as mesmas características que uma Função Pura.&lt;/p&gt;

&lt;p&gt;Um Objeto Puro também não deve criar outro Objeto internamente.&lt;/p&gt;

&lt;p&gt;Em outras palavras, para um Objeto ser considerado Puro, toda dependência deve ser injetada pelo &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtor&lt;/a&gt; da Classe.&lt;/p&gt;

&lt;p&gt;Vamos ver alguns exemplos.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-1&quot;&gt;Exemplo 1 — Objeto Impuro&lt;/h4&gt;

&lt;p&gt;Abaixo temos um exemplo de uma Classe &lt;code&gt;TBMWCar&lt;/code&gt; que implementa a Interface &lt;code&gt;ICar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Então instanciamos um &lt;code&gt;Car&lt;/code&gt; e depois mostramos na tela o valor do sensor de velocidade do motor — acho que tem sensores mais antigos que calculam a partir das rodas, mas isso é irrelevante.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var
  Car: ICar;
begin
  Car := TBMWCar.New;
  Print(Car.Engine.Sensors[&#39;speed&#39;].Value);
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eu diria que essa Classe &lt;code&gt;TBMWCar&lt;/code&gt; é impura.&lt;/p&gt;

&lt;p&gt;O motivo é que temos um método &lt;code&gt;Engine&lt;/code&gt; (Método ou Propriedade, dá no mesmo) que retorna um Objeto interno que &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;representa&lt;/a&gt; o motor do carro.&lt;/p&gt;

&lt;p&gt;Como essa instância de motor foi criada?&lt;/p&gt;

&lt;p&gt;Olhando apenas o exemplo, podemos concluir que a instância foi criada no construtor da Classe ou mesmo diretamente na chamada do Método &lt;code&gt;Engine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;E sobre os &lt;code&gt;Sensors&lt;/code&gt;? Também não sabemos como foram criados.&lt;/p&gt;

&lt;p&gt;Não temos o controle do que será instanciado dentro da Classe &lt;code&gt;TBMWCar&lt;/code&gt; se quisermos utilizá-la.&lt;/p&gt;

&lt;p&gt;O Objeto tem o controle e isso está &lt;em&gt;correto&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Você compra um carro e, normalmente, apenas utiliza sua interface (volante, marcha, pedais, painel, etc). Todo ele já vem montado e perfeito.&lt;/p&gt;

&lt;p&gt;Talvez você não saiba o tipo de motor, tecnologia ou fornecedores que fabricaram suas peças.&lt;/p&gt;

&lt;p&gt;O carro apenas existe, pronto para sua função.&lt;/p&gt;

&lt;p&gt;Mas… Isso retrata a vida real ou estamos pulando algumas etapas?&lt;/p&gt;

&lt;p&gt;Na verdade, antes do carro chegar até suas mãos, ele foi &lt;em&gt;montado na fábrica&lt;/em&gt; utilizando centenas ou milhares de peças.&lt;/p&gt;

&lt;p&gt;Quando olhamos para o carro montado, concluído, perfeito, não pensamos nessa etapa de montagem, queremos apenas utilizá-lo. Não queremos &lt;em&gt;montar&lt;/em&gt; o carro toda vez que tivermos que utilizá-lo, certo?&lt;/p&gt;

&lt;p&gt;Ele já deve vir concluído e pronto para uso.&lt;/p&gt;

&lt;p&gt;O problema dessa abordagem, no entanto, é que não podemos &lt;em&gt;testar&lt;/em&gt; o carro — a Classe &lt;code&gt;TBMWCar&lt;/code&gt; — apropriadamente ou isoladamente, utilizando &lt;em&gt;Unit Tests&lt;/em&gt;, sem que o “motor original” seja “ativado”.&lt;/p&gt;

&lt;p&gt;Para fazer esses testes, temos que voltar algumas etapas para ser possível desmontar ou montar o carro com “outras peças”.&lt;/p&gt;

&lt;p&gt;Temos que voltar à “fábrica” para podermos escolher quais peças irão compor o carro.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-2&quot;&gt;Exemplo 2 — Objeto Puro&lt;/h4&gt;

&lt;p&gt;Vamos refazer o exemplo anterior, &lt;em&gt;injetando&lt;/em&gt; o motor que quisermos quando formos criar a instância do nosso BMW.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Car := 
  TBMWCar.New(
    TV8Engine.New(
      // more arguments
    )
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No código atualizado, sabemos que tipo de motor está sendo utilizado. Trata-se de um modelo V8. Legal!&lt;/p&gt;

&lt;p&gt;Estamos utilizando &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Injeção de Dependência&lt;/a&gt; aqui.&lt;/p&gt;

&lt;p&gt;Essa técnica, em conjunto com a Composição de Objetos, é crucial para um desenvolvimento elegante e eficaz na Programação Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;E por quê é “melhor” fazer dessa forma?&lt;/p&gt;

&lt;p&gt;O motivo é que agora podemos testar o carro sem “ligar o motor original” se assim o desejarmos. Vejamos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Car := 
  TBMWCar.New(
    TFakeEngine.New
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos testar o carro, mas ele estará utilizando um “motor falso” ou pense em sensores falsos (utilize sua imaginação).&lt;/p&gt;

&lt;p&gt;Esse Objeto é &lt;em&gt;puro&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ele não cria nada internamente. Todas as suas dependências são injetadas através do construtor da Classe.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Para um Objeto ser considerado puro ele deve ter o comportamento de uma Função Pura e também não deve criar nada internamente.&lt;/p&gt;

&lt;p&gt;Da mesma forma que temos as Funções Puras no Paradigma Funcional, podemos ter os Objetos Puros no Paradigma Orientado a Objetos. Para isto, precisamos que estes Objetos sejam imutáveis e que as suas dependências sejam injetadas explicitamente, passadas por meio do construtor do Objeto.&lt;/p&gt;

&lt;p&gt;A vantagem de termos Objetos Puros é que eles tem baixo acoplamento e por isso são mais fáceis de serem testados.&lt;/p&gt;

&lt;p&gt;Mas se tudo são Objetos, onde as instâncias serão criadas?&lt;/p&gt;

&lt;p&gt;Em apenas 2 lugares: Dentro de Construtores &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;Secundários&lt;/a&gt; ou através de Métodos de Objetos Impuros.&lt;/p&gt;

&lt;p&gt;Mas esse é um assunto para outro artigo.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Apr 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/objetos-puros/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/objetos-puros/</guid>
      </item>
    
      <item>
        <title>Pacotes e Versões no Lazarus</title>
        <description>&lt;p&gt;Se você já precisou trabalhar com versões diferentes de um mesmo Pacote de componentes no Lazarus, esse artigo pode ser útil.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-samuel-zeller-118195.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Os &lt;em&gt;frameworks&lt;/em&gt; e &lt;em&gt;libs&lt;/em&gt; sempre são disponibilizados no formato de Pacotes.&lt;/p&gt;

&lt;p&gt;No Delphi são os arquivos *.dpk e no Lazarus são os arquivos *.lpk.&lt;/p&gt;

&lt;p&gt;Os Pacotes são ótimos. Ajudam na separação lógica do código e reutilização, mesmo dentro de um único projeto.&lt;/p&gt;

&lt;p&gt;Os Pacotes também servem para empacotar componentes que serão instalados na IDE.&lt;/p&gt;

&lt;p&gt;Mas se você precisar utilizar uma versão diferente (mais atualizada) de um Pacote num projeto, mas não quer alterar o código de outros projetos mais antigos que também utilizam esse Pacote, o que fazer?&lt;/p&gt;

&lt;h2 id=&quot;problemas&quot;&gt;Problemas&lt;/h2&gt;

&lt;p&gt;Pode ser sorte, mas a anos eu trabalho com componentes, frameworks ou libs (vou utilizar a nomenclatura &lt;em&gt;Libs&lt;/em&gt; agora) de terceiros e quase nunca tive problemas em atualizar os fontes.&lt;/p&gt;

&lt;p&gt;Talvez minha sorte tenha haver com o fato de que eu quase não atualizo as &lt;em&gt;Libs&lt;/em&gt; que estão funcionando.&lt;/p&gt;

&lt;p&gt;Por outro lado não posso ficar “parado no tempo” pois quando atulizar o código muita coisa pode ter mudado e levará um tempo até fazer todas as correções.&lt;/p&gt;

&lt;p&gt;Então, precisamos atualizar alguma hora.&lt;/p&gt;

&lt;p&gt;As vezes tenho que fazer pequenas correções no meu código ou mesmo envio &lt;em&gt;patches&lt;/em&gt; para outros autores de componentes &lt;em&gt;Open Source&lt;/em&gt;, mas nunca tive um problema grave.&lt;/p&gt;

&lt;p&gt;Por isso sempre mantive apenas 1 source para cada &lt;em&gt;Lib&lt;/em&gt;. Para projetos mais organizados que mantém &lt;em&gt;branches&lt;/em&gt; imutáveis (&lt;em&gt;labels&lt;/em&gt;) de versões, era ainda mais seguro.&lt;/p&gt;

&lt;p&gt;Bem, não mais.&lt;/p&gt;

&lt;p&gt;Parece que minha sorte acabou e venho tendo alguns problemas de incompatibilidade entre esses Pacotes.&lt;/p&gt;

&lt;p&gt;São alguns problemas, não muitos.&lt;/p&gt;

&lt;p&gt;As vezes uma atualização de algum Pacote não compila com a versão mais nova do Lazarus; outras vezes não compila com a versão mais nova do FPC; outras vezes o código foi tão alterado que fico receoso em atualizar, pois tenho projetos que não tem &lt;em&gt;Unit Tests&lt;/em&gt; apropriados.&lt;/p&gt;

&lt;p&gt;Então vi que era hora de me preocupar com isso e vou lhe explicar como estou fazendo atualmente.&lt;/p&gt;

&lt;h2 id=&quot;versionando&quot;&gt;Versionando&lt;/h2&gt;

&lt;p&gt;Primeiramente eu entrei em contato com a &lt;a href=&quot;http://lists.lazarus.freepascal.org/pipermail/lazarus/&quot;&gt;Lista Oficial do Lazarus&lt;/a&gt; e (resumindo) &lt;a href=&quot;http://lists.lazarus.freepascal.org/pipermail/lazarus/2017-March/231269.html&quot;&gt;perguntei&lt;/a&gt; como eu poderia manter mais de uma versão de um mesmo Pacote.&lt;/p&gt;

&lt;p&gt;Ao que parece o Lazarus IDE é bem &lt;em&gt;esperto&lt;/em&gt; e consegue fazer o carregamento do Pacote correspondende a versão que você sinalizou que gostaria de utilizar quando adicionou o Pacote como dependência no seu Projeto.&lt;/p&gt;

&lt;p&gt;No exemplo abaixo eu estou adicinando o Pacote AWS a partir da versão 0.4:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-new-requirement-8287.jpg&quot; alt=&quot;Lazarus New Requirement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Significa que se um Projeto estiver utilizando a versão 0.3 é esse Pacote que está disponível, mas se você abrir um novo projeto que utiliza a versão 0.4, por exemplo, a IDE irá recarregar a nova versão do Pacote.&lt;/p&gt;

&lt;p&gt;Legal, mas não resolve 100%.&lt;/p&gt;

&lt;h2 id=&quot;preferencial&quot;&gt;Definindo Pacotes Preferenciais&lt;/h2&gt;

&lt;p&gt;Muitas vezes o autor não versiona o Pacote, ou seja, ele não define os números de &lt;em&gt;Min&lt;/em&gt; e &lt;em&gt;Max&lt;/em&gt;. Nesse caso, não há como a IDE carregar o Pacote correto, pois todos teriam o mesmo número de versão.&lt;/p&gt;

&lt;p&gt;Então mais uma vez o Lazarus me surpreendeu me dando a opção de marcar um &lt;a href=&quot;http://wiki.freepascal.org/IDE_Window:_Project_Inspector#Store_file_name_as_preferred_for_this_dependency&quot;&gt;Pacote como preferencial&lt;/a&gt;, apontando diretamente para o &lt;em&gt;path&lt;/em&gt; do *.lpk.&lt;/p&gt;

&lt;p&gt;Quase perfeito, mas…&lt;/p&gt;

&lt;p&gt;Não há opção na IDE para configurar o &lt;em&gt;path&lt;/em&gt;. Ao utilizar a oção de &lt;em&gt;preferencial&lt;/em&gt; você vai salvar o &lt;em&gt;path&lt;/em&gt; nas configurações do seu projeto, mas ele vai salvar o &lt;em&gt;path&lt;/em&gt; do Pacote que já está carregado.&lt;/p&gt;

&lt;p&gt;Eu &lt;a href=&quot;http://lists.lazarus.freepascal.org/pipermail/lazarus/2017-April/231287.html&quot;&gt;sugeri&lt;/a&gt; que deveria haver essa opção lá na lista, porém não sei se não entenderam ou talvez eu não tenha entendido como o mecanismo funciona — ou talvez os autores estão curtindo o fim de semana merecido e irão responder outra hora — enfim.&lt;/p&gt;

&lt;p&gt;De qualquer forma estou pensando em fazer esse &lt;em&gt;patch&lt;/em&gt; para o Lazarus, ou seja, poder adicionar uma dependência apontando para um &lt;em&gt;path&lt;/em&gt; relativo.&lt;/p&gt;

&lt;p&gt;Enquanto não há essa opção, sigo em frente.&lt;/p&gt;

&lt;p&gt;Estou utilizando no mínimo 3 diretórios com a cópia dos fontes de diferentes versões para o mesmo Pacote.&lt;/p&gt;

&lt;p&gt;São eles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;master — diretório com a versão de produção;&lt;/li&gt;
  &lt;li&gt;develop — diretório com a versão modificada, testes, patchs, etc;&lt;/li&gt;
  &lt;li&gt;snapshot — diretório com a versão original do autor;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Felizmente esses diretórios são &lt;strong&gt;facilmente&lt;/strong&gt; alterados no XML *.lpi de configuração do Projeto. É manual, porém bem fácil (como a maioria das coisas são no &lt;em&gt;Object Pascal&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Caso eu queria mudar a versão de um Pacote, basta mudar o diretório com a versão correspondente e dar um &lt;em&gt;build&lt;/em&gt; no Projeto.&lt;/p&gt;

&lt;p&gt;Simples assim.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Os Pacotes são uma ótima maneira de modularizar seus Projetos em unidades lógicas que podem ser compartilhadas entre outros Projetos.&lt;/p&gt;

&lt;p&gt;No entanto, manter a organização de várias versões não é um trabalho fácil. A IDE ajuda com o carregamento das versões corretas, porém nem sempre isso irá funcionar.&lt;/p&gt;

&lt;p&gt;Eu prefiro as coisas mais &lt;a href=&quot;/posts/simplicidade/&quot;&gt;simples&lt;/a&gt;, mais minimalista. Não quero ficar “dependente” da IDE para gerenciar meu trabalho. Então eu estou versionando meus Pacotes utilizando os diretórios e toda vez que adiciono uma nova dependência, marco como &lt;em&gt;preferencial&lt;/em&gt; para que a IDE sempre abra a versão configurada.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Apr 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/pacotes-e-versoes-no-lazarus/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/pacotes-e-versoes-no-lazarus/</guid>
      </item>
    
      <item>
        <title>Identificador Único Universal</title>
        <description>&lt;p&gt;Como identificar unicamente seus Objetos?&lt;/p&gt;

&lt;p&gt;Como fazer migração de dados sem se preocupar com campos auto-incremento e &lt;em&gt;foreign key&lt;/em&gt; entre as tabelas?&lt;/p&gt;

&lt;p&gt;Como diminuir o número de tabelas?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-greg-rakozy-38802.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;&lt;em&gt;Universally Unique Identifier&lt;/em&gt;&lt;/a&gt; (UUID) é um número de 128-bit utilizado para identificar uma informação unicamente.&lt;/p&gt;

&lt;p&gt;A Microsoft utiliza o termo &lt;em&gt;Globally Unique Identifier&lt;/em&gt; (GUID), mas na prática é a mesma coisa.&lt;/p&gt;

&lt;p&gt;Nesse artigo você vai aprender como utilizá-lo.&lt;/p&gt;

&lt;h2 id=&quot;tabelas-e-relacionamentos&quot;&gt;Tabelas e Relacionamentos&lt;/h2&gt;

&lt;p&gt;A muitos anos atrás eu estava fazendo um curso de Programação de Computadores onde uma das matérias era sobre Sistemas Gerenciadores de Banco de Dados (SGBD’s).&lt;/p&gt;

&lt;p&gt;Nesse curso ensinavam que tabelas são relacionadas entre si através das &lt;em&gt;Foreign Keys&lt;/em&gt; (FK’s). Um ou mais campos na tabela &lt;code&gt;A&lt;/code&gt; deveria ter sua contra-parte na tabela &lt;code&gt;B&lt;/code&gt;, ou seja, os mesmos campos com os mesmos valores.&lt;/p&gt;

&lt;p&gt;Executando um comando no SGBD para criar uma FK entre essas tabelas, você garante que ambas estão relacionadas entre si e que esse vínculo não pode ser quebrado (normalmente) alterando ou excluindo registros em apenas um dos lados.&lt;/p&gt;

&lt;p&gt;E isso não mudou.&lt;/p&gt;

&lt;p&gt;O conceito continua o mesmo e ainda é muito utilizado hoje em dia para manter a integridade dos dados.&lt;/p&gt;

&lt;p&gt;Um campo “chave”, na época que eu estava fazendo o curso, era o Cadastro de Pessoa Física (CPF). Por ser “único”, esse era um dos campos escolhidos quando trabalhávamos com Pessoas Físicas.&lt;/p&gt;

&lt;p&gt;Mas anos atrás era comum uma mulher casada apresentar e utilizar o CPF do marido. Eu não sei quem teve essa ideia idiota, mas o fato é que era &lt;em&gt;aceitável&lt;/em&gt; naqueles dias.&lt;/p&gt;

&lt;p&gt;Então muitos desenvolvedores construíam seu Modelo de Dados com &lt;em&gt;Chaves Estrangeiras Compostas&lt;/em&gt;. Poderia ser o CPF e Data de Nascimento, por exemplo.&lt;/p&gt;

&lt;p&gt;Mas e se marido e mulher nasceram no mesmo dia? Nesse casos a chave composta ficaria duplicada.&lt;/p&gt;

&lt;p&gt;Ah, então a chave será CPF, Data de Nascimento e Nome. É impossível eles terem o mesmo nome. Agora sim, problema resolvido?!&lt;/p&gt;

&lt;p&gt;Bem, a FK poderia estar “correta”, no entanto agora você está &lt;em&gt;duplicando&lt;/em&gt; as informações de 3 campos entre essas tabelas.&lt;/p&gt;

&lt;p&gt;Toda vez que você atualizar o nome, teria que atualizar em ambas as tabelas. Claro, você poderia fazer isso através da FK (ON UPDATE CASCADE) ou através de &lt;em&gt;triggers&lt;/em&gt;, mas o fato é que os dados continuariam duplicados.&lt;/p&gt;

&lt;p&gt;Multiplicando esses mesmos campos em dezenas de tabelas com milhões de dados, é um grande desperdício. Desperdício de armazenamento em disco e de transferencia de dados entre o servidor e a aplicação.&lt;/p&gt;

&lt;p&gt;Então criaram o “conceito” de “Identificador Numérico”.&lt;/p&gt;

&lt;h2 id=&quot;identificador-numerico&quot;&gt;Identificador Numérico&lt;/h2&gt;

&lt;p&gt;Eu não sei se há realmente um conceito ou &lt;em&gt;paper&lt;/em&gt; por trás dessa ideia, muito menos o autor ou autores originais — se você sabe, posta nos comentários por favor.&lt;/p&gt;

&lt;p&gt;Então alguém — ou muitos ao mesmo tempo — pensou que seria mais fácil ter apenas um único campo para representar a FK entre as tabelas.&lt;/p&gt;

&lt;p&gt;Esse tipo de campo é conhecido hoje em dia por todos os desenvolvedores como o Identificador, Identificador Numérico ou apenas ID.&lt;/p&gt;

&lt;p&gt;O ID é um número.&lt;/p&gt;

&lt;p&gt;Um exemplo seria termos uma tabela &lt;code&gt;PEDIDO&lt;/code&gt; e outra &lt;code&gt;PEDIDO_ITENS&lt;/code&gt;. Se eu quero relacionar essas tabelas (1..N, respectivamente) basta fazer uma FK dessa forma:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PEDIDO.id &amp;lt;-&amp;gt; PEDIDO_ITENS.pedido_id&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora a duplicação de valor é de apenas um campo numérico que é bem mais simples e eficaz, ocupando menos espaço em disco, gerando menos transferência de dados rede.&lt;/p&gt;

&lt;p&gt;Frameworks foram e são baseados nesse conceito (RubyOnRails por exemplo).&lt;/p&gt;

&lt;p&gt;Até mesmo alguns &lt;em&gt;Widgets&lt;/em&gt; tinham propriedades do “tipo ID” para identificação de registros na tabela.&lt;/p&gt;

&lt;p&gt;Parecia estar tudo resolvido, até você ter que modelar algo assim:&lt;/p&gt;

&lt;p&gt;Imagine que no seu Modelo de Dados você tem uma tabela para &lt;code&gt;PESSOA_FISICA&lt;/code&gt; e outra de &lt;code&gt;PESSOA_JURIDICA&lt;/code&gt;. São, digamos, os “tipos de clientes” que você tem. São tabelas diferentes porque os campos são bem diferentes.&lt;/p&gt;

&lt;p&gt;Então você tem uma tabela de &lt;code&gt;FATURAS&lt;/code&gt; onde quer concentrar todas as faturas de todos os Clientes.&lt;/p&gt;

&lt;p&gt;Como fazer esse relacionamento?&lt;/p&gt;

&lt;p&gt;Temos algumas opções.&lt;/p&gt;

&lt;h4 id=&quot;ex-1&quot;&gt;1- Tabela FATURAS com 2 campos ID’s&lt;/h4&gt;

&lt;p&gt;A tabela &lt;code&gt;FATURAS&lt;/code&gt; iria ter 2 ID’s (&lt;code&gt;pessoa_fisica_id&lt;/code&gt; e &lt;code&gt;pessoa_juridica_id&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Nesse tipo de &lt;em&gt;design&lt;/em&gt; um dos campos sempre estaria &lt;a href=&quot;/posts/nao-utilize-nil-ou-null/&quot;&gt;NULO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se houver mais “tipos de pessoa”, você teria que ir acrescentando mais e mais campos.&lt;/p&gt;

&lt;p&gt;É um tipo de &lt;em&gt;design&lt;/em&gt; muito deselegante, no &lt;em&gt;mínimo&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;ex-2&quot;&gt;2- Tabela FATURAS com 1 campo ID e 1 campo Tipo&lt;/h4&gt;

&lt;p&gt;Nessa opção a tabela &lt;code&gt;FATURAS&lt;/code&gt; iria ter 2 campos identificadores:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Um campo &lt;code&gt;pessoa_id int&lt;/code&gt; que identifica o valor numérico;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Um campo &lt;code&gt;pessoa_tipo char(1)&lt;/code&gt; que identifica o “tipo de pessoa” (“F” = Física; “J” = Jurídica);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Nesse tipo de &lt;em&gt;design&lt;/em&gt;, você não precisa acrescentar mais campos se 
houverem mais “tipos de pessoa” no futuro. Basta identificar por um 
&lt;code&gt;char&lt;/code&gt; o tipo. Enquanto o campo &lt;code&gt;pessoa_id&lt;/code&gt; iria se relacionar com o 
registros específico da tabela específica do “tipo de pessoa”.&lt;/p&gt;

&lt;p&gt;Mas continua bem deselegante. Eu diria, pior.&lt;/p&gt;

&lt;p&gt;Além disso, a FK é apenas “virtual”, pois você não pode ter um único campo que é relacionado com mais de 1 tabela.&lt;/p&gt;

&lt;h4 id=&quot;ex-3&quot;&gt;3- Tabela FATURAS com FK apenas para PESSOA&lt;/h4&gt;

&lt;p&gt;Uma terceira opção seria refatorar ambas as tabelas de Pessoa, criando uma terceira tabela &lt;code&gt;PESSOA&lt;/code&gt; e fazendo com que as tabelas “herdem” os campos comuns dessa nova tabela.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;              PESSOA ------- FATURAS (pessoa_id)
                ^
        --------|--------
        |               |
  PESSOA_FISICA     PESSOA_JURIDICA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Então, &lt;code&gt;FATURAS&lt;/code&gt; iria ter um campo &lt;code&gt;pessoa_id&lt;/code&gt; somente. Teria uma FK “forte” pois realmente iria estar relacionada com &lt;code&gt;PESSOA&lt;/code&gt; através do campo &lt;code&gt;pessoa_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tudo certo?&lt;/p&gt;

&lt;p&gt;De fato esse &lt;em&gt;design&lt;/em&gt; parece mais &lt;em&gt;limpo&lt;/em&gt;, mas profissional e até mais “Orientado a Objetos”, pois agora temos até o conceito de “herança” em tabelas(!)&lt;/p&gt;

&lt;p&gt;Porém, essa abordagem tem os mesmos problemas do uso da &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;Herança de Classe&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;É difícil de fazer uma hierarquia desde o início, quando os requisitos ainda não estão bem definidos;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Uma Tabela pode ter sido criada com a “herança” errada e agora será difícil refatorar todas as &lt;em&gt;queries&lt;/em&gt; já em produção;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;É mais verboso escrever &lt;em&gt;queries&lt;/em&gt;, visto que agora você sempre terá mais uma tabela &lt;code&gt;PESSOA&lt;/code&gt; para fazer o relacionamento;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A performance tende a cair, visto que haverá mais tabelas envolvidas;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Interessante, porém na prática é ineficiente.&lt;/p&gt;

&lt;h4 id=&quot;ex-4&quot;&gt;4- Novas Tabelas de FATURAS&lt;/h4&gt;

&lt;p&gt;Uma opção mais voltada para “conjuntos de dados” é criamos outras tabelas de Faturas: &lt;code&gt;FATURAS_FISICA&lt;/code&gt; e &lt;code&gt;FATURAS_JURIDICA&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Então, teríamos esses relacionamentos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;PESSOA_FISICA.id &amp;lt;-&amp;gt; FATURAS_FISICA.pessoa_id&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;PESSOA_JURIDICA.id &amp;lt;-&amp;gt; FATURAS_JURIDICA.pessoa_id&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Todas as FK funcionam.&lt;/p&gt;

&lt;p&gt;Não haveria problema de performance, visto que você só iria utilizar as tabelas do mesmo “contexto de dados”.&lt;/p&gt;

&lt;p&gt;O grande problema é que ambas as tabelas são iguais e se houver alguma manutenção relacionado a Faturas, teria que ser feito em ambas as tabelas.&lt;/p&gt;

&lt;p&gt;Se houver mais um “tipo de pessoa” futuramente, teríamos que criar uma nova tabela, o que não é nada bom.&lt;/p&gt;

&lt;h4 id=&quot;ex-5&quot;&gt;5- Combinar as Opções 3 e 4&lt;/h4&gt;

&lt;p&gt;Repare que você pode combinar as Opções #3 e #4.&lt;/p&gt;

&lt;p&gt;Poderia continuar existindo a Tabela &lt;code&gt;FATURAS&lt;/code&gt; que estaria relacionada com as novas Tabelas &lt;code&gt;FATURAS_FISICA&lt;/code&gt; e &lt;code&gt;FATURAS_JURIDICA&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No entanto, essa é uma opção “virtual” que só existe se você utilizar as oções #3 e #4 num mesmo Modelo.&lt;/p&gt;

&lt;h4 id=&quot;sua-escolha-&quot;&gt;Sua escolha é?&lt;/h4&gt;

&lt;p&gt;Pois bem. Considerando os exemplos acima, qual das opções você diria que tem a “melhor” abordagem?&lt;/p&gt;

&lt;p&gt;Pense um pouco sobre isso antes de continuar lendo o artigo — e se você tiver outra opção não mencionada aqui, eu gostaria de ler lá nos comentários, Ok?&lt;/p&gt;

&lt;p&gt;Pense nos prós e contras de cada uma das opções… escolheu?&lt;/p&gt;

&lt;p&gt;Certo.&lt;/p&gt;

&lt;p&gt;Quer saber qual é a minha escolha?&lt;/p&gt;

&lt;p&gt;Tendo eu utilizado todas as opções acima — e variações destas no decorrer de anos — tenho o prazer de lhe dizer que a minha escolha é: &lt;em&gt;Nenhuma das opções acima&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;uuid&quot;&gt;UUID é a Solução&lt;/h2&gt;

&lt;p&gt;E se eu lhe dissesse que podemos unir (quase) tudo de bom das opções acima num único conceito mais simples, com menos tabelas, apenas 1 campo para FK e com performance igual ao uso de um ID numérico?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O uso UUID simplifica o desenvolvimento Orientado a Objetos e também o relacionamento entre as Tabelas do Sistema.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essa é a nova velha opção que a maioria dos desenvolvedores (atuais) não utilizam em seus Modelos de Dados:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Utilizar o UUID como identificador de registros.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Você entenderá agora porque o UUID é tão importante para o desenvolvimento Orientados a Objetos e como ele irá simplificar seu código e &lt;em&gt;excluir&lt;/em&gt; tabelas em seu modelo.&lt;/p&gt;

&lt;p&gt;Vamos continuar com o mesmo exemplo básico acima, mas reescrito para demostrar todo o conceito.&lt;/p&gt;

&lt;p&gt;Com UUID eu consigo implementar o mesmo exemplo dessa forma:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                FATURAS (pessoa_uid)
                   ^
        -----------|-----------
        |                     |
  PESSOA_FISICA (uid)   PESSOA_JURIDICA (uid)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Não há “tipos” e há apenas 1 campo de identificação de registro por tabela. Para todas e quaisquer tabelas, na verdade.&lt;/p&gt;

&lt;p&gt;Como isso é possível?&lt;/p&gt;

&lt;p&gt;Todo UUID é &lt;strong&gt;único&lt;/strong&gt; em toda a base de dados. Não importa a tabela ou contexto no qual o UUID existe. Ele é único.&lt;/p&gt;

&lt;p&gt;Ok, mas como você sabe qual tabela de Pessoa está relacionada com o valor do campo &lt;code&gt;pessoa_uid&lt;/code&gt; na tabela de &lt;code&gt;FATURAS&lt;/code&gt;, na linha 5043?&lt;/p&gt;

&lt;p&gt;Você não sabe.&lt;/p&gt;

&lt;p&gt;E a beleza disso é que você não precisa saber!&lt;/p&gt;

&lt;p&gt;Essa é uma informação &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/#encapsulamento&quot;&gt;encapsulada&lt;/a&gt; no Modelo de Dados.&lt;/p&gt;

&lt;p&gt;Ainda confuso?&lt;/p&gt;

&lt;p&gt;Vou lhe mostrar então como obtemos todas as Faturas somente de Pessoas Físicas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT 
  f.*
FROM FATURAS f
INNER JOIN PESSOA_FISICA p
  ON p.id = f.pessoa_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E de Pessoas Jurídicas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT 
  f.*
FROM FATURAS f
INNER JOIN PESSOA_JURIDICA p
  ON p.id = f.pessoa_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;query&lt;/em&gt; só irá trazer os dados relacionados entre as tabelas no &lt;em&gt;JOIN&lt;/em&gt;, todo o resto será ignorado.&lt;/p&gt;

&lt;p&gt;Nesse modelo os “tipos” são determinados pelas tabelas que fazem parte da &lt;em&gt;query&lt;/em&gt; e não por campos “fantasmas” ou &lt;em&gt;strings&lt;/em&gt; como “F” ou “J”.&lt;/p&gt;

&lt;p&gt;Se houver mais “tipos de clientes” no futuro, nada será alterado nas tabelas já existentes.&lt;/p&gt;

&lt;p&gt;A performance será excelente, visto que haverá poucas tabelas a serem relacionadas.&lt;/p&gt;

&lt;p&gt;Só há uma desvantagem considerável: Não há FK’s reais entre as tabelas, apenas índices. Não seria possível o campo &lt;code&gt;pessoa_uid&lt;/code&gt; de &lt;code&gt;FATURAS&lt;/code&gt; ter uma restrição em mais de uma tabela Pessoa. Mas antes que você comece a “atirar pedras” em mim, dá uma olhada em como o pessoal do NoSQL (muito utilizado hoje em dia) mantém a integridade dos dados, Ok?&lt;/p&gt;

&lt;p&gt;No entanto você poderá utilizar &lt;em&gt;triggers&lt;/em&gt; para manter a integridade dos registros ou não.&lt;/p&gt;

&lt;p&gt;Pensa bem: não atualizamos &lt;code&gt;ID&#39;s&lt;/code&gt; ou &lt;code&gt;UID&#39;s&lt;/code&gt;. O único problema seria deletarmos um registro da &lt;code&gt;PESSOA_FISICA&lt;/code&gt;, por exemplo, sem deletar suas &lt;code&gt;FATURAS&lt;/code&gt;, certo?&lt;/p&gt;

&lt;p&gt;Mas porque você ainda está excluindo registros da sua base de dados?! Registros devem ser preservados como uma linha do tempo. Então, apenas desative-os, sem exclusões, sem problemas.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Não há modelo perfeito. Sempre haverá prós e contras. Mas é importante trabalharmos com Modelos mais próximos da realidade e dos requisitos do Cliente quando utilizamos Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;A utilização do UUID torna isso possível.&lt;/p&gt;

&lt;p&gt;O UUID simplifica o modelo diminuindo a quantidade e relacionamentos de tabelas. E isso facilita a nomenclatura pois haverá menos tabelas a serem nomeadas. Facilita, também, a construção de &lt;em&gt;queries&lt;/em&gt; com mais performance por utilizar menos tabelas.&lt;/p&gt;

&lt;p&gt;O UUID proteje a identificação de registros na web, dificultando a vida de &lt;em&gt;bots&lt;/em&gt; que escaneiam sites fazendo requisições &lt;em&gt;GET/POST&lt;/em&gt; apenas incrementando o ID inicial.&lt;/p&gt;

&lt;p&gt;Enfim, o UUID não é perfeito, mas é a solução mais &lt;em&gt;eficaz&lt;/em&gt;, na minha opinião, para construírmos sistemas mais &lt;em&gt;simples&lt;/em&gt; e &lt;em&gt;robustos&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Mar 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/identificador-unico-universal/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/identificador-unico-universal/</guid>
      </item>
    
      <item>
        <title>Stored Procedures na Orientação a Objetos</title>
        <description>&lt;p&gt;Stored Procedures são sub-rotinas armazenadas no SGBD disponíveis às aplicações que o acessam.&lt;/p&gt;

&lt;p&gt;Será que as Stored Procedures ainda são necessárias ou a Orientação a Objetos é suficiente e podemos jogar fora essa &lt;em&gt;antiga tecnologia&lt;/em&gt;?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-clem-onojeghuo-143740.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Todo SGBD disponibiliza &lt;em&gt;Stored Procedures&lt;/em&gt; (SP’s) para o DBA e desenvolvedores construirem e executarem scripts SQL.&lt;/p&gt;

&lt;p&gt;As SP’s podem retornar um cursor de dados, atualizar registros, executar rotinas de manutenção do SGBD, etc.&lt;/p&gt;

&lt;p&gt;As SP’s também podem conter estruturas de controle e repetição como &lt;code&gt;IF&lt;/code&gt;, &lt;code&gt;WHILE&lt;/code&gt;, &lt;code&gt;LOOP&lt;/code&gt;, &lt;code&gt;REPEAT&lt;/code&gt;, &lt;code&gt;FOR&lt;/code&gt;, &lt;code&gt;CASE&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;No entanto as SP’s nos fazem lembrar de &lt;em&gt;procedimentos&lt;/em&gt;, programas imperativos e sequenciais. E é exatamente essa &lt;a href=&quot;/posts/pensando-em-dados/&quot;&gt;visão&lt;/a&gt; que não queremos ter quando programamos utilizando o paradigma da Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;Então podemos declarar a &lt;em&gt;morte&lt;/em&gt; das SP’s e utilizar apenas a Orientação a Objetos a partir de agora?&lt;/p&gt;

&lt;p&gt;Definitivamente, não.&lt;/p&gt;

&lt;h2 id=&quot;ferramenta-de-dados&quot;&gt;Ferramenta de Dados&lt;/h2&gt;

&lt;p&gt;As &lt;em&gt;Stored Procedures&lt;/em&gt; são ferramentas para trabalhar com &lt;em&gt;dados&lt;/em&gt;. Elas conseguem ter uma melhor performance do que qualquer outra linguagem fora do SGBD no qual ela reside.&lt;/p&gt;

&lt;p&gt;Só isso já seria um argumento suficiente para continuarmos a utilizar SP’s em nossos sistemas.&lt;/p&gt;

&lt;p&gt;Mas nem todos pensam assim.&lt;/p&gt;

&lt;p&gt;Tenho alguns amigos desenvolvedores que abandonaram completamente as SP’s, codificando seus sistemas &lt;em&gt;apenas&lt;/em&gt; utilizando alguma linguagem de programação com suporte a Orientação a Objetos.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
Stored Procedures podem  reduzir o tráfego na rede, visto que os comandos são executados diretamente no servidor. Além de melhorar a performance, criar mecanismos de segurança entre a manipulação dos dados do Banco de Dados. 
  &lt;/p&gt;
  &lt;footer&gt;&lt;cite title=&quot;Wikipedia&quot;&gt;— Wikipedia&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;No entanto, esses desenvolvedores esquecem que cada ferramenta é focada em resolver determinados problemas.&lt;/p&gt;

&lt;p&gt;O foco das Stored Procedures são os dados. Na manipulação dos dados e assuntos relacionados ao Banco de Dados.&lt;/p&gt;

&lt;p&gt;O foco da Orientação a Objetos são os &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;Objetos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;São contextos completamente diferentes.&lt;/p&gt;

&lt;p&gt;Então por que usaríamos uma ferramenta &lt;em&gt;pior&lt;/em&gt; ou menos eficaz para a manipulação de dados?&lt;/p&gt;

&lt;h2 id=&quot;regras-de-negocio&quot;&gt;Regras de Negócio&lt;/h2&gt;

&lt;p&gt;Meus amigos afirmam que as &lt;em&gt;Regras de Negócio&lt;/em&gt; não devem ser codificadas em (Argh!) procedimentos!&lt;/p&gt;

&lt;p&gt;Utilizamos uma linguagem de auto nível com suporte a &lt;a href=&quot;/posts/objetos-pensam-e-tomam-decisoes/&quot;&gt;Objetos inteligentes&lt;/a&gt;, &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/#encapsulamento&quot;&gt;encapsulamento&lt;/a&gt;, polimorfismo… não queremos trabalhar com algo tão &lt;a href=&quot;/posts/tipos-primitivos-nos-argumentos/&quot;&gt;primitivo&lt;/a&gt; — eles dizem.&lt;/p&gt;

&lt;p&gt;E eu concordo com eles.&lt;/p&gt;

&lt;p&gt;Em aplicações Orientadas a Objetos, as Regras de Negócio devem estar codificadas em Classes.&lt;/p&gt;

&lt;p&gt;Utilizamos as Classes e Objetos para &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;representar&lt;/a&gt; as entidades que irão interagir entre si.&lt;/p&gt;

&lt;p&gt;Os Dados, no entanto, não interagem entre si. São &lt;em&gt;passivos&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Os Dados precisam que algum &lt;em&gt;procedimento&lt;/em&gt; ou &lt;em&gt;Objeto&lt;/em&gt; que os anime.&lt;/p&gt;

&lt;p&gt;Os Objetos podem e devem &lt;a href=&quot;/posts/classes-de-dados/&quot;&gt;trabalhar com dados&lt;/a&gt;, mas a manipulação dos &lt;em&gt;dados em massa&lt;/em&gt; é trabalho para Stored Procedures; são imbatíveis.&lt;/p&gt;

&lt;p&gt;A combinação entre Objetos e Stored Procedures é a chave para um sistema Orientado a Objetos com ótima manutenabilidade mas, também, com ótima performance na manipulação dos dados.&lt;/p&gt;

&lt;h2 id=&quot;scripts-dinamicos&quot;&gt;Scripts dinâmicos&lt;/h2&gt;

&lt;p&gt;Outro equívoco é pensar que somos obrigados a criar Scripts SQL no código da aplicação porque somente assim conseguiremos fazer filtros otimizados, combinando as informações que os usuários desejam para construir o melhor e mais otimizado SQL.&lt;/p&gt;

&lt;p&gt;Em parte isso faz sentido, mas na maioria das vezes é apenas falta de conhecimento do SGBD em uso.&lt;/p&gt;

&lt;p&gt;Alguns SGBD’s como o Microsoft SQL Server, por exemplo, podem receber argumentos XML. Esses argumentos podem ser lidos e utilizados como filtros dinâmicos nas SP’s.&lt;/p&gt;

&lt;p&gt;Isso é muito melhor que ter “pedaços” de código SQL espalhados no código para concatenar de acordo com os filtros que os usuários desejam.&lt;/p&gt;

&lt;p&gt;Alguns desenvolvedores poderão afirmar que utilizam algum framework ORM que tem embutido uma pseudo-linguagem que simula o SQL, mas utilizando Objetos. Assim eles não teríam SQL espalhado pelo código.&lt;/p&gt;

&lt;p&gt;O conceito de ORM na Orientação a Objetos é errado. Mas esse assunto foge do escopo desse artigo. No entanto, se você utiliza um ORM para fazer &lt;em&gt;queries&lt;/em&gt; dinâmicas eu posso lhe afirmar o seguinte: Você pode até tentar, mas nunca fará queries mais performáticas e/ou com o código mais simples do que utilizando SQL puro.&lt;/p&gt;

&lt;p&gt;Não estou falando sobre Objetos que retornam pequenas listas de objetos-filhos utilizando a pseudo-linguagem do ORM. Estou falando sobre &lt;em&gt;queries&lt;/em&gt; de 5 páginas ou mais de script que trazem dados para relatórios pesados em aplicações reais. Tentar reproduzir um script dessa magnitude utilizando Objetos é, no mínimo, ingenuidade…&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;As &lt;em&gt;Stored Procedures&lt;/em&gt; continuaram a existir, enquanto houverem SGBD’s relacionais.&lt;/p&gt;

&lt;p&gt;Continuaram a existir enquanto não inventarem algo com mais performance.&lt;/p&gt;

&lt;p&gt;Utilizar &lt;em&gt;Stored Procedures&lt;/em&gt; não torna seu software &lt;em&gt;menos&lt;/em&gt; Orientado a Objetos, se você as utiliza apenas para a manipulação de dados e não para as Regras de Negócio.&lt;/p&gt;

&lt;p&gt;Utilize a ferramenta certa para cada tipo de problema.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Mar 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/stored-procedures-na-orientacao-a-objetos/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/stored-procedures-na-orientacao-a-objetos/</guid>
      </item>
    
      <item>
        <title>Como Utilizar Herança Apropriadamente</title>
        <description>&lt;p&gt;Sempre favoreça a Composição de Objetos ao invés de Herança de Classe, mas se você ainda quiser ou precisar utilizar a Herança, sabia como utilizá-la apropriadamente.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-joanna-kosinska-37665.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Eu já escrevi uma &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;série de 5 partes&lt;/a&gt; aqui no blog sobre como a Herança pode ser o mal da Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;Meu entendimento sobre esse assunto continua o mesmo: Herança de Classe deve ser &lt;em&gt;evitada&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Então qual o motivo para escrever artigo?&lt;/p&gt;

&lt;p&gt;A Herança de Classe é uma ferramenta e, como tal, está disponível para ser utilizada. Se você conseguir fazer isso apropriadamente, poderia obter algum benefício prático e, ao mesmo tempo, minimizar os &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/#os-males&quot;&gt;males&lt;/a&gt; que a Herança de Classe traz consigo.&lt;/p&gt;

&lt;p&gt;Então compilei algumas &lt;em&gt;regras&lt;/em&gt; que, na minha opinião, são essenciais para o bom uso da Herança de Classe.&lt;/p&gt;

&lt;h2 id=&quot;reaproveitamento-de-codigo&quot;&gt;1-Não utilize Herança (apenas) para Reaproveitamento de Código&lt;/h2&gt;

&lt;p&gt;A maioria dos desenvolvedores utilizam Herança pensando em Reaproveitamento de Código. Esse é o início de todos os outros problemas relacionados à Herança de Classe.&lt;/p&gt;

&lt;p&gt;Herança de Classe não foi projetada para Reaproveitamento de Código — isso é apenas um &lt;em&gt;efeito colateral&lt;/em&gt; — mas sim para construir hierarquias do tipo &lt;strong&gt;é-um&lt;/strong&gt;. Um gato &lt;em&gt;é um&lt;/em&gt; animal; cachorro &lt;em&gt;é um&lt;/em&gt; mamífero; tubarão &lt;em&gt;é um&lt;/em&gt; peixe; etc.&lt;/p&gt;

&lt;p&gt;Assim como os ciêntistas classificam um animal apenas colocando-o numa hierarquia &lt;em&gt;não&lt;/em&gt; baseada no seu comportamento, mas sim nas suas características físicas, na Orientação a Objetos isso também pode ser feito utilizando Interfaces com um mínimo de esforço na manutenção do código. Por exemplo, se um animal fosse retirado ou movido para outro ponto na hierarquia, bastaria retirar ou reescrever apenas algumas assinaturas de métodos.&lt;/p&gt;

&lt;p&gt;O problema está nas Classes. Especialmente naquelas Classes abstratas e/ou métodos abstratos que são codificadas apenas para servirem como “ponto de execução” que serão sobrescritos em Subclasses.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quando você estiver projetando seu sistema, é o Domínio que irá sugerir quais Classes deverão ser implementadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Se o software que você está desenvolvendo é sobre venda de Carros e Motos, não pense em codificar uma Classe &lt;code&gt;TAbstractVehicle&lt;/code&gt; para compartilhar código entre &lt;code&gt;TCar&lt;/code&gt; e &lt;code&gt;TMotorcycle&lt;/code&gt;. Se essa abstração não existe no Domínio, você não deveria criá-la.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/5187bdb34667bddbcfd13553b45c726b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas se no Domínio já existir o conceito de hierarquia como, por exemplo, &lt;em&gt;Carro Alemão&lt;/em&gt;, &lt;em&gt;Carro Francês&lt;/em&gt; e &lt;em&gt;Carro Americano&lt;/em&gt;, então talvez você possa definir uma Hierarquia de Classes onde os carros da marca BMW e Audi &lt;strong&gt;é-um&lt;/strong&gt; &lt;em&gt;Carro Alemão&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Não porque você &lt;em&gt;precisa&lt;/em&gt; compartilhar código, mas sim porque seu Domínio &lt;em&gt;exige&lt;/em&gt; que assim seja, por algum motivo.&lt;/p&gt;

&lt;p&gt;Então, antes de implementar alguma hierarquia, verifique se está de acordo com o seu Domínio.&lt;/p&gt;

&lt;h2 id=&quot;classes-de-suporte&quot;&gt;2-Classes de Domínio não podem Herdar de Classes de Suporte&lt;/h2&gt;

&lt;p&gt;Um dos grandes erros que você desenvolvedor pode cometer é herdar suas &lt;em&gt;Classes de Domínio&lt;/em&gt; de &lt;em&gt;Classes de Suporte&lt;/em&gt;. Estou utilizando essa nomenclatura (Suporte) para todas as Classes &lt;em&gt;built-in&lt;/em&gt;, ou seja, Classes disponíveis nas &lt;em&gt;libs&lt;/em&gt; do Compilador (VCL/LCL ou RTL) ou mesmo &lt;em&gt;libs&lt;/em&gt; de terceiros.&lt;/p&gt;

&lt;p&gt;Se o Domínio lhe diz que é necessário uma “Lista de Veículos”, por exemplo, o que fazem a maioria dos desenvolvedores?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Procuram uma Classe de Suporte que implementa uma Lista para poderem utilizar herança ou ;&lt;/li&gt;
  &lt;li&gt;Procuram uma Classe de Suporte que implementa uma Lista utilizando &lt;em&gt;Generics&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A segunda opção parece ser a mais “sofisticada” hoje em dia — todos amam &lt;em&gt;generics&lt;/em&gt;, não é? — mas lhe digo que ambas as opções estão erradas.&lt;/p&gt;

&lt;p&gt;Uma “Lista de Veículos” &lt;em&gt;é-um&lt;/em&gt; &lt;code&gt;TList&lt;/code&gt;, &lt;code&gt;TStringList&lt;/code&gt;, &lt;code&gt;TInterfaceList&lt;/code&gt; ou &lt;code&gt;sua-classe-de-lista-preferida-aqui&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Não necessariamente.&lt;/p&gt;

&lt;p&gt;As Classes do Domínio não podem ser “contaminadas” pelas Classes de Suporte através da Herança de Classe.&lt;/p&gt;

&lt;p&gt;As Classes de Suporte devem ser utilizadas na Composição de Objetos. Em outras palavras, você implementa sua &lt;code&gt;TVehicleList&lt;/code&gt; e, internamente, utiliza alguma Classe de Suporte que implementa o conceito de lista — nem é necessário o uso de &lt;em&gt;Generics&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/8a07a099674e2f0c7b790ed3bb921564.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Seu Domínio não pode depender de implementações de Classes de Suporte de outras &lt;em&gt;libs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Então, não utilize Herança a partir de Classes de Suporte.&lt;/p&gt;

&lt;h2 id=&quot;dominios-distintos&quot;&gt;3-Não pode haver Herança de Classes entre Domínios distintos&lt;/h2&gt;

&lt;p&gt;Suas Classes de Domínio e Classes de Suporte pertencem a Domínios ou &lt;a href=&quot;/posts/delegacao-de-implementacao-de-interfaces/#contextos&quot;&gt;Contextos&lt;/a&gt; distintos. Somente isso já seria um forte motivo para não utilizar herança entre essas Classes.&lt;/p&gt;

&lt;p&gt;A explicação é simples: Um objeto (A) não é, necessariamente, do mesmo &lt;em&gt;tipo&lt;/em&gt; que um objeto (B) apenas porque eles são &lt;em&gt;similares&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Um cachorro é similar a um lobo — pelo menos pra mim — no entanto podemos afirmar que ambos descendem de uma única Classe? Caso a resposta seja sim, alterar qualquer coisa nessa Classe Ancestral iria alterar o comportamento de duas criaturas que são similares na &lt;em&gt;aparência&lt;/em&gt; porém bem diferentes, em muitos aspectos, no &lt;em&gt;comportamento&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Veja um exemplo sobre duas unidades (Financeiro e Jurídico) onde há uma herança entre dois Domínios completamente distintos:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/79db85b3bd9637c2d354a8ad8008b3a3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Domínios e Contextos distintos podem e devem evoluir independentemente.&lt;/p&gt;

&lt;p&gt;Então, não utilize Herança entre Domínios distintos. Se deseja reutilização de Código é melhor utilizar Composição de Objetos ao invés de Herança de Classe.&lt;/p&gt;

&lt;h2 id=&quot;metodos-protegidos&quot;&gt;4-Não utilize Atributos ou Métodos Protegidos Apenas para Uso em Subclasses&lt;/h2&gt;

&lt;p&gt;Uma das “vantagens” da Herança de Classe é implementarmos Atributos e Métodos protegidos — muitas vezes eles são abstratos — para serem utilizados ou sobrescritos nas Subclasses.&lt;/p&gt;

&lt;p&gt;Não faça isso.&lt;/p&gt;

&lt;p&gt;É o mesmo que programar procedural, mas utilizando Classes.&lt;/p&gt;

&lt;p&gt;Se você codifica uma Classe abstrata apenas para codificar atributos (variáveis globais?) e métodos abstratos (“pontos de execução”?) para Subclasses é o mesmo que criar Procedimentos que tem outros  Procedimentos (ponteiros) como argumentos. Isso não é Orientação a Objetos.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/f891e60140694c267dcb79bcdb91f3ba.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As Classes devem ser &lt;em&gt;sólidas&lt;/em&gt;. A implementação delas não deve estar “fatiada” entre outras “Classes” (procedimentos?).&lt;/p&gt;

&lt;p&gt;A Herança de Classe faz isso, ou seja, divide o comportamento em várias Classes. Porém, se a Herança for bem feita, uma Classe Ancestral terá comportamento independentemente se há ou não Subclasses para implementar ou sobrescrever quaisquer metódos.&lt;/p&gt;

&lt;p&gt;Então, não implemente Classes que dependam de Subclasses para ter algum comportamento útil.&lt;/p&gt;

&lt;h2 id=&quot;sempre-adicione&quot;&gt;5-Sempre Adicione, nunca Altere ou Remova Funcionalidades&lt;/h2&gt;

&lt;p&gt;Se você costuma sobrescrever Métodos de Classes ancestrais para “desativá-los” (removendo a implementação) ou não chama a execução do Método Ancestral (herdado) &lt;em&gt;antes&lt;/em&gt; ou &lt;em&gt;depois&lt;/em&gt; de adicionar comportamento, é bem provável que sua hierarquia de Classes está &lt;em&gt;errada&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se sua Subclasse deveria ter um comportamento diferente da Classe Ancestral, a ponto de você querer reimplementar todo o Método ou desativá-lo, então esse comportamento não deveria estar na Classe Ancestral ou a Herança entre essas Classes não deveria existir.&lt;/p&gt;

&lt;p&gt;Com a Herança de Classe você quer herdar todos os contratos (Interfaces) que a Classe implementa assim como todo o seu comportamento. Não faz sentido, então, querer eliminar ou refazer alguma coisa. É um desperdício.&lt;/p&gt;

&lt;p&gt;Um pato pode ter duas pernas, porém ele não &lt;em&gt;corre&lt;/em&gt; como um ser humano. Não faz sentido ambos terem uma Classe em comum apenas para reaproveitar 2 pernas, mas mudar o comportamento quando ambos estão correndo.&lt;/p&gt;

&lt;p&gt;Talvez um exemplo mais comum facilite o entendimento.&lt;/p&gt;

&lt;p&gt;Imagine uma Classe de Log que salva as informações num arquivo em disco. Tudo funciona.&lt;/p&gt;

&lt;p&gt;Então você precisa de um Log que irá salvar as informações no Banco de Dados. Qual o caminho mais simples? Herança… mas não faça isso.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/f0607cff28ed603367e9fc63a7053c19.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Então, pense na Hierarquia de Classes para determinar tipos em comum, não comportamento em comum.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A Orientação a Objetos implementa o conceito de Composição de Objetos que é o suficiente para implementar Objetos simples, sólidos e que implementam apenas uma única &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;responsabilidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mas ela também nos dá outra ferramenta: A Herança de Classe.&lt;/p&gt;

&lt;p&gt;Você pode ter uma melhor arquitura substituindo Herança por &lt;a href=&quot;/posts/decorator-pattern/&quot;&gt;Decoradores&lt;/a&gt;, com a única desvantagem de escrever mais.&lt;/p&gt;

&lt;p&gt;Vale a pena? Depende.&lt;/p&gt;

&lt;p&gt;Pode ter casos que a Herança facilita ou até mesmo é necessária? Talvez.&lt;/p&gt;

&lt;p&gt;Resumindo: A melhor ferramenta vai depender do tipo de trabalho a ser feito.&lt;/p&gt;

&lt;p&gt;No meu carro, os problemas do dia-a-dia eu resolvo com um par de chaves-de-fenda, um alicate, Silver-tape e WD. Mas tem problemas que só podem ser resolvidos com ferramentas espefícias. Entende?&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/como-utilizar-heranca-apropriadamente/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/como-utilizar-heranca-apropriadamente/</guid>
      </item>
    
      <item>
        <title>Classes de Exceção</title>
        <description>&lt;p&gt;Devemos codificar uma Classe para cada tipo de Exceção ou utilizar apenas um único tipo?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-hans-eiskonen-136904.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;O conceito de Exceção foi criado para simplificar o código, removendo condicionais e verificações, para que o programador fique focado na lógica que o programa deve fazer ao invés de se preocupar em testar cada linha do código.&lt;/p&gt;

&lt;p&gt;A idéia principal é fazer com que todos os possíveis erros (exceções) sejam concentrados e verificados num ponto em comum.&lt;/p&gt;

&lt;p&gt;Esse ponto em comum pode ser único para todo o sistema, mas também pode ser um ponto em comum por Módulo, por &lt;em&gt;Unit&lt;/em&gt;, por Classe. Depende. Mas isso é um assunto para outro artigo.&lt;/p&gt;

&lt;p&gt;Nesse artigo o foco é outro. Vamos ter uma conversa se devemos criar ou não novos tipos de exceção para cada tipo de erro ou problema.&lt;/p&gt;

&lt;h2 id=&quot;classes-de-excecao&quot;&gt;Classes de Exceção&lt;/h2&gt;

&lt;p&gt;Divisão por zero. Erro na leitura de um &lt;em&gt;stream&lt;/em&gt;. Erro de banco de dados…&lt;/p&gt;

&lt;p&gt;Temos Classes de Exceção definida para cada um desses erros. Em qualquer linguagem é assim.&lt;/p&gt;

&lt;p&gt;Por quê?&lt;/p&gt;

&lt;p&gt;Não é para tomada de decisões, com certeza. Você não deve mudar o fluxo de um programa de acordo com a exceção gerada. Todas as exceções tem um único objetivo: parar o fluxo normal do programa.&lt;/p&gt;

&lt;p&gt;Para o usuário não importa o Tipo da Classe, mas sim a &lt;strong&gt;mensagem&lt;/strong&gt; que é exibida quando um erro ocorre.&lt;/p&gt;

&lt;p&gt;Uma exceção define um ponto de ruptura no fluxo do código. A execução normal é interrompida e o fluxo vai para o ponto de tratamento das exceções.&lt;/p&gt;

&lt;p&gt;Então não haveria necessidade de criar novos tipos de Classes.
Basta informar ao usuário o que ocorreu. A mensagem.&lt;/p&gt;

&lt;p&gt;No entanto… eu vejo um motivo para criar novos Tipos de Exceções: &lt;a href=&quot;/posts/codigo-duplicado-talvez-nao/&quot;&gt;Reaproveitamento&lt;/a&gt; de código.&lt;/p&gt;

&lt;p&gt;Por exemplo, se um arquivo não é encontrado poderíamos gerar uma exceção do tipo &lt;code&gt;Exception&lt;/code&gt; — a exceção mais genérica — ou criar uma nova Classe &lt;code&gt;EFileNotFound&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para dar a informação ao usuário, as duas exceções abaixo são equivalentes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;raise Exception.CreateFmt(&#39;File %s not found&#39;, [&#39;foo.txt&#39;]);

raise EFileNotFound.Create(&#39;foo.txt&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A diferença é que &lt;code&gt;EFileNotFound&lt;/code&gt; já encapsula a mensagem &lt;em&gt;“File %s not found”&lt;/em&gt; e não precisamos repetir a mesma mensagem toda vez que quisermos dizer ao usuário que um arquivo não foi encontrado.&lt;/p&gt;

&lt;p&gt;Assim fica fácil mudar a mensagem num único ponto no código.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Não utilize Tipos de Classes de Exceção para controlar o fluxo do programa. Isso é errado.&lt;/p&gt;

&lt;p&gt;Toda Exceção &lt;em&gt;deve&lt;/em&gt; definir um ponto de ruptura. Algo de muito errado aconteceu. Para tudo. Não importa o Tipo de Classe.&lt;/p&gt;

&lt;p&gt;Para o usuário apenas a mensagem importa. Basta ser bem explicativa.&lt;/p&gt;

&lt;p&gt;Devemos criar novas Classe de Exceção apenas para reaproveitar e encapsular informações.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/classes-de-excecao/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/classes-de-excecao/</guid>
      </item>
    
      <item>
        <title>Constantes Públicas</title>
        <description>&lt;p&gt;Quantas vezes você precisou instanciar uma Classe mas não sabia, com exatidão, o valor a passar em algum argumento do construtor? Essa dúvida quase sempre acontece com argumentos do tipo &lt;em&gt;String&lt;/em&gt; e a maioria das API’s disponibilizam constantes para serem utilizados nos argumentos.&lt;/p&gt;

&lt;p&gt;Bem, Constantes Públicas não deveriam ser utilizadas em projetos Orientados a Objetos.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-ty8v7jjcgvg-pierre-bouillot.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Em linguagens puramente procedurais como &lt;code&gt;C&lt;/code&gt;, por exemplo, constantes são normalmente utilizadas. Não há nada de errado com isso.&lt;/p&gt;

&lt;p&gt;No entanto, em projetos Orientados a Objetos, não há sentido em continuarmos utilizando o pensamento procedural de &lt;code&gt;C&lt;/code&gt;, ou seja, disponibilizando &lt;em&gt;Constantes Públicas&lt;/em&gt; para serem utilizadas como argumentos de Métodos e &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;Construtores&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;constantes-publicas&quot;&gt;Constantes Públicas&lt;/h2&gt;

&lt;p&gt;Eu já expliquei nesse &lt;a href=&quot;/posts/tipos-primitivos-nos-argumentos/&quot;&gt;artigo&lt;/a&gt; que utilizar tipos primitivos em argumentos não é uma boa ideia na maioria dos casos. O problema é agravado quando utilizamos argumentos do tipo &lt;em&gt;String&lt;/em&gt;, pois o valor pode ser qualquer sequência de caracteres.&lt;/p&gt;

&lt;p&gt;Vejamos um exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var
  S: IString;
begin
  S := TStringBuilder.New(
    TFile.New(&#39;foo.txt&#39;).Stream,
    &#39;UTF-8&#39;
  );
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As Classes acima não fazem parte da RTL, são apenas exemplos.&lt;/p&gt;

&lt;p&gt;Vejamos. Uma Classe &lt;code&gt;TStringBuilder&lt;/code&gt; recebe dois argumentos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Um &lt;em&gt;Stream&lt;/em&gt; de dados;&lt;/li&gt;
  &lt;li&gt;Uma &lt;em&gt;String&lt;/em&gt; que corresponde ao &lt;em&gt;encoding&lt;/em&gt; que será utilizado.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Quais as chances do programador passar um argumento inválido no segundo parâmetro? Ele poderia escrever assim &lt;code&gt;UTF-8&lt;/code&gt;, assim &lt;code&gt;UTF8&lt;/code&gt;, assim &lt;code&gt;utf-8&lt;/code&gt;, assim &lt;code&gt;utf8&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;Para não haver erros de digitação, os programadores de API’s disponibilizam Constantes Públicas, exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var
  S: IString;
begin
  S := TStringBuilder.New(
    TFile.New(&#39;foo.txt&#39;).Stream,
    UTF8_ENCODING
  );
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, agora tá “perfeito”. Não haverá erro de digitação, pois não é mais uma &lt;em&gt;String&lt;/em&gt;, mas sim uma Constante que o compilador pode checar.&lt;/p&gt;

&lt;p&gt;O problema, no entanto, é que o &lt;a href=&quot;/posts/tipos-primitivos-nos-argumentos/#argumento&quot;&gt;argumento&lt;/a&gt; continua sendo do tipo &lt;em&gt;String&lt;/em&gt; e mesmo o &lt;em&gt;code-completion&lt;/em&gt; não pode ajudá-lo para lhe mostrar onde está a Constante (se existir!) para utilizá-la no argumento.&lt;/p&gt;

&lt;p&gt;O que fazer?&lt;/p&gt;

&lt;h2 id=&quot;objetos&quot;&gt;Objetos&lt;/h2&gt;

&lt;p&gt;Se você quer representar um &lt;code&gt;UTF8String&lt;/code&gt; por quê não criar uma Classe que instancia um Objeto que representa exatamente o que você precisa?&lt;/p&gt;

&lt;p&gt;Vamos refatorar o código:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var
  S: IString;
begin
  S := TUTF8String.New(
    TFile.New(&#39;foo.txt&#39;).Stream
  );
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Muito mais &lt;a href=&quot;/posts/menos-e-mais/&quot;&gt;simples&lt;/a&gt; e direto, não acha?&lt;/p&gt;

&lt;p&gt;Então você pensa: “Mas eu terei uma Classe para cada tipo de &lt;em&gt;encoding&lt;/em&gt; no meu código?”&lt;/p&gt;

&lt;p&gt;Sim! Mas não pense que você terá duplicação de código por causa disso.&lt;/p&gt;

&lt;h2 id=&quot;reutilizando&quot;&gt;Reutilizando&lt;/h2&gt;

&lt;p&gt;Sabemos que já existem muitas funções para trabalhar com &lt;em&gt;encoding&lt;/em&gt; de &lt;em&gt;String&lt;/em&gt; em qualquer linguagem. Mas aqui trabalhamos com Objetos, então… criamos Objetos.&lt;/p&gt;

&lt;p&gt;No entanto, não queremos “reinventar a roda”. Precisamos reutilizar as funções já existentes, sejam funções &lt;em&gt;built-in&lt;/em&gt; ou de alguma &lt;em&gt;lib&lt;/em&gt; de terceiros. Não importa.&lt;/p&gt;

&lt;p&gt;No seu código Orientado a Objetos você não deve expor esses &lt;em&gt;detalhes tecnológicos&lt;/em&gt; para seu &lt;em&gt;domínio&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Então, como fazer?&lt;/p&gt;

&lt;p&gt;Na sua &lt;em&gt;Unit&lt;/em&gt;, você irá implementar uma Classe Privada. Essa Classe irá receber sim, um argumento do tipo &lt;em&gt;String&lt;/em&gt;. Mas não há problema, pois a Classe é privada à &lt;em&gt;Unit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Essa Classe teria uma implementação assim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type
  TEncodedString = class(TInterfacedObject, IString)
  private
    FEncoding: string;
  public
    constructor Create(
      Stream: IDataStream; 
      const Encoding: string
    );
    class function New(
      Stream: IDataStream; 
      const Encoding: string
    ): IString;
    function Value: string;
    // more methods...
  end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cada Classe especialista, como a &lt;code&gt;TUTF8String&lt;/code&gt; por exemplo irá delegar para a &lt;code&gt;TEncodedString&lt;/code&gt; a construção da &lt;em&gt;String&lt;/em&gt; de retorno.&lt;/p&gt;

&lt;p&gt;O argumento &lt;code&gt;Encoding&lt;/code&gt; poderá ser uma &lt;em&gt;String&lt;/em&gt; pura ou uma &lt;strong&gt;Constante Privada&lt;/strong&gt; — seja uma Constante privada da Classe ou da &lt;em&gt;Unit&lt;/em&gt;, não importa.&lt;/p&gt;

&lt;p&gt;Então, considerando que &lt;code&gt;IString&lt;/code&gt; tem o método &lt;code&gt;function Value: string&lt;/code&gt;, a implementação desse método em &lt;code&gt;TUTF8String&lt;/code&gt; seria algo assim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function TUTF8String.Value: string;
begin
  Result := 
    TEncodedString.New(
      FStream, &#39;UTF-8&#39;
    ).Value
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nesse exemplo vemos que &lt;code&gt;TUTF8String&lt;/code&gt; está delegando o trabalho para &lt;code&gt;TEncodedString&lt;/code&gt; passando sua instância de &lt;code&gt;FStream&lt;/code&gt; e o &lt;em&gt;encoding&lt;/em&gt; alvo.&lt;/p&gt;

&lt;p&gt;Mas para todo o sistema, &lt;code&gt;TEncodedString&lt;/code&gt; não existe.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Constantes Públicas não devem ser utilizadas na programação Orientada a Objetos pelas razões explicadas acima. Porém, devido a questões tecnológicas e detalhes de implementação, as Constantes Privadas ainda são úteis, mas não essenciais.&lt;/p&gt;

&lt;p&gt;Ao invés de tentar deixar uma Classe mais genérica possível, com inúmeras possibilidades de parametrização por constantes, divida-a em várias Classes &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;especialistas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/constantes-publicas/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/constantes-publicas/</guid>
      </item>
    
      <item>
        <title>Scripts para Compilar FreePascal e Lazarus no Windows</title>
        <description>&lt;p&gt;Saiba como compilar uma nova versão do compilador FreePascal ou atualizar a IDE Lazarus utilizando diretamente o código fonte.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-v0zxmzw_-e0-john-mark-kuznietsov.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;A maneira mais fácil de começar a utilizar o FreePascal e Lazarus não é tentando compilar o compilador ou a IDE utilizando Scripts.&lt;/p&gt;

&lt;p&gt;Hoje em dia temos algumas opções de instalação:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://freepascal.org/download.var&quot;&gt;FPC Oficial&lt;/a&gt; ➝ apenas o compilador&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lazarus-ide.org/&quot;&gt;Lazarus Oficial&lt;/a&gt; ➝ FPC + IDE&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getlazarus.org/setup/?download&quot;&gt;GetLazarus&lt;/a&gt; ➝ FPC+Lazarus (versão modificada)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://newpascal.org/download.html&quot;&gt;NewPascal&lt;/a&gt; ➝ FPC+Lazarus (versão modificada)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pilotlogic.com/&quot;&gt;CodeTyphon&lt;/a&gt; ➝ versão ultra-modificada&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Caso você queira se aventurar em outra IDE que não é compatível com o Delphi mas é multiplataforma — todos os &lt;em&gt;widgets&lt;/em&gt; tem a mesma aparência em qualque Sistema Operacional — você pode tentar a IDE &lt;a href=&quot;http://www.msegui.com/&quot;&gt;MSE+GUI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você só “ouviu falar” de Lazarus e não sabia que existiam tantas opções para programar em &lt;em&gt;Object Pascal&lt;/em&gt; bem, deve ter sido uma boa surpresa, não?&lt;/p&gt;

&lt;h2 id=&quot;porque-utilizar-scripts&quot;&gt;Por que utilizar Scripts&lt;/h2&gt;

&lt;p&gt;Se existem tantas opções de instaladores automatizados, por quê precisamos de scripts para compilação manual?&lt;/p&gt;

&lt;p&gt;Há aqueles programadores que querem ter o controle total de seu compilador e IDE.&lt;/p&gt;

&lt;p&gt;Há aqueles que modificam o compilador, FCL ou RTL.&lt;/p&gt;

&lt;p&gt;Há aqueles que modificam a IDE, a LCL, os componentes e as ferramentas.&lt;/p&gt;

&lt;p&gt;Há aqueles que ajudam a comunidade FreePascal. Baixam as últimas versões do código fonte, compilam, testam e mandam &lt;em&gt;feedback&lt;/em&gt; através do &lt;a href=&quot;http://bugs.freepascal.org/main_page.php&quot;&gt;Mantis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você é um desses, você &lt;strong&gt;precisa&lt;/strong&gt; saber como compilar e instalar o FreePascal e Lazarus, utilizando diretamente o código fonte.&lt;/p&gt;

&lt;h2 id=&quot;compilar-com-scripts&quot;&gt;Compilar utilizando Scripts&lt;/h2&gt;

&lt;p&gt;Eu nunca executei nenhum instalador do FreePascal ou Lazarus. Na época que comecei a utilizar tais ferramentas, os instaladores não eram tão bons. Além disso eu queria me manter atualizado com os fontes, pois melhorias eram (ainda são) feitas diariamente.&lt;/p&gt;

&lt;p&gt;Você sabia que o compilador FreePascal é compilado em FreePascal? Isso mesmo! Você precisa ter a última versão do compilador estável para poder compilar uma nova versão do próprio compilador. Isso é chamdo de &lt;a href=&quot;https://en.wikipedia.org/wiki/Self-hosting&quot;&gt;Self-hosting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A única maneira de estar sempre atualizado é acompanhar as mudanças dos fontes (FreePascal e Lazarus) através do SVN ou &lt;em&gt;feed&lt;/em&gt;, atualizar seus fontes local e compilar ambos no seu computador.&lt;/p&gt;

&lt;p&gt;Então eu precisava ter um script mínimo para fazer essa tarefa. Na época eu utilizava Windows XP (ainda utilizo em alguns lugares), então um Script &lt;em&gt;Batch&lt;/em&gt; seria simples e eficaz.&lt;/p&gt;

&lt;p&gt;Eu utilizava a versão 2.”alguma coisa” do compilador FreePascal. Fiz o script e, depois de algum tempo de uso, publiquei-o para a comunidade &lt;a href=&quot;http://wiki.freepascal.org/Installing_Lazarus#Compiling.2Finstalling_FPC_and_Lazarus_from_Sources_of_SVN_.28Win32.29&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dias atrás eu descobri que o script vem sendo atualizado pela comunidade — OpenSource é legal, não? — e isso me inspirou escrever esse artigo.&lt;/p&gt;

&lt;h2 id=&quot;aprimoramentos&quot;&gt;Aprimoramentos&lt;/h2&gt;

&lt;p&gt;Fui utilizando esse script inicial por bastante tempo, mas como eu fazia testes com novas funcionailidades do FPC e Lazarus, precisei ir incrementando o script — hoje tenho alguns scripts — conforme minhas necessidades pessoais.&lt;/p&gt;

&lt;p&gt;Hoje em dia tudo está mais fácil. Se você quiser instalar FPC e Lazarus, utilizando o fontes e sem querer aprender sobre esse processo, poderá utilizar o projeto &lt;a href=&quot;http://wiki.lazarus.freepascal.org/fpcup&quot;&gt;fpCup&lt;/a&gt;. Tem até um aprimoramento desse projeto chamado &lt;a href=&quot;https://github.com/newpascal/fpcupdeluxe&quot;&gt;fpCup Deluxe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bem, eu não tinha nada disso na época, então fui aprimorando meus scripts que alias, funcionam muito bem até hoje, obrigado.&lt;/p&gt;

&lt;p&gt;Ontem eu transformei esses scripts num projeto no GitHub para que a comunidade também possa aprimorá-los.&lt;/p&gt;

&lt;p&gt;Eu nomeei esse projeto de &lt;strong&gt;fp-scripts&lt;/strong&gt;. 
Aqui está o &lt;a href=&quot;https://github.com/mdbs99/fp-scripts&quot;&gt;link&lt;/a&gt; do projeto no GitHub. Não deixe de ler o &lt;a href=&quot;https://github.com/mdbs99/fp-scripts/blob/master/README.md&quot;&gt;README&lt;/a&gt; do projeto.&lt;/p&gt;

&lt;p&gt;Futuramente vou subir para o GitHub minha versão do FPC, Lazarus e Libs que utilizo nos meus projetos em produção.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Esse artigo mostrou opções de instalação do FreePascal, Lazarus ou outros “sabores” para desenvolvimento em &lt;em&gt;Object Pascal&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Vimos também que é necessário conhecermos a compilação através de scripts para termos um maior controle e opções sobre nosso ambiente.&lt;/p&gt;

&lt;p&gt;Criei um novo projeto no GitHub chamado &lt;a href=&quot;https://github.com/mdbs99/fp-scripts&quot;&gt;fp-scripts&lt;/a&gt; que contém scripts para compilação e instalação do FPC e Lazarus, no Windows, através de simples scripts em &lt;em&gt;Batch&lt;/em&gt;. Espero que você e a comunidade goste.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/scripts-para-compilar-fpc-e-lazarus-no-windows/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/scripts-para-compilar-fpc-e-lazarus-no-windows/</guid>
      </item>
    
      <item>
        <title>Métodos Privados</title>
        <description>&lt;p&gt;Existe um pensamento que diz que todo Método Privado deveria ser, na verdade, a implementação de outro Objeto.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-q6vbepqsojc-rita-morais.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Dizemos que todo Objeto deve implementar apenas uma única &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;responsabilidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Então a ideia que todo Método Privado deveria ser outro Objeto faz sentido, pelo menos na teoria.&lt;/p&gt;

&lt;p&gt;Se o Objeto deveria ter apenas uma única responsabilidade, por que eu teria mais Métodos (privados) além dos Métodos Públicos?&lt;/p&gt;

&lt;p&gt;Não seriam os Métodos Públicos suficientes para implementar apenas uma única responsabilidade?&lt;/p&gt;

&lt;p&gt;É o que vamos tentar entender nesse artigo.&lt;/p&gt;

&lt;h2 id=&quot;implementando-um-objeto&quot;&gt;Implementando um Objeto&lt;/h2&gt;

&lt;p&gt;Um Objeto deve ser a &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;representação&lt;/a&gt; de uma Entidade. Mas não a representação total da Entidade. Isso seria quase impossível ou muito complexo.&lt;/p&gt;

&lt;p&gt;Temos que abstrair ao máximo, ou seja, implementar apenas o comportamento relevante para o software.&lt;/p&gt;

&lt;p&gt;Por isso é possível termos Objetos pequenos, coesos e que implementam apenas uma única responsabilidade.&lt;/p&gt;

&lt;p&gt;Vejamos alguns exemplos para determinarmos se há sentido termos Métodos Privados, mesmo em Objetos simples.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-1&quot;&gt;Exemplo 1&lt;/h4&gt;

&lt;p&gt;No código abaixo temos uma Classe que é inicilizada com uma &lt;code&gt;string&lt;/code&gt; que representa o nome do empregado.&lt;/p&gt;

&lt;p&gt;Há uma Método Privado para “limpar” o nome. Essa limpeza consiste em retirar os espaços em branco do início e do fim do nome. Depois há uma verificação se a &lt;code&gt;string&lt;/code&gt; não ficou em branco no final. Bem simples.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/bbdc509810890ea5724a94a021f16791.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Apesar dessa simplicidade aparente, esse código possui vários erros ou violações de princípios.&lt;/p&gt;

&lt;p&gt;O primeiro problema é conceitual: Você não deve fazer &lt;a href=&quot;/posts/validacoes-no-construtor/&quot;&gt;validações no construtor&lt;/a&gt;, pois segundo Alan Kay — inventor do nome/conceito Orientação a Objetos — &lt;a href=&quot;http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en&quot;&gt;aqui&lt;/a&gt; nesse email, ele diz: &lt;em&gt;“Programação Orientada a Objetos (para mim) significa apenas mensagens, encapsular e esconder estado, e &lt;strong&gt;extrema ligação tardia de todas as coisas&lt;/strong&gt;“&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primeiro você cria os Objetos, depois eles interagem. Se você for validando e/ou executando rotinas a medida que vai criando seus Objetos, você não está programando Orientado a Objetos, isso é Programação Procedural.&lt;/p&gt;

&lt;p&gt;Você nem deve chamar nenhum Método no construtor, pois esses Métodos podem gerar algum problema e o Objeto pode não ser criado.&lt;/p&gt;

&lt;p&gt;O segundo problema é que um Empregado não deveria “limpar o nome recebido”. Não faz sentido.&lt;/p&gt;

&lt;p&gt;O Nome deveria ser um &lt;a href=&quot;https://www.youtube.com/watch?v=nia7UqcpOAc&quot;&gt;Objeto&lt;/a&gt; e ele iria validar a si mesmo; retornar uma string válida, sem espaços, formatada, talvez até com o nome do meio abreviado.&lt;/p&gt;

&lt;p&gt;Em outras palavras, o Método &lt;code&gt;CleanName&lt;/code&gt; não deveria existir, mesmo sendo privado.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-2&quot;&gt;Exemplo 2&lt;/h4&gt;

&lt;p&gt;Então para corrigir o exemplo acima, vamos implementar a Classe &lt;code&gt;TEmployeeName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora sabemos que essa Classe deve ser responsável por tudo que envolve &lt;code&gt;Nome&lt;/code&gt;, então vamos incrementar e por alguns Métodos como &lt;code&gt;FirstName&lt;/code&gt; e &lt;code&gt;LastName&lt;/code&gt;. Assim esses Métodos poderão ser reutilizados por toda a aplicação e você não precisará ficar fazendo esses algoritmos em partes do código que não tem nada haver com manipulação de &lt;code&gt;Nome&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mas veja que eu introduzi um Método Privado.&lt;/p&gt;

&lt;p&gt;Esse Método tem três responsabilidades — portanto não está 100% correto, mas serve de exemplo — que é 1) implementar o algoritmo para obter o &lt;code&gt;FirstName&lt;/code&gt;, 2) implementar outro algoritmo para obter o &lt;code&gt;LastName&lt;/code&gt; e 3) também está fazendo &lt;em&gt;cache&lt;/em&gt; dos dados.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/a303d0bf83930fcf580aee818ee23a52.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Essa Classe é tão simples que não haveria necessidade de existir esse Método Privado, porém imagine que um Objeto dessa Classe seja muito utilizado e precisa de muita performance.&lt;/p&gt;

&lt;p&gt;Nesse caso o Método Privado está fazendo um &lt;em&gt;cache&lt;/em&gt; dos dados, assim não será necessário “calcular” as partes dos nomes sempre que executarmos esses Métodos.&lt;/p&gt;

&lt;p&gt;Essa é das ocasições que um Método Privado ajuda e é bem vindo. O Objeto é criado sem interferências, rápido, sem cálculos. Depois, se um de seus Métodos for realmente executado, o Objeto faz as devidas validações e execuções. Para o mundo externo é indiferente, já que ninguém sabe o que acontece dentro de um Objeto.&lt;/p&gt;

&lt;p&gt;Se você está curioso para saber como seria a “implementação pura” Orientada a Objetos, teríamos que implementar outra Classe para &lt;a href=&quot;/posts/decorator-pattern/&quot;&gt;decorar&lt;/a&gt; a &lt;code&gt;TEmployeeName&lt;/code&gt; somente para fazermos o &lt;em&gt;cache&lt;/em&gt; dos dados. Então cada Método de &lt;code&gt;TEmployeeName&lt;/code&gt; teria a implementação dos cálculos de partes do nome nos próprios Métodos Público — a Classe ficaria com menos código e mais simples.&lt;/p&gt;

&lt;p&gt;A Classe decoradora ficaria mais ou menos assim:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/f9f7aa261bd2e317df503f974429560f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas você sempre teria que instanciar esses dois Objetos, um decorando o outro.&lt;/p&gt;

&lt;p&gt;Se vale ou não a pena criar essa Classe, é você quem decide ou as Regras de Négócio decidem por você.&lt;/p&gt;

&lt;p&gt;Bom é saber que temos opções. Talvez começar a implementação com Métodos Privados e depois, se for o caso, refatorá-los.&lt;/p&gt;

&lt;p&gt;Veja que é possível fazer um design melhor, sem Métodos Privados, mas sempre temos que ver os prós e contras.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Em teoria um Objeto não deveria ter Métodos Privados, porém vimos que existem casos de natureza tecnológica no qual os Métodos Privados auxiliam a codificação.&lt;/p&gt;

&lt;p&gt;Como eu já disse em outro &lt;a href=&quot;/posts/singleton-e-um-anti-padrao/&quot;&gt;artigo&lt;/a&gt;: &lt;em&gt;“Não devemos ser puristas em Orientação a Objetos se não há nenhum benefício”&lt;/em&gt; ou se o benefício for apenas estético, talvez.&lt;/p&gt;

&lt;p&gt;Então fique atento sobre os Métodos Privados que você está criando. Veja se eles deveriam estar em outro Objeto. Mas não perca tempo buscando a perfeição, pois um Método Privado sempre poderá ser refatorado no futuro sem nenhum problema.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/metodos-privados/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/metodos-privados/</guid>
      </item>
    
  </channel>
</rss>
