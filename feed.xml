<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Pascal Programming</title>
    <description>Sacadas sobre Programação Orientada a Objetos e Object Pascal.
</description>
    <link>http://objectpascalprogramming.com/</link>
    <atom:link href="http://objectpascalprogramming.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Decorator Pattern</title>
        <description>&lt;p&gt;Como agregar responsabilidade a Objetos individuais, em tempo de execução, independente de sua Classe?&lt;/p&gt;

&lt;p&gt;Utilizando &lt;em&gt;Decorator Pattern&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Os Decoradores oferecem uma alternativa simples e flexível ou uso de subclasses para extensão de funcionalidades.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1461709444300-a6217cec3dff.jpg&quot; alt=&quot;Decorator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para mim, &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;&lt;em&gt;Decorador&lt;/em&gt;&lt;/a&gt; é um dos mais importantes padrões de &lt;em&gt;design&lt;/em&gt;.
Infelizmente esse padrão quase nunca é utilizado, pelo menos nos projetos que vi nos últimos anos, independentemente
da linguagem de programação utilizada.&lt;/p&gt;

&lt;p&gt;Por que?&lt;/p&gt;

&lt;p&gt;Não tenho uma resposta exata, mas suponho que o motivo do não uso de Decoradores seja devido a escolha “natural” de 
utilizarmos &lt;strong&gt;Herança de Classes&lt;/strong&gt; para estender funcionalidades.&lt;/p&gt;

&lt;p&gt;Aprendemos que a Orientação a Objetos tem 3 pilares: &lt;strong&gt;Herança, Encapsulamento e Polimorfismo.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Herança de Classe é utilizada para estender funcionalidades, implementando uma nova Classe que herda as funcionalidades
da primeira e de toda uma hierarquia. Então você acha que usar Herança sempre será a escolha mais correta para extensão de funcionalidades?&lt;/p&gt;

&lt;p&gt;Eu acho que não. Em 90~95% dos casos, eu utilizo &lt;strong&gt;Decoradores&lt;/strong&gt; e &lt;strong&gt;Composição de Objetos&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Um Decorador oferece uma abordagem do tipo &quot;use quando for necessário” para adição de responsabilidades. Em vez de tentar
    suportar todas as características previsíveis em uma Classe complexa e customizada, você pode definir uma Classe simples e 
    acrescentar funcionalidade de modo incremental com objetos Decoradores.
  &lt;/p&gt;
  &lt;footer&gt;&lt;cite title=&quot;Padrões de Projeto&quot;&gt;— Padrões de Projeto, Erich Gamma, pág.173&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Decoradores são tão simples de implementar como Herança, mas traz mais benefícios.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Você não precisa prever o futuro utilizando Decoradores. Utilizando Herança você tem que se preocupar com a hierarquia
  das Classes desde o início, desde a Classe mais básica até a mais específica, como se pudesse prever o futuro;&lt;/li&gt;
  &lt;li&gt;Evita Classes sobrecarregadas de características e funcionalidades;&lt;/li&gt;
  &lt;li&gt;Classes pequenas e coesas;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exemplos de código?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Parte do código de um projeto em produção que utiliza Decoradores para consumir um WebService, &lt;a href=&quot;/posts/pensando-em-objetos/#exemplo-2&quot;&gt;aqui&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Implementação de um Log com Decoradores para memória, arquivo, banco de dados e e-mail, &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/#implementacao-oo&quot;&gt;aqui&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Utilizando a Classe &lt;code&gt;TEmployeeSalaryWithCommission&lt;/code&gt; como Decorador de &lt;code&gt;TEmployeeSalary&lt;/code&gt;, &lt;a href=&quot;/posts/objetos-pensam-e-tomam-decisoes/#versao-orientada-a-objetos&quot;&gt;aqui&lt;/a&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/decorator-pattern/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/decorator-pattern/</guid>
      </item>
    
      <item>
        <title>Nomeando Classes</title>
        <description>&lt;p&gt;O nome de uma Classe deve significar quem ela representa e não o que ela faz.&lt;/p&gt;

&lt;p&gt;Não utilize nomes como Validador, Leitor, Controlador, &lt;em&gt;Parser&lt;/em&gt;, 
Executor, &lt;em&gt;Manager&lt;/em&gt;, &lt;em&gt;Handle&lt;/em&gt;, etc. Esses nomes dizem o que fazem, não o que são.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1453946610176-6be21147c400.jpg&quot; alt=&quot;Naming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Considere alguns exemplos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1&lt;/strong&gt; Seu software trabalha com &lt;strong&gt;Arquivos Texto&lt;/strong&gt; enviados pelo Banco
(arquivos de retorno de pagamentos). Então &lt;em&gt;TBankFileParser&lt;/em&gt; é o nome da sua Classe?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2&lt;/strong&gt; Você precisa &lt;strong&gt;importar&lt;/strong&gt; um arquivo CSV proveniente de outro software. Então &lt;em&gt;TCSVImporter&lt;/em&gt;
é o nome da sua Classe?&lt;/p&gt;

&lt;p&gt;Não faça isso.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“O nome de uma Classe deve corresponder ou representar uma Entidade pura ou uma versão dela”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Se não conseguimos encontrar um bom nome para as Classes e Interfaces, quer dizer que não 
sabemos o suficiente sobre o domínio do problema ou é apenas preguiça para pensar em nomes melhores.&lt;/p&gt;

&lt;p&gt;Temos que pensar nas &lt;strong&gt;Entidades&lt;/strong&gt; em si, e não nas &lt;strong&gt;funções&lt;/strong&gt; que elas exercem.&lt;/p&gt;

&lt;p&gt;Por exemplo, considere &lt;em&gt;File&lt;/em&gt;. Um nome de &lt;strong&gt;Entidade pura&lt;/strong&gt;, ou seja, um Arquivo de computador ou arquivo em
papel, dependendo do contexto. Se temos um arquivo para ler &lt;strong&gt;não&lt;/strong&gt; devemos nomear a classe como &lt;em&gt;Reader&lt;/em&gt;!
Utilize &lt;em&gt;File&lt;/em&gt; ou uma variação deste.&lt;/p&gt;

&lt;p&gt;Um nome como &lt;em&gt;TextFile&lt;/em&gt;, é uma versão ou variação de &lt;em&gt;File&lt;/em&gt;. Também está correto. Simples. Perfeito.&lt;/p&gt;

&lt;p&gt;Então se temos um Arquivo Texto do Banco (exemplo #1) ele também deveria representar uma
Entidade. Seu nome deveria ser &lt;code&gt;TBankFile&lt;/code&gt; ou algo parecido.&lt;/p&gt;

&lt;p&gt;Se enviamos o Arquivo para o Banco (Remessa) e obtemos outro Arquivo de resposta
(Retorno), então poderíamos ter uma única interface &lt;code&gt;IBankFile&lt;/code&gt; e duas classes 
&lt;code&gt;TBankShipmentFile&lt;/code&gt; e &lt;code&gt;TBankReturnFile&lt;/code&gt;. Ambas as Classes implementariam 
a Interface.&lt;/p&gt;

&lt;p&gt;Mas o nome de uma Classe nem sempre será &lt;strong&gt;exatamente igual&lt;/strong&gt; a mesma nomenclatura da Entidade real que está representando.&lt;/p&gt;

&lt;p&gt;Em um dos meus projetos, o &lt;a href=&quot;https://github.com/mdbs99/aws&quot;&gt;AWS Lib&lt;/a&gt;, tenho classes como &lt;code&gt;TS3Service&lt;/code&gt;,
&lt;code&gt;TS3Bucket&lt;/code&gt;, &lt;code&gt;TAWSSignatureVersion1&lt;/code&gt; e muitas outras.&lt;/p&gt;

&lt;p&gt;Por que não apenas &lt;em&gt;Service&lt;/em&gt;, &lt;em&gt;Bucket&lt;/em&gt; ou &lt;em&gt;Signature&lt;/em&gt; respectivamente?
Porque Classes precisam de um &lt;strong&gt;contexto&lt;/strong&gt; — um prefixo — quando seus nomes são muito ambíguos.&lt;/p&gt;

&lt;p&gt;Na vida real o contexto está implícito, mesmo se for somente através da linguagem corporal. Exemplo:
Quando falamos para uma pessoa “sua &lt;strong&gt;manga&lt;/strong&gt; está suja”&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; olhando para sua &lt;strong&gt;camisa&lt;/strong&gt; fica claro do que se trata. 
Não há confusão com a &lt;strong&gt;fruta&lt;/strong&gt; manga se ninguém está comendo no momento.&lt;/p&gt;

&lt;p&gt;No código é mais difícil. Só tem… texto! Tudo tem a mesma “forma”. Então como diferenciar os nomes?&lt;/p&gt;

&lt;p&gt;Temos &lt;em&gt;units&lt;/em&gt; que são &lt;em&gt;namespaces&lt;/em&gt; e que poderiam ser utilizadas como “prefixo”
de todas as classes, mas quem faz isso?! Ficaria muito verboso. Ninguém quer isso — bem, talvez o pessoal do Java, 
eles gostam de escrever… :)&lt;/p&gt;

&lt;p&gt;Então para ter um padrão no código eu tenho uma regra para a nomenclatura das Classes: &lt;strong&gt;Contexto + Nome&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Isso evita a colisão de nomes com Classes já existentes na VCL/LCL e também deixa o código mais homogêneo, mais
pradronizado. Ajuda na visualização e facilita o &lt;em&gt;code-completion&lt;/em&gt; da IDE.&lt;/p&gt;

&lt;p&gt;Mas cuidado para não ir somando Contextos um após o outro.&lt;/p&gt;

&lt;p&gt;Exemplo: &lt;code&gt;TAWSNetHTTPClient&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Que tal esse nome de Classe?&lt;/p&gt;

&lt;p&gt;A Classe tem 3 contextos (AWS, Net e HTTP) e mais o nome &lt;em&gt;Client&lt;/em&gt;. 
Apesar da &lt;strong&gt;vantagem&lt;/strong&gt; que ganhamos ao evitar a colisão de nomes, é &lt;strong&gt;verboso&lt;/strong&gt; demais para codificar e, o mais 
importante, &lt;strong&gt;ler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Não é uma regra perfeita, mas funciona pra mim.&lt;/p&gt;

&lt;p&gt;Mesmo assim, após anos de codificação, ainda é uma &lt;strong&gt;arte&lt;/strong&gt; bem difícil.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Não fará sentido se você traduzir o artigo para o Inglês, já que a ambiguidade da palavra “manga” só faz sentido em Português. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Apr 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/nomeando-classes/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/nomeando-classes/</guid>
      </item>
    
      <item>
        <title>Não Utilize Casting</title>
        <description>&lt;p&gt;Sua equipe precisa de um programador Object Pascal para trabalhar num projeto que está
sendo codificado em FreePascal. Este projeto terá integração com um ERP codificado em Java e
um website codificado em PHP. Tudo utilizando MS SQLServer como SGBD.&lt;/p&gt;

&lt;p&gt;Como você iria descrever o anúncio dessa vaga?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1445451983996-ac6b92ffb1fb.jpg&quot; alt=&quot;Casting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uma tradução para &lt;em&gt;Casting&lt;/em&gt;, em Português, seria &lt;strong&gt;moldagem&lt;/strong&gt;. Você recebe algo e o “molda” em outra coisa.&lt;/p&gt;

&lt;p&gt;Fazemos isso muitas vezes. Temos um &lt;em&gt;Integer&lt;/em&gt; e o moldamos em uma &lt;em&gt;String&lt;/em&gt; e vice-versa.&lt;/p&gt;

&lt;p&gt;Mas será que o uso de &lt;em&gt;Casting&lt;/em&gt; é necessário para codificarmos nossas &lt;strong&gt;Regras de Negócio&lt;/strong&gt; utilizando
Objetos?&lt;/p&gt;

&lt;center&gt;&lt;p&gt;&lt;strong&gt;. . .&lt;/strong&gt;&lt;/p&gt;&lt;/center&gt;

&lt;p&gt;O arquiteto da equipe — sr. Anderson — já definiu o projeto.&lt;/p&gt;

&lt;p&gt;Anderson definiu a API de integração, diagramas de classes, componentes, módulos, etc. Mas o projeto 
ficou maior que o esperado e agora precisam de um programador experiente para compor a equipe.&lt;/p&gt;

&lt;p&gt;O arquiteto solicita ao seu gerente o novo programador, mas sem lhe dar instruções específicas.&lt;/p&gt;

&lt;p&gt;O gerente repassa o pedido ao pessoal do RH e então eles anunciam a vaga em sites:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Empresa ACME Inc. precisa de programador experiente.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A empresa recebe currículos com especialidade em COBOL, Delphi, C/C++, Java… PHP foi a maioria. :)&lt;/p&gt;

&lt;p&gt;Todos perdem tempo, pois terão muito mais currículos para &lt;strong&gt;analisar e verificar&lt;/strong&gt; se o canditato 
se &lt;strong&gt;encaixa nos critérios&lt;/strong&gt;, pois não definiram as &lt;strong&gt;habilidades necessárias&lt;/strong&gt; que o programador deve ter
quando fizeram o anúncio.&lt;/p&gt;

&lt;p&gt;O mesmo acontece quando utilizamos &lt;em&gt;Casting&lt;/em&gt;. É necessário ter &lt;strong&gt;código de verificação&lt;/strong&gt; para o Objeto 
afim de determinar sua Classe.&lt;/p&gt;

&lt;blockquote&gt;
  Seus Objetos devem trabalhar sob contratos, ou seja, interfaces. Somente Objetos
  qualificados — que implementam a Interface — poderão ser utilizados para fazer o serviço.
&lt;/blockquote&gt;

&lt;p&gt;Se você tem um trabalho a fazer, chame um &lt;strong&gt;especialista&lt;/strong&gt; apto para fazer o trabalho — ou faça você mesmo.&lt;/p&gt;

&lt;p&gt;O trabalho é determinado por um &lt;strong&gt;contrato&lt;/strong&gt; que especifica as habilidades necessárias que o especialista 
precisa ter.&lt;/p&gt;

&lt;p&gt;Na Orientação a Objetos os &lt;a href=&quot;/posts/interfaces-em-todo-lugar/#interfaces-sao-contratos&quot;&gt;contratos são representados por Interfaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interfaces, &lt;strong&gt;não Classes.&lt;/strong&gt;&lt;/p&gt;

&lt;center&gt;&lt;p&gt;&lt;strong&gt;. . .&lt;/strong&gt;&lt;/p&gt;&lt;/center&gt;

&lt;p&gt;Anderson precisa de um programador.&lt;/p&gt;

&lt;p&gt;O RH altera os requisitos da vaga.&lt;/p&gt;

&lt;p&gt;O programador deve saber:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Object Pascal&lt;/li&gt;
  &lt;li&gt;MS SQLServer&lt;/li&gt;
  &lt;li&gt;Desejável PHP, Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora ficou mais fácil de encontrar o programador específico para o trabalho.&lt;/p&gt;

&lt;p&gt;É isso que você deve fazer no seu código. Especifique Interfaces que definam o contrato necessário para fazer 
o trabalho.&lt;/p&gt;

&lt;p&gt;Não defina argumentos do tipo de &lt;strong&gt;Classes genéricas&lt;/strong&gt; — TObject, etc — sendo necessário utilizar &lt;em&gt;Casting&lt;/em&gt; para verificar
qual o tipo de Classe do Objeto para fazer algum &lt;strong&gt;processamento específico&lt;/strong&gt; dependendo da Classe. Não faça isso!&lt;/p&gt;

&lt;p&gt;Interfaces são contratos de trabalho.&lt;/p&gt;

&lt;p&gt;Defina bem seus contratos e você não precisará fazer &lt;em&gt;Casting&lt;/em&gt; pois saberá que
somente &lt;strong&gt;Objetos especialistas&lt;/strong&gt; irão se “candidatar” ao trabalho. Do contrário não fique surpreso de receber 
um &lt;strong&gt;tomate&lt;/strong&gt; quando você esperava uma &lt;strong&gt;maçã&lt;/strong&gt;! :)&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Apr 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/nao-utilize-casting/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/nao-utilize-casting/</guid>
      </item>
    
      <item>
        <title>Não Utilize nil ou NULL</title>
        <description>&lt;p&gt;O conceito &lt;em&gt;NULL&lt;/em&gt;, também conhecido como &lt;a href=&quot;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&quot;&gt;“O erro de 1 bilhão de dólares”&lt;/a&gt;,
foi inventado por Charles Antony Richard Hoare em 1965.&lt;/p&gt;

&lt;p&gt;Em uma conferência em 2009, ele pediu desculpas por inventar a referência nula.&lt;/p&gt;

&lt;p&gt;Mas o estrago já havia sido feito…&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1415226620463-aedee27159c5.jpg&quot; alt=&quot;NULL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A referência &lt;em&gt;NULL&lt;/em&gt; — o mesmo vale para &lt;em&gt;nil&lt;/em&gt; do Object Pascal — é antiga e existe, talvez, 
em todas as linguagens de programação.&lt;/p&gt;

&lt;p&gt;O conceito também é valido para SGBD’s.&lt;/p&gt;

&lt;p&gt;Então por que estou dizendo para você não utilizar &lt;em&gt;nil&lt;/em&gt; ou &lt;em&gt;NULL&lt;/em&gt;?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;NULL&lt;/em&gt; ou nil não pertencem ao mundo Orientado a Objetos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pense por um segundo, como seria o mundo sem o &lt;em&gt;NULL&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;null-na-orientao-a-objetos&quot;&gt;&lt;em&gt;NULL&lt;/em&gt; na Orientação a Objetos&lt;/h2&gt;

&lt;p&gt;De agora em diante quando eu disser &lt;em&gt;NULL&lt;/em&gt;, pense também em &lt;em&gt;nil&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Esse blog fala de Orientação a Objetos com &lt;em&gt;Object Pascal&lt;/em&gt;, então nós, programadores &lt;em&gt;Object Pascal&lt;/em&gt;, 
utilizamos o &lt;code&gt;nil&lt;/code&gt; ao invés de &lt;code&gt;NULL&lt;/code&gt; quando estamos falando sobre Objetos e referências a Objetos. 
Se estivermos falando de dados, então é &lt;em&gt;NULL&lt;/em&gt; mesmo.
Mas como a maioria das linguagens e &lt;em&gt;papers&lt;/em&gt; falam sobre &lt;em&gt;NULL&lt;/em&gt;, fica mais claro para todos — inclusive 
para programadores que não programam em &lt;em&gt;Object Pascal&lt;/em&gt; — falarmos sobre &lt;em&gt;NULL&lt;/em&gt; para nos referirmos a ambos.&lt;/p&gt;

&lt;p&gt;Então.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;O que significa &lt;em&gt;NULL&lt;/em&gt; na Orientação a Objetos?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nada.&lt;/p&gt;

&lt;p&gt;Não existe instância, não existe um Objeto. Ninguém para receber uma mensagem (método) e fazer alguma coisa.&lt;/p&gt;

&lt;p&gt;Mas um método pode retornar &lt;em&gt;NULL&lt;/em&gt; se o contexto em execução não tiver um Objeto válido
para o retorno — você poderia afirmar.&lt;/p&gt;

&lt;p&gt;Bem, em um código Orientado a Objetos você deve ter Objetos “conversando” entre si e &lt;em&gt;NULL&lt;/em&gt;
não é uma instância válida.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Todo método que retorna um tipo de Interface ou Classe deveria retornar uma instância
válida. Sempre.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se não for possível, &lt;strong&gt;levante uma exceção&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Essa é a &lt;strong&gt;teoria&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Infelizmente essa teoria não funciona na prática. Não em 100% das vezes.&lt;/p&gt;

&lt;p&gt;Não há como saber, previamente, se um método que deveria retornar uma instância de algum
Objeto irá retornar uma instância válida ou &lt;em&gt;NULL&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Muitos &lt;em&gt;frameworks&lt;/em&gt; utilizam &lt;em&gt;NULL&lt;/em&gt;, o SGBD retorna &lt;em&gt;NULL&lt;/em&gt;, o mundo
utiliza &lt;em&gt;NULL&lt;/em&gt;…&lt;/p&gt;

&lt;p&gt;Esse é o problema. O &lt;em&gt;NULL&lt;/em&gt; existe e não podemos ignorá-lo.&lt;/p&gt;

&lt;p&gt;Felizmente existem técnicas para evitá-lo e proteger nosso código de seu uso.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Null Object Pattern&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Optional Pattern&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Listas&lt;/li&gt;
  &lt;li&gt;Levantar uma Exceção&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;null-object-pattern&quot;&gt;1. &lt;em&gt;Null Object Pattern&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;O padrão &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_Object_pattern&quot;&gt;&lt;em&gt;Null Object Pattern&lt;/em&gt;&lt;/a&gt; sugere utilizar
um “Objeto Nulo” que implementa a mesma interface do Objeto real, no entanto esse Objeto não 
teria implementação.&lt;/p&gt;

&lt;p&gt;Tradução livre:&lt;/p&gt;
&lt;blockquote&gt;
  Em vez de utilizar uma referência nula para transmitir ausência de um objeto (por exemplo, um cliente inexistente), 
  utiliza-se um objeto que implementa a interface esperada, mas cujo o corpo dos métodos estarão vazios. 
  &lt;footer&gt;&lt;cite title=&quot;Wikipedia&quot;&gt;— Wikipedia&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;É uma boa ideia. Mas não resolve o problema. Aliás, em alguns casos, pode-se aumentar o problema
introduzindo um Objeto que “não faz nada” e não levanta exceções. Pode ser difícil encontrar &lt;em&gt;bugs&lt;/em&gt; devido
ao seu uso.&lt;/p&gt;

&lt;p&gt;Esse tipo de Objeto pode ser utilizado, na minha opinião, não como um “Objeto Nulo” mas como um “Objeto &lt;em&gt;Default&lt;/em&gt;”,
que contém código real.&lt;/p&gt;

&lt;p&gt;Em um Sistema de Pagamentos, cada Documento tem um código. Cada um desses códigos tem uma “Classe de Cálculo”
específica que irá fazer o cálculo do valor a ser pago. O Objeto é criado de acordo com o código, utilizando uma &lt;strong&gt;Fábrica&lt;/strong&gt; de 
acordo com o padrão &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_factory_pattern&quot;&gt;&lt;em&gt;Abstract Factory Pattern&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O problema ocorre se o usuário criar um novo código para o qual ainda não existe um Cálculo pré-determinado. 
Nesso momento utilizo o “Objeto &lt;em&gt;Default&lt;/em&gt;”. É uma Classe padrão que serve para calcular qualquer novo Documento que
não tenha uma Classe de Cálculo definida.&lt;/p&gt;

&lt;p&gt;O cálculo pode não estar 100% correto para o usuário, mas também não considero um erro pois a Classe de Cálculo ainda 
não foi definida.&lt;/p&gt;

&lt;p&gt;É uma &lt;strong&gt;solução elegante&lt;/strong&gt; para um &lt;strong&gt;problema temporário&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;optional-pattern&quot;&gt;2. &lt;em&gt;Optional Pattern&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Optional Pattern&lt;/em&gt; ou &lt;a href=&quot;https://en.wikipedia.org/wiki/Option_type&quot;&gt;&lt;em&gt;Option Type&lt;/em&gt;&lt;/a&gt; é nada mais, nada menos, que a 
utilização de &lt;em&gt;Generics&lt;/em&gt; para encapsular o resultado de um método, quando esse resultado pode ou não conter uma 
instância válida.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt; também é conhecido por &lt;em&gt;Maybe&lt;/em&gt;. É um conceito das linguagens funcionais que foram implementados em linguagens
imperativas como Java e C#.&lt;/p&gt;

&lt;p&gt;Basicamente você tem uma Classe genérica que contém os seguintes métodos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IsNull — indica se o valor encapsulado é &lt;em&gt;NULL&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Value — retorna o valor real, ou seja, o Objeto encapsulado;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O nome dos métodos podem variar dependendo da &lt;em&gt;Lib&lt;/em&gt; utilizada.&lt;/p&gt;

&lt;p&gt;Este &lt;a href=&quot;http://enterprisecraftsmanship.com/2015/03/13/functional-c-non-nullable-reference-types/&quot;&gt;link&lt;/a&gt; tem exemplos em C# interessantes.&lt;/p&gt;

&lt;h2 id=&quot;listas&quot;&gt;3. Listas&lt;/h2&gt;

&lt;p&gt;Como podemos simular o &lt;em&gt;Optional Pattern&lt;/em&gt; sem utilizar &lt;em&gt;Generics&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Ora, Listas!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Generics&lt;/em&gt; é muito utilizado, mas não o acho impressindível. &lt;em&gt;Generics&lt;/em&gt; nos permite escrever menos e, é isso.
O que é muito bom pois menos código, menos &lt;em&gt;bugs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Mas para o problema do &lt;em&gt;NULL&lt;/em&gt; você não precisa de &lt;em&gt;Generics&lt;/em&gt;, basta utilizar Listas.&lt;/p&gt;

&lt;p&gt;Qual a diferença entre ter uma condicional que verifica o método &lt;code&gt;IsNull&lt;/code&gt; de um &lt;em&gt;Optional&lt;/em&gt;  para depois utilizar sua propriedade &lt;code&gt;Value&lt;/code&gt;
para obter a instância, do que ter uma Lista que também devemos verificar &lt;code&gt;Empty&lt;/code&gt; e depois obter o primeiro &lt;code&gt;Item[0]&lt;/code&gt; da lista? :)&lt;/p&gt;

&lt;p&gt;Então se está utilizando uma versão antiga do Delphi — eu ainda utilizo Delphi 7 para alguns sistemas — que não tem &lt;em&gt;Generics&lt;/em&gt;
e não tem certeza se um método poderá retornar &lt;em&gt;NULL&lt;/em&gt;, pense em retornar uma Lista com itens que contém o tipo da interface que o método
deveria retornar. Se a lista não está vazia, basta pegar o primeiro item.&lt;/p&gt;

&lt;h2 id=&quot;levantar-uma-exceo&quot;&gt;4. Levantar uma Exceção&lt;/h2&gt;

&lt;p&gt;Se tudo der errado, levante e uma exceção. É isso. &lt;strong&gt;Falhe rapidamente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mas como saber se devo utilizar uma das técnicas acima ou levantar uma exceção?&lt;/p&gt;

&lt;p&gt;Não há uma regra. Deve-se usar o &lt;strong&gt;bom senso&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se você tem um método que pesquisa pelo &lt;code&gt;Id&lt;/code&gt;, então quer dizer que o sistema, naquele momento, tem
o &lt;code&gt;Id&lt;/code&gt; do registro e ele &lt;strong&gt;deveria&lt;/strong&gt; existir. Se nada é retornado, então levante uma exceção.&lt;/p&gt;

&lt;p&gt;Se a pesquisa é por &lt;code&gt;Nome&lt;/code&gt;, no entanto, então &lt;strong&gt;não há certeza&lt;/strong&gt; de retornar 0-n registros. Nesse caso
levantar uma exceção não faria muito sentido.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Não há mágica para remover o &lt;em&gt;NULL&lt;/em&gt;. Mesmo utilizando as técnicas apresentadas acima, deve-se codificar
uma &lt;strong&gt;condicional&lt;/strong&gt; para verificar a presença ou não do &lt;em&gt;NULL&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Muitos &lt;em&gt;frameworks&lt;/em&gt;, &lt;em&gt;API’s&lt;/em&gt;, componentes irão utilizar o &lt;em&gt;NULL&lt;/em&gt;, então tais verificações sempre irão existir no seu código.&lt;/p&gt;

&lt;p&gt;Você irá utilizar &lt;em&gt;NULL&lt;/em&gt; ou &lt;em&gt;nil&lt;/em&gt;, isso é quase um fato.&lt;/p&gt;

&lt;p&gt;Esse artigo propõe a &lt;strong&gt;não utilização do &lt;em&gt;NULL&lt;/em&gt;&lt;/strong&gt; em Objetos que fazem parte do 
&lt;strong&gt;Domínio&lt;/strong&gt; do seu sistema, ou seja, das suas &lt;strong&gt;Classes de Negócio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Não permita que seus métodos retornem &lt;em&gt;NULL&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Não utilize &lt;em&gt;NULL&lt;/em&gt; em lógicas condicionais de suas Classes.&lt;/p&gt;

&lt;p&gt;Você deve estar pensando:&lt;/p&gt;

&lt;p&gt;&lt;ins&gt;Testar se uma instância é &lt;em&gt;NULL&lt;/em&gt; não é o mesmo que testar se um &lt;em&gt;Optional&lt;/em&gt; ou Lista estão vazios antes de obter seu &lt;code&gt;Value&lt;/code&gt;?&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;O teste é o mesmo, sim. Você terá um &lt;code&gt;if&lt;/code&gt; no código, é verdade. Mas se o valor retornado no método é uma instância 
de algum Objeto que implementa alguma interface, não tem como saber se a instância é válida ou &lt;em&gt;NULL&lt;/em&gt;. E &lt;strong&gt;ninguém&lt;/strong&gt;, nenhum programador,
&lt;strong&gt;testa todos os retornos de todos os métodos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;No entanto, &lt;em&gt;Optional&lt;/em&gt; ou Listas &lt;strong&gt;avisam&lt;/strong&gt; ao programador que algo pode dar errado, que &lt;em&gt;NULL&lt;/em&gt; pode ser retornado. Cabe
ao programador fazer a análise, fazer o teste ou não… mas ele foi avisado.&lt;/p&gt;

&lt;p&gt;O código fica &lt;strong&gt;auto-documentado&lt;/strong&gt; sobre o possível retorno de valores &lt;em&gt;NULL&lt;/em&gt; nos métodos.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Apr 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/nao-utilize-nil-ou-null/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/nao-utilize-nil-ou-null/</guid>
      </item>
    
      <item>
        <title>Objetos sem Estado</title>
        <description>&lt;p&gt;Por que sempre deveríamos criar nossas Classes com pelo menos um argumento no construtor principal afim de 
não deixar nossos Objetos &lt;strong&gt;“vazios de estado”&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Porque construtores sem argumentos é um anti-padrão.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1455641064490-74f5f8dbf598.jpg&quot; alt=&quot;Vazio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para criamos instância de objetos utilizamos os Construtores de Classes 
&lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;Primários e Secundários&lt;/a&gt;
ou indiretamente, através do padrão chamado &lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;Método New()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um bom construtor sempre tem argumentos para a inicialização do Objeto.&lt;/p&gt;

&lt;p&gt;Não utilizar argumentos é visto como uma má prática na Orientação a Objetos porque um Objeto deve encapsular
atributos privados, ou seja, seu &lt;strong&gt;Estado&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se um Objeto não tem Estado então ele pode ser visto como uma instância de uma 
&lt;a href=&quot;/posts/nao-utilize-metodos-estaticos/#classes-utilitarias&quot;&gt;Classe Utilitária&lt;/a&gt;,
o que é um anti-padrão na programação Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;Infelizmente o senso comum da maioria dos programadores Object Pascal — e também de outras linguagens Orientada a Objetos —
é sempre ter apenas um &lt;strong&gt;construtor sem parâmetros&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Essa prática é comum desde… sempre.&lt;/p&gt;

&lt;p&gt;A VCL/LCL, a RTL, todos os descendentes de &lt;code&gt;TComponent&lt;/code&gt;, a maioria dos códigos que tenho visto em 
várias empresas e, é claro, em muitos dos meus códigos
— projetos antigos cujo o custo para fazer tais alterações seria muito alto — 
todos utilizam construtores sem argumentos, na maioria das Classes.&lt;/p&gt;

&lt;p&gt;Por que codificamos dessa maneira?&lt;/p&gt;

&lt;p&gt;Porque é mais &lt;strong&gt;fácil&lt;/strong&gt; codificar dessa maneira.&lt;/p&gt;

&lt;p&gt;Após a inicialização do Objeto com um construtor sem argumentos basta utilizar as &lt;em&gt;properties&lt;/em&gt; ou métodos &lt;code&gt;SetXxx(Value)&lt;/code&gt; para inicializar ou
injetar algum valor.&lt;/p&gt;

&lt;p&gt;Fácil.&lt;/p&gt;

&lt;p&gt;Essa prática é &lt;strong&gt;simples e conveniente&lt;/strong&gt;, no entanto dizem que “na Engenharia nada é de graça”, ou seja, essa facilidade tem um preço.&lt;/p&gt;

&lt;p&gt;Essa &lt;strong&gt;falsa simplicidade&lt;/strong&gt; trás consigo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Código-espaguete”: Classes mutáveis, crescentes, são quase sempre o início do caos.&lt;/li&gt;
  &lt;li&gt;Complexidade: Classes gigantes e complexas com dezenas de métodos e propriedades.&lt;/li&gt;
  &lt;li&gt;Desperdícios: De memória devido a alocação desnecessária de “objetos filhos”; 
  de tempo devido ao tempo perdido para entender, implementar ou resolver problemas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sério.&lt;/p&gt;

&lt;p&gt;Não concorda?&lt;/p&gt;

&lt;p&gt;Então me diga quando foi a última vez que você utilizou todas as propriedades e métodos de um componente? Não lembra, quase nunca ou o mais provável, nunca.&lt;/p&gt;

&lt;p&gt;Um Objeto deve ser fácil de criar, mas você precisa no mínimo raciocinar sobre o motivo de instânciá-lo e isso é feito 
através dos argumentos passados em seu construtor. Você deve instanciar um Objeto que
&lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;represente uma Entidade&lt;/a&gt; para fazer algum trabalho num
momento específico no tempo.&lt;/p&gt;

&lt;p&gt;Sem um construtor adequado é fácil adicionar mais e mais propriedades 
e métodos aos Objetos.&lt;/p&gt;

&lt;p&gt;O problema é que esses Objetos não param de crescer ou já são grandes o bastante para ninguém mais entendê-los ou não ter a coragem para 
refatorar seu código.&lt;/p&gt;

&lt;p&gt;No fim você terá um monstro em suas mãos e é justamente isso que queremos evitar!&lt;/p&gt;

&lt;p&gt;O outro motivo desses monstros aparecerem é devido ao fato desses Objetos não serem &lt;a href=&quot;https://en.wikipedia.org/wiki/Immutable_object&quot;&gt;imutáveis&lt;/a&gt;.
Codificar utilizando imutabilidade irá restringí-lo num primeiro momento, no entanto essa restrição irá fazê-lo pensar num
design melhor para suas Classes.&lt;/p&gt;

&lt;p&gt;Num mundo perfeito, todo construtor deveria prover informação necessária para um Objeto encapsular algum Estado. Essa informação
é concedida através dos argumentos.&lt;/p&gt;

&lt;p&gt;Bem, acho que ainda não é possível criar componentes para a IDE sem que apenas um construtor único e sem argumentos seja utilizado
para instanciar o Objeto. Fizeram a arquitetura dessa forma e não temos como mudar. É assim no Delphi e Lazarus, mas também 
ocorre no Java ou C# onde muitos &lt;em&gt;frameworks&lt;/em&gt; exigem um construtor sem argumentos.&lt;/p&gt;

&lt;p&gt;Então vamos deixar os componentes de lado e focar apenas nas &lt;strong&gt;Classes de Negócio&lt;/strong&gt;, porque podemos implementar essas Classes 
da maneira que quisermos sem nos preocuparmos em integrá-las com &lt;em&gt;frameworks&lt;/em&gt; ou IDE’s.&lt;/p&gt;

&lt;p&gt;Antes de criar uma Classe, não pense nas funções. Pense no que ela representa e quais os argumentos que seus Objetos irão precisar
para fazer o trabalho.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Apr 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/objetos-sem-estado/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/objetos-sem-estado/</guid>
      </item>
    
      <item>
        <title>AWS Lib: A História e o novo suporte a SES</title>
        <description>&lt;p&gt;Você já conhece o projeto OpenSource &lt;a href=&quot;https://github.com/mdbs99/aws&quot;&gt;AWS Lib&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Lib&lt;/strong&gt; é uma implementação minimalista para &lt;strong&gt;Amazon Web Services (AWS)&lt;/strong&gt;. Inicialmente
foi implementada somente a API para a utilização de apenas um dos serviços, o &lt;strong&gt;Amazon S3&lt;/strong&gt;,
até agora…&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-awslist.png&quot; alt=&quot;Amazon Web Services List&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;como-tudo-comeou&quot;&gt;Como Tudo Começou&lt;/h2&gt;

&lt;p&gt;A três anos atrás fui contratado para a fazer a análise, arquitetura e implementação de alguns módulos 
de um sistema.&lt;/p&gt;

&lt;p&gt;Apesar desse sistema utilizar outras linguagens, implementei os módulos utilizando a linguagem &lt;strong&gt;Object Pascal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esses módulos eram, na verdade, &lt;strong&gt;ferramentas&lt;/strong&gt; para um grande sistema muito maior.&lt;/p&gt;

&lt;p&gt;Um dos requisitos desse grande sistema era a utilização do serviço Amazon S3. Os motivos ou 
como eles utilizam o S3 são propriedade privada e não são relevantes aqui neste blog.&lt;/p&gt;

&lt;p&gt;Esse requisito chegou até mim por último. Os módulos ou ferramentas já estávam quase terminados, 
mas agora tinha um novo requisito e eu não sabia nada sobre os serviços da Amazon.&lt;/p&gt;

&lt;p&gt;Eu tinha apenas mais 1 semana para entregar o sistema.&lt;/p&gt;

&lt;p&gt;Então fiz uma rápida pesquisa na Internet sobre possíveis implementações em Object Pascal para a 
&lt;strong&gt;API Amazon S3&lt;/strong&gt; e não encontrei nada que pudesse utilizar. Lembro que existia alguma coisa em &lt;strong&gt;Delphi&lt;/strong&gt;
mas o código era confuso e eu não estava utilizando Delphi mas sim, &lt;strong&gt;FreePascal&lt;/strong&gt; (FPC) e &lt;strong&gt;Lazarus&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Então, mesmo que funcionasse em Delphi, eu não iria copiar o código alheio, converter para FPC e
depois cobrar por isso. É claro que não.&lt;/p&gt;

&lt;p&gt;Então só havia uma coisa a fazer. Teria que codificar minha própria implementação.&lt;/p&gt;

&lt;p&gt;Descobri que não era tão difícil mas tive dificuldades para implementar a parte de autenticação do serviço.&lt;/p&gt;

&lt;p&gt;Quase terminando o prazo consegui resolver o problema fazendo uma classe &lt;strong&gt;simples&lt;/strong&gt;, &lt;strong&gt;suja&lt;/strong&gt; e 
totalmente &lt;strong&gt;procedural&lt;/strong&gt;. Mas funcionava. O projeto foi entregue e foi um sucesso.&lt;/p&gt;

&lt;p&gt;Esse módulo que utilizava o Amazon S3 era apenas 5% de tudo que tinha que entregar.&lt;/p&gt;

&lt;p&gt;Depois de alguns dias resolvi publicar no &lt;a href=&quot;https://github.com/mdbs99/aws&quot;&gt;Github&lt;/a&gt; apenas essa classe
como projeto OpenSource, pois sabia que haveria outras pessoas com o mesmo problema que tive, ou seja, não
havia nenhuma implementação dos serviços AWS para Object Pascal — e pelo que sei ainda não há — especificamente
para FPC.&lt;/p&gt;

&lt;p&gt;O tempo passou e o projeto ficou esquecido. Até que um dia um amigo me lembrou:&lt;/p&gt;
&lt;pre&gt;
— Você não tem vergonha daquele código publicado no Github? — ele disse.
— Que código? — perguntei.
— A implementação do Amazon S3...
— Err, sei... tá ruim aquele código e...
— Tá horrível! Você fala de Orientação a Objetos, é aquilo lá?
— Está bem, vou dar uma olhada no código.
— Acho melhor refazer tudo — ele disse.
&lt;/pre&gt;

&lt;p&gt;E ele estava certo.&lt;/p&gt;

&lt;p&gt;Então eu refiz tudo. Trabalhei no código até que as prioridades mudarem novamente, ou seja, novos Projetos.&lt;/p&gt;

&lt;p&gt;Mas ficou 100% melhor do que estava antes.&lt;/p&gt;

&lt;p&gt;Defini alguns princípios para o projeto:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;todas as classes são &lt;em&gt;sealed&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;todos os métodos retornam uma interface ou um tipo primitivo&lt;/li&gt;
  &lt;li&gt;todos os métodos públicos são implementações de métodos de uma interface&lt;/li&gt;
  &lt;li&gt;todas as instâncias são imutáveis&lt;/li&gt;
  &lt;li&gt;a alocação de memória é liberada automaticamente&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Nada mal, eu acho.&lt;/p&gt;

&lt;h2 id=&quot;amazon-ses-um-novo-servio&quot;&gt;Amazon SES, um Novo Serviço&lt;/h2&gt;

&lt;p&gt;Pela imagem acima tem-se uma ideia de que a Amazon, para quem não conhece, tem dezenas de serviços. Um deles
é o &lt;a href=&quot;https://aws.amazon.com/pt/ses/&quot;&gt;Amazon Simple Email Service&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    O Amazon Simple Email Service (Amazon SES)  é um serviço de e-mails econômico criado na infraestrutura 
    confiável e escalável que a Amazon.com desenvolveu para atender à sua própria base de clientes. 
  &lt;/p&gt;
  &lt;footer&gt;&lt;cite title=&quot;Amazon SES&quot;&gt;— Amazon SES&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Na semana passada retornei ao projeto.&lt;/p&gt;

&lt;p&gt;Comecei refatorando todos os construtores para utilizar 
o padrão do &lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;Método New()&lt;/a&gt;. O motivo
é que estou preparando o código para a implementação de um novo serviço, o &lt;strong&gt;Amazon Simple Email Service (SES)&lt;/strong&gt; e,
felizmente, não estou sozinho nessa empreitada.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/andre.medeiros.5458?fref=ts&quot;&gt;André Medeiros&lt;/a&gt; entrou em contato comigo em 2015 para 
falar sobre meu outro projeto, o &lt;a href=&quot;https://github.com/mdbs99/Greyhound&quot;&gt;Greyhound&lt;/a&gt;, e assim nos tornamos amigos.&lt;/p&gt;

&lt;p&gt;O tempo passou e em 12 de Março recebo um e-mail do André que falava, dentre outras coisas, o seguinte:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nos últimos dias precisei fazer uma integração com a API do SES, e pensei em usar a sua base para isso, já que ela esta muito bem feita.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mais uma vez, não sabia que serviço era esse.&lt;/p&gt;

&lt;p&gt;O próprio André resumiu o que é o SES e como ele quer utilizar esse serviço na empresa dele. Achei bem interessante.&lt;/p&gt;

&lt;p&gt;Alguém, além de mim, estava utilizando o AWS Lib em projetos reais e agora estava querendo extender seu uso para outros
serviços… Legal!&lt;/p&gt;

&lt;p&gt;O AWS Lib foi feito com esse pensamento. A princípio seria só a implementação do S3, porém seu nome não é “AWS S3 Lib” 
mas sim, &lt;strong&gt;AWS Lib&lt;/strong&gt; que é um nome genérico para compor todos as implementações possíveis de fazer com Object Pascal.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…nosso desejo é fazer com que a sua AWS Lib possa nos acompanhar, 
e tenho certeza que com nosso conhecimento em AWS podemos contribuir bastante para seu projeto&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então vamos lá, falei, vamos fazer isso!&lt;/p&gt;

&lt;h2 id=&quot;problema-na-autenticao&quot;&gt;Problema na Autenticação&lt;/h2&gt;

&lt;p&gt;A autenticação padrão do AWS Lib não estava funcionando com o novo serviço, o SES.&lt;/p&gt;

&lt;p&gt;Novamente problemas com a autenticação, pensei…&lt;/p&gt;

&lt;p&gt;Ora, fiz a unit &lt;em&gt;aws_client&lt;/em&gt; separada justamente pensando nessa reutilização de autenticação em todas as outras 
implementações de outros serviços… mas não estava funcionando.&lt;/p&gt;

&lt;p&gt;Felizmente o André apresentou a solução 2 dias depois:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O problema não era a forma de assinar, e sim a forma de declarar o tipo de assinatura para AWS.
As autenticações se dividem em versões, e cada serviço da AWS suporta 1 ou mais tipos de autenticação&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O SES suporta as autenticações das versões 3 e 4. Ele implementou a versão 3 e funcionou!&lt;/p&gt;

&lt;p&gt;Mas…&lt;/p&gt;

&lt;h2 id=&quot;refatorando-o-cdigo-voc-vai-gostar-disso&quot;&gt;Refatorando o código, Você vai Gostar disso&lt;/h2&gt;

&lt;p&gt;Ontem eu atualizei os fontes do projeto no Github utilizando a implementação do André, ou seja, a unit &lt;em&gt;aws_ses&lt;/em&gt;
assim como a pequena modificação na unit &lt;em&gt;aws_client&lt;/em&gt; que ele precisou fazer para tudo funcionar.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Acredito que você vai melhorar esta codificação, mas já é possível enviar email pelo SES e interagir com o S3 usando o AWS Lib.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;André é leitor do blog. Ele sabe… bem, ambos sabemos que o código não está no “padrão”. Mas mesmo assim
eu atualizei os fontes.&lt;/p&gt;

&lt;p&gt;O motivo é simples: Vou utilizar esse &lt;em&gt;Case&lt;/em&gt; para fazer refatorações e lhe explicar — você leitor — os motivos de tais
alterações. E, é claro, tais refatorações serão feitas tendo sempre em mente a verdadeira &lt;strong&gt;Orientação a Objetos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Neste &lt;a href=&quot;https://github.com/mdbs99/aws/commit/c5d990f4d55b4565035327705e2e33999d4f9126&quot;&gt;&lt;em&gt;commit&lt;/em&gt;&lt;/a&gt; você poderá ver o código novo. 
Funciona, mas não está como gostaríamos.&lt;/p&gt;

&lt;p&gt;Vou utilizar os ensinamentos aqui expostos para direcionar a refatoração do código. O objetivo final é termos uma suíte
de componentes 100% codificado em Object Pascal que implementa a maioria dos serviços da Amazon.&lt;/p&gt;

&lt;p&gt;Fique ligado!&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;

</description>
        <pubDate>Mon, 28 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/awslib-a-historia-e-o-novo-suporte-a-ses/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/awslib-a-historia-e-o-novo-suporte-a-ses/</guid>
      </item>
    
      <item>
        <title>Construtores da Classe, Primário e Secundários</title>
        <description>&lt;p&gt;Você pode implementar dezenas de Construtores para uma única Classe, porém apenas um deles 
deverá ser o &lt;strong&gt;Primário&lt;/strong&gt; enquanto os demais deverão ser apenas &lt;strong&gt;Secundários&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Todos os construtores Secundários deverão fazer uma chamada ao construtor Primário.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1457803097035-3ace37af34a7.jpg&quot; alt=&quot;Imagem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Os &lt;a href=&quot;https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)&quot;&gt;Construtores de Classes&lt;/a&gt; são 
utilizados para criar instâncias de Objetos.&lt;/p&gt;

&lt;p&gt;Uma Classe pode ter vários construtores, mas somente o &lt;strong&gt;Primário&lt;/strong&gt; deverá retornar uma instância de um Objeto.&lt;/p&gt;

&lt;p&gt;Os demais construtores são apenas &lt;strong&gt;Secundários&lt;/strong&gt;, pois irão fazer uso do construtor Primário.&lt;/p&gt;

&lt;p&gt;O construtor Primário, na maioria das vezes, sempre será aquele com mais parâmetros.&lt;/p&gt;

&lt;p&gt;Vamos a um exemplo.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;implementation&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FLogin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FPassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A Classe &lt;code&gt;TUser&lt;/code&gt; tem 2 construtores.&lt;/p&gt;

&lt;p&gt;O segundo construtor chama o primeiro, passando um valor &lt;em&gt;default&lt;/em&gt; para o argumento &lt;em&gt;Password&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Qualquer inicialização de atributos, sejam eles passados em argumentos pelo construtor ou não, deverá
ser executado em apenas um local, ou seja, o construtor Primário.&lt;/p&gt;

&lt;p&gt;Este é um padrão que eu sigo em meus projetos.&lt;/p&gt;

&lt;p&gt;Esse padrão simplifica muito quando quero saber sobre tudo que um Objeto utiliza, inicializa ou encapsula, 
bastando olhar no seu construtor Primário. Esse construtor sempre será o primeiro da lista de métodos.&lt;/p&gt;

&lt;h2 id=&quot;argumentos-default&quot;&gt;Argumentos &lt;em&gt;Default&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;A linguagem Pascal permite que funções e métodos tenham argumentos &lt;em&gt;default&lt;/em&gt;. O exemplo acima poderia ser
reescrito com apenas 1 construtor, desse jeito:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Apesar de escrever menos, eu não recomendo utilizar argumentos &lt;em&gt;default&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O primeiro motivo é que não podemos nomear os argumentos. Quando temos mais de um argumento &lt;em&gt;default&lt;/em&gt;, 
essa “vantagem de escrever menos” não faz muito sentido.&lt;/p&gt;

&lt;p&gt;O segundo motivo é que eu prefiro gerar os valores &lt;em&gt;default&lt;/em&gt; em &lt;em&gt;runtime&lt;/em&gt;. Se eu quisesse
gerar uma senha aleatória, por exemplo, bastaria criar um método &lt;code&gt;RandomPassword&lt;/code&gt; e chamá-lo no construtor 
secundário, ou seja, a implementação do construtor Secundário poderia ser reescrita assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;construtores-secundrios-e-mtodo-new&quot;&gt;Construtores Secundários e Método New()&lt;/h2&gt;

&lt;p&gt;O uso do &lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;Método New()&lt;/a&gt; pode ser considerado um substituto de 
construtores Secundários.
Se sua Classe implementa uma ou mais &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interfaces&lt;/a&gt;, não haveria motivos de 
implementar construtores Secundários e Métodos New() com a mesma assinatura.&lt;/p&gt;

&lt;p&gt;Ao invés de criar novos construtores Secundários, basta criar novas variações de Métodos &lt;code&gt;New()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Exemplo.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;TUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assim a implementação de suas Classes ficam ainda mais simples, pois teriam apenas 1 construtor
onde todos os argumentos são inicializados.&lt;/p&gt;

&lt;p&gt;E você, como implementa seus construtores?&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/construtores-da-classe-primario-secundarios/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/construtores-da-classe-primario-secundarios/</guid>
      </item>
    
      <item>
        <title>Objetos pensam e tomam decisões</title>
        <description>&lt;p&gt;Se você &lt;a href=&quot;/posts/pensando-em-objetos/&quot;&gt;Pensar em Objetos&lt;/a&gt; ou invés de pensar em procedimentos e funções
conseguirá implementar um código onde os Objetos conversam entre si ao invés de utilizar Programação Procedural que instrui o 
compilador sobre o que fazer linha-a-linha.&lt;/p&gt;

&lt;p&gt;Não fazemos isso na Orientação a Objetos. Seu Objeto sabe o que fazer. 
Ele não precisa de um “controlador” (você) para lhe dizer o que fazer. Ele sabe.
Ele foi &lt;a href=&quot;/posts/interfaces-em-todo-lugar/#interfaces-sao-contratos&quot;&gt;contratado&lt;/a&gt; pra isso. Deixe-o trabalhar.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1456406644174-8ddd4cd52a06.jpg&quot; alt=&quot;Pense&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pense-em-objetos&quot;&gt;Pense em Objetos, não em procedimentos&lt;/h2&gt;

&lt;p&gt;Um Objeto deve ter uma identidade bem definida.
Sua Classe deve &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;implementar apenas uma responsabilidade&lt;/a&gt;.
Essa responsabilidade é determinada por um &lt;a href=&quot;/posts/interfaces-em-todo-lugar/#interfaces-sao-contratos&quot;&gt;contrato&lt;/a&gt; que 
representa uma possível abstração de alguma Entidade.&lt;/p&gt;

&lt;p&gt;Mas como saber se seu Objeto representa uma Entidade ou se ele é apenas um 
&lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/#objeto-nao-e-um-balde-de-funcoes-e-dados&quot;&gt;balde de funções e dados&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Algumas classes são mais difíceis de perceber enquanto outras são tão claras como a água. Veja:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TDataModule1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TDataModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{ fields, components...}&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddNewCustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddNewUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetCustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetEmployeeSalary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmployeeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{ more...}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O exemplo acima, apesar de ser codificado como uma Classe, ter a sintaxe de uma Classe, se comportar como uma Classe etc, na verdade,
não representa nenhuma abstração de uma Entidade sendo, portanto, um &lt;strong&gt;código procedural&lt;/strong&gt;, ou seja, um 
&lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/#objeto-nao-e-um-balde-de-funcoes-e-dados&quot;&gt;balde de funções e dados&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quando &lt;a href=&quot;/posts/datamodule-e-apenas-um-container/&quot;&gt;postei sobre &lt;em&gt;DataModules&lt;/em&gt;&lt;/a&gt; imaginei que muitos programadores
poderiam não entender — num primeiro momento — meu motivo em dizer que &lt;em&gt;DataModules&lt;/em&gt; são apenas recipientes e que não devem conter regras de negócio
e muito menos serem utilizados como instâncias de &lt;strong&gt;Classes de Negócio&lt;/strong&gt;. Para minha surpresa o post foi muito bem recebido pela maioria dos leitores.&lt;/p&gt;

&lt;p&gt;Acho que o exemplo de código acima deixa bem claro o que eu quis dizer.&lt;/p&gt;

&lt;p&gt;Ora, um &lt;em&gt;DataModule&lt;/em&gt;, na grande maioria das vezes, não representa uma Entidade
por não ter uma identidade bem definida. Após 10 minutos e 5 componentes adicionados, 
ele vira um &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/#objeto-nao-e-um-balde-de-funcoes-e-dados&quot;&gt;balde de funções e dados&lt;/a&gt;, ou seja,
uma Classe utilitária.&lt;/p&gt;

&lt;h2 id=&quot;objetos-pensam-como&quot;&gt;Objetos pensam… como?&lt;/h2&gt;

&lt;p&gt;Você deve fazer com que as decisões de negócio ou sistema devam ser tomadas pelos próprios objetos e não por um “controlador”.&lt;/p&gt;

&lt;p&gt;Vamos inventar um exemplo.&lt;/p&gt;

&lt;p&gt;Imagine um &lt;em&gt;Form&lt;/em&gt; onde temos um &lt;em&gt;TButton&lt;/em&gt; para mostrar ao usuário qual o valor da comissão, neste mês, de um determinado empregado selecionado.
Cada funcionário tem um salário fixo e, talvez, uma comissão que é determinada pelo tipo de registro em seu cadastro. Os tipos 1 e 2 tem um cálculo completamente
diferente e para todos os outros a comissão será de 2%.&lt;/p&gt;

&lt;h3 id=&quot;versao-procedural&quot;&gt;A Versão Procedural:&lt;/h3&gt;

&lt;p&gt;Nessa versão do código tudo é feito num único lugar, no evento do botão.&lt;/p&gt;

&lt;p&gt;É claro que você poderá me dizer como reescrever o código. Dividir em partes. Criar outros “métodos”, etc. Mas o ponto aqui é comparar um Código
Procedural com um Orientado a Objetos de verdade.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Button1Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EmployeeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectedEmployeeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParamByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;salary&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsCurrency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
  
  &lt;span class=&quot;n&quot;&gt;EmployeeType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;etype&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmployeeType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalcCommission1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;{parameters}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalcCommission2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;{parameters}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Total Salary = &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;CurrToStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Quem nunca fez um código parecido com esse em todos esses anos de &lt;em&gt;Object Pascal&lt;/em&gt;? Eu já. Muito mais do que eu gostaria.&lt;/p&gt;

&lt;p&gt;No clique de um único botão:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Utilizei uma &lt;em&gt;query&lt;/em&gt; global;&lt;/li&gt;
  &lt;li&gt;Utilizei 3 variáveis locais;&lt;/li&gt;
  &lt;li&gt;Utilizei 2 funções para cálculo de comissão;&lt;/li&gt;
  &lt;li&gt;Fiz um cálculo de comissão diretamente no código do evento(!)&lt;/li&gt;
  &lt;li&gt;Apresentei o valor calculado ao usuário.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Esse código é Procedural, &lt;strong&gt;muito acoplado&lt;/strong&gt; e impossível de ser utilizado em &lt;em&gt;UnitTests&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Melhor vermos uma outra opção.&lt;/p&gt;

&lt;h3 id=&quot;versao-orientada-a-objetos&quot;&gt;A Versão Orientada a Objetos:&lt;/h3&gt;

&lt;p&gt;Para essa versão, é claro, temos que ter as Interfaces que representam cada Entidade do nosso domínio.
Mesmo um Valor ou Salário &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/&quot;&gt;também são Entidades&lt;/a&gt;!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ICurrencyValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ISalary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICurencyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;IEmployee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{ ... }&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Com as Interfaces definidas, não fica difícil implementar as Classes utilizando o 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;Decorator Design Pattern&lt;/a&gt;,
o mesmo utilizado &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/#implementacao-oo&quot;&gt;aqui&lt;/a&gt;. Mas o código
das Classes são irrelevantes para o entendimento do problema. E é assim mesmo que deve ser! Não precisamos saber o código interno de uma 
Classe para podermos utilizá-la. Apenas a sua Interface é suficiente.&lt;/p&gt;

&lt;p&gt;Então o código do evento no botão fica assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Button1Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;#39;Total Salary = &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;TEmployeeSalaryWithCommission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TEmployeeSalary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;TEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SelectedEmployeeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsString&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mesmo sem o código das Classes — apenas para não “poluir” demais o post — acredito que dá pra entender perfeitamente o que seria implementado:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A classe &lt;em&gt;TEmployee&lt;/em&gt; implementa &lt;em&gt;IEmployee&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;A classe &lt;em&gt;TEmployeeSalary&lt;/em&gt; e &lt;em&gt;TEmployeeSalaryWithCommission&lt;/em&gt; implementam &lt;em&gt;ISalary&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;A classe &lt;em&gt;TEmployeeSalaryWithCommission&lt;/em&gt; é um &lt;em&gt;decorator&lt;/em&gt; para &lt;em&gt;TEmployeeSalary&lt;/em&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Diferentemente do primeiro exemplo, no clique de um único botão:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Instanciei &lt;em&gt;TEmployee&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Instanciei &lt;em&gt;TEmployeeSalary&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Decorei a instancia de &lt;em&gt;TEmployeeSalary&lt;/em&gt; com &lt;em&gt;TEmployeeSalaryWithCommission&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Chamada para &lt;em&gt;Value&lt;/em&gt; — uma instancia de &lt;em&gt;ISalary&lt;/em&gt; — e depois para o método &lt;em&gt;AsString&lt;/em&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Não há condicionais, cálculos ou Regras de Negócio “espalhadas” no código. Apenas objetos “conversando”.&lt;/p&gt;

&lt;p&gt;Claro que uma &lt;em&gt;query&lt;/em&gt; será executada em algum lugar — talvez encapsulado dentro de &lt;em&gt;TEmployee&lt;/em&gt; — assim como os cálculos de comissões terão que 
ser implementados em &lt;em&gt;TEmployeeSalary&lt;/em&gt; ou em algum outro objeto. Mas isso não é mover o problema para outro lugar… não! Isso é encapsular
o problema em objetos e deixá-los trabalhar livremente.&lt;/p&gt;

&lt;p&gt;Nessa versão você não vê as regras, os cálculos. Você, como utilizador dessas Classes, não precisa
pensar em procedimentos e na ordem de chamada entre eles. &lt;strong&gt;Deixe que os Objetos pensem por você.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/objetos-pensam-e-tomam-decisoes/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/objetos-pensam-e-tomam-decisoes/</guid>
      </item>
    
      <item>
        <title>Classes devem Implementar apenas uma Responsabilidade</title>
        <description>&lt;p&gt;O Princípio da Responsabilidade Única (Single Responsibility Principle) afirma que, se tivermos 
mais de uma razão para mudar a implementação de uma Classe, devemos dividir o comportamento em 
duas ou mais Classes.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1445783426434-670f9b34e183.jpg&quot; alt=&quot;Funcionalidades&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;unica-responsabilidade&quot;&gt;Uma única responsabilidade&lt;/h2&gt;

&lt;p&gt;A implementação de uma Classe deve ser o mais Simples possível.
Classes com mais de uma Responsabilidade são Complexas.&lt;/p&gt;

&lt;p&gt;Não confunda Objeto com Classe. Objetos podem ser &lt;strong&gt;Complexos&lt;/strong&gt; e ter mais de uma
Responsabilidade devido ao uso da &lt;strong&gt;Composição e Decoração de Objetos&lt;/strong&gt;, no
entanto as Classes que compõem esses Objetos devem implementar apenas uma única
Responsabilidade.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Uma Classe com apenas uma Responsabilidade é Simples para usar, modificar e reutilizar”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mas como é possível ter Objetos que são mais complexos enquanto suas Classes são simples?&lt;/p&gt;

&lt;p&gt;Bem, vamos implementar um módulo simples de &lt;em&gt;Log&lt;/em&gt; para responder a esta pergunta. 
Primeiro vamos utilizar a &lt;strong&gt;Programação Procedural&lt;/strong&gt; com Classes do tipo “tudo em um” e depois a &lt;strong&gt;Orientada a Objetos&lt;/strong&gt;, 
com Classes simples utilizando &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;Decorator Design Pattern&lt;/a&gt;,
dividindo as funcionalidades em Classes menores e mais reutilizáveis.&lt;/p&gt;

&lt;p&gt;Um sistema hipotético necessita salvar um &lt;em&gt;Log&lt;/em&gt; com tudo o que foi processado.&lt;/p&gt;

&lt;p&gt;Este &lt;em&gt;Log&lt;/em&gt; deverá implementar os requisitos a seguir:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Possibilidade de salvar a informação em Arquivo Texto&lt;/li&gt;
  &lt;li&gt;Possibilidade de salvar a informação em Banco de Dados&lt;/li&gt;
  &lt;li&gt;Possibilidade de enviar o &lt;em&gt;Log&lt;/em&gt; por e-mail&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;implementacao-tradicional&quot;&gt;1-Implementação “Tradicional” e Procedural&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1453560814059-d646dffd32fd.jpg&quot; alt=&quot;Procedural e antiga&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De acordo com os requisitos acima, &lt;strong&gt;parece muito simples&lt;/strong&gt; pensar numa única Classe com “apenas” 4 métodos.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;destructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SaveToDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;implementation&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;destructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveToDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;#39;insert into Log (info) values (:info)&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TSQLParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ftString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SendMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Observações&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Considere &lt;code&gt;DB: IDatabase&lt;/code&gt; como uma instância de uma conexão com o Banco de Dados.&lt;/li&gt;
  &lt;li&gt;Considere &lt;code&gt;FMail.Send(From, FInfo.Text)&lt;/code&gt; uma instrução que envia para um destinatário a informação no corpo do e-mail.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Para utilizar a Classe não há dúvidas. Faz-se uma instância de &lt;code&gt;TLog&lt;/code&gt; para chamar cada método. Seu uso é simples, mas…&lt;/p&gt;

&lt;p&gt;Quais são os problemas dessa implementação?&lt;/p&gt;

&lt;p&gt;Muitos problemas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A Classe é “complexa” demais porque lida com muitas responsabilidades e consequentemente muito mais propensa a alterações e bugs.&lt;/li&gt;
  &lt;li&gt;A classe tem uma instância concreta de &lt;em&gt;TMail&lt;/em&gt;, não sendo possível utilizarmos &lt;em&gt;libs&lt;/em&gt; diferentes para o envio de e-mail.&lt;/li&gt;
  &lt;li&gt;Sua interface possui muitos métodos com contextos diferentes.&lt;/li&gt;
  &lt;li&gt;Cada novo requisito irá gerar um novo método. A Classe não para de crescer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Já vi implementações como a Classe acima, mas também já encontrei outras muito piores.&lt;/p&gt;

&lt;p&gt;Trabalhei num sistema onde existia uma Classe de &lt;em&gt;Log&lt;/em&gt; que tinha +20 métodos! Método para salvar em arquivo e no Banco de Dados; 
gerar XML; enviar por e-mail; excluir arquivos antigos; e muito mais. Era uma grande &lt;strong&gt;Classe Utilitária&lt;/strong&gt; composta somente 
de &lt;a href=&quot;/posts/nao-utilize-metodos-estaticos/&quot;&gt;Métodos Estáticos&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implementacao-oo&quot;&gt;2-Implementação Orientada a Objetos&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1457257495536-67f31bc9773d.jpg&quot; alt=&quot;Orientada a Objetos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;É claro que a &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;primeira coisa a fazer&lt;/a&gt; é definirmos uma abstração para &lt;em&gt;Log&lt;/em&gt;. Precisamos de uma Interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Apenas isso.&lt;/p&gt;

&lt;p&gt;Um &lt;em&gt;Log&lt;/em&gt; precisa registrar a informação, informar e salvar em &lt;strong&gt;algum lugar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora podemos implementar cada Classe, cada uma com uma responsabilidade bem distinta e única.&lt;/p&gt;

&lt;p&gt;Primeiro uma Classe para implementar o &lt;em&gt;Log&lt;/em&gt; apenas em memória — pode ser utilizado em &lt;em&gt;UnitTests&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TLogInMemory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//class function New...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;destructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;implementation&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogInMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;destructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogInMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogInMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogInMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogInMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No método &lt;code&gt;Save&lt;/code&gt; não há nada para registrar pois o &lt;em&gt;Log&lt;/em&gt; só trabalha em memória.&lt;/p&gt;

&lt;p&gt;Teremos outra Classe para fazer o &lt;em&gt;Log&lt;/em&gt; num Arquivo Texto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TLogToFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FFileStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TFileStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//class function New...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;destructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;implementation&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FFileStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TFileStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmOpenWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;destructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FFileStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FFileStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Repare que há um parâmetro &lt;code&gt;Origin&lt;/code&gt;. Isso significa que essa classe
irá gerar Objetos que trabalham “decorando” outros Objetos que se originaram em outro momento.&lt;/p&gt;

&lt;p&gt;Da mesma forma teremos outra Classe para fazer o &lt;em&gt;Log&lt;/em&gt; no Banco de Dados:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TLogToDB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//class function New...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;implementation&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;FDB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;#39;insert into Log (info) values (:info)&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TSQLParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ftString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Observação&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Você pode pensar: Por que &lt;code&gt;TLogToFile&lt;/code&gt; não &lt;strong&gt;herda&lt;/strong&gt; de &lt;code&gt;TLogInMemory&lt;/code&gt; para reaproveitar
o código que trabalha com a instância de &lt;em&gt;FInfo&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Eu poderia, mas não devo. Falarei sobre herança em próximos posts. Por enquanto vamos deixar as coisas simples 
e prosseguir com o exemplo.&lt;/p&gt;

&lt;p&gt;Falta a Classe de &lt;em&gt;Log&lt;/em&gt; que envia e-mails, sem esquecer de Injetar a Dependência de &lt;code&gt;Mail&lt;/code&gt; no &lt;em&gt;construtor&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TLogToMail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;FMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//class function New...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;implementation&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;Mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;FMail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLogToMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cada Classe tem apenas uma única responsabilidade e todas as Classes seguem o &lt;a href=&quot;/posts/interfaces-em-todo-lugar/#interfaces-sao-contratos&quot;&gt;contrato&lt;/a&gt;
de uma única Interface, simples e coesa.&lt;/p&gt;

&lt;p&gt;E agora, e o mais legal! Podemos ter um único Objeto que implementa tudo, mas o código que irá utilizar esse Objeto
ignora completamente sua implementação, ou seja, o código não irá chamar um procedimento específico para salvar a informação em determinado
lugar, como na Implementação Procedural.&lt;/p&gt;

&lt;p&gt;Não entendeu? Vamos lá.&lt;/p&gt;

&lt;p&gt;Por exemplo. Se os requisitos mudarem e seu cliente pedir para gravar o &lt;em&gt;Log&lt;/em&gt; num Arquivo Texto e também no Banco de Dados, o que seria preciso fazer?&lt;/p&gt;

&lt;p&gt;Bem, na implementação Procedural do primeiro exemplo, o programador teria que &lt;ins&gt;criar um novo método&lt;/ins&gt; porque ele não consegue
reutilizar os métodos existentes para fazer algo que seria simples!&lt;/p&gt;

&lt;p&gt;Por que ele não consegue? Repare que em cada método &lt;code&gt;SaveXxx&lt;/code&gt; há uma chamada de &lt;code&gt;FInfo.Clear&lt;/code&gt;. Então ele não pode executar
os métodos assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;/path/file.log&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveToDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Na primeira chamada a informação do &lt;em&gt;Log&lt;/em&gt; será perdida.&lt;/p&gt;

&lt;p&gt;Sei que você pode pensar em inúmeras outras implementações para que isso não aconteça, mas o &lt;strong&gt;fato&lt;/strong&gt; é que você precisa
alterar a Classe para fazer algo que seria simples. Talvez você tenha lido o código da primeira vez e não viu nada de errado. Isso acontece
todo tempo com Classes complexas e muito mais com aquelas que utilizam herança.&lt;/p&gt;

&lt;p&gt;Mas, continuando.&lt;/p&gt;

&lt;p&gt;Então vou escolher uma das possíveis implementações: Adicionar um novo método.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveToFileAndDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SaveToDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;UAU! HORRÍVEL!&lt;/p&gt;

&lt;p&gt;Está claro que essa não é uma solução elegante…&lt;/p&gt;

&lt;p&gt;Esqueçam isso e vamos para a implementação &lt;strong&gt;correta&lt;/strong&gt;, Orientada a Objetos, &lt;strong&gt;simples&lt;/strong&gt; e &lt;strong&gt;reutilizável&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para um novo requisito você não precisa alterar um código que já estava funcionando. Não precisa quebrar nada, nem sobrescrever nada.
Basta criar um &lt;ins&gt;novo Objeto&lt;/ins&gt; que encapsule os Objetos que já sabem fazer o serviço.&lt;/p&gt;

&lt;p&gt;Com apenas uma única Interface e várias implementações, é possível criar um único Objeto que contenha todo tipo de comportamento
referente a &lt;em&gt;Log&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TLogToMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TLogToDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;TLogToFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TLogInMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;First info&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;/path/file.log&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mail&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Second info&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Final info&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Para o código-geral não há diferença se o &lt;em&gt;Log&lt;/em&gt; está sendo gravado num Arquivo, Banco de Dados ou sendo enviado por e-mail.&lt;/p&gt;

&lt;p&gt;Só há uma Interface &lt;em&gt;ILog&lt;/em&gt; com apenas alguns poucos métodos. Cada Classe tem sua própria implementação, simples e limpa.&lt;/p&gt;

&lt;p&gt;No fim temos uma única instância de um Objeto mais Complexo que é capaz de fazer todo o tipo de &lt;em&gt;Log&lt;/em&gt;, mas sua Interface
não cresce junto com os requisitos.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/classes-devem-implementar-apenas-uma-responsabilidade/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/classes-devem-implementar-apenas-uma-responsabilidade/</guid>
      </item>
    
      <item>
        <title>Objetos devem representar Entidades reais</title>
        <description>&lt;p&gt;Tudo que existe fora do Contexto do software é uma Entidade que existe na vida 
real e deve ser representada por um Objeto dentro do programa.&lt;/p&gt;

&lt;p&gt;Defina Classes que implementem abstrações de Entidades reais.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/matrix20.jpg&quot; alt=&quot;Matrix®&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    &quot;O que é real? Como você define o &#39;real&#39;? Se você está falando
    sobre o que você pode sentir, o que você pode cheirar, o que você
    pode saborear e ver, o real são simplesmente sinais elétricos
    interpretados pelo seu cérebro&quot;
  &lt;/p&gt;
  &lt;footer&gt;&lt;cite title=&quot;Morpheus, Matrix&quot;&gt;— Morpheus, Matrix&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;o-que-e-uma-entidade&quot;&gt;O que é uma Entidade?&lt;/h2&gt;

&lt;p&gt;Não pense em Entidade somente como criaturas vivas ou objetos palpáveis ao nosso redor. Um
arquivo de computador, um pixel no monitor, um carro, uma pessoa, uma molécula… tudo
que existe fora do &lt;strong&gt;Contexto do Software&lt;/strong&gt; é uma Entidade que existe na vida real.&lt;/p&gt;

&lt;p&gt;No código uma Entidade é &lt;strong&gt;representada ou abstraída&lt;/strong&gt; por Interfaces e implementada por Classes. Sim, no plural.&lt;/p&gt;

&lt;p&gt;Uma única Interface pode ser suficiente para abstrair uma Entidade, mas há muitos casos que uma mesma 
Entidade pode ter dezenas de Interfaces representando-a em dezenas de Contextos diferentes. Ainda mais comum
é termos dezenas de Classes que implementam uma única Interface.&lt;/p&gt;

&lt;p&gt;Gostaria de ver um simples exemplo? Vamos lá.&lt;/p&gt;

&lt;p&gt;Bem, imagine um sistema que tem a Entidade Cliente.&lt;/p&gt;

&lt;p&gt;Nesse &lt;strong&gt;simples&lt;/strong&gt; sistema eu preciso saber:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Seus dados pessoais básicos;&lt;/li&gt;
  &lt;li&gt;Seu endereço;&lt;/li&gt;
  &lt;li&gt;Seu &lt;em&gt;status&lt;/em&gt; (ativo, cancelado ou suspenso);&lt;/li&gt;
  &lt;li&gt;Seu Cartão de Crédito;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Como implementar Cliente?&lt;/p&gt;

&lt;h3 id=&quot;exemplo-1-clssica-implementao-tudo-em-um&quot;&gt;Exemplo 1: Clássica implementação “Tudo em um”&lt;/h3&gt;

&lt;p&gt;A maioria das pessoas iriam definir &lt;strong&gt;todos&lt;/strong&gt; os campos (atributos) 
em uma única Classe, mais ou menos assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TCustomer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FBirthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FCreditCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCreditCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;destructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FName&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;Birthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TDateTime&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FBirthday&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FBirthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FEmail&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAddress&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStatus&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FStatus&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;CreditCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCreditCard&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FCreditCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Num sistema real de médio ou grande porte sabemos que um
Cliente poderia ter muitos outros atributos, certo? Essa Classe iria crescer e crescer…&lt;/p&gt;

&lt;p&gt;O que há de “errado”?&lt;/p&gt;

&lt;p&gt;A resposta simples é: A Classe é &lt;strong&gt;complexa&lt;/strong&gt; demais.&lt;/p&gt;

&lt;p&gt;Nesta implementação, a Classe expõe publicamente 4 atributos – lembre-se que poderia ser muito mais! – que não faz parte
da &lt;strong&gt;abstração mais simples&lt;/strong&gt; de um Cliente.&lt;/p&gt;

&lt;p&gt;Não concorda? Não achou complexo?&lt;/p&gt;

&lt;p&gt;Acho que faltou definir o que é um Cliente:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Um Cliente representa uma pessoa para qual vendemos serviços/produtos através do nosso site”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Por definição geral todo cliente tem um Nome e, talvez, ele queira nos dizer sua data de nascimento.
Mas não citei &lt;em&gt;Email&lt;/em&gt;, &lt;em&gt;Address&lt;/em&gt;, &lt;em&gt;Status&lt;/em&gt; ou &lt;em&gt;CreditCard&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Não adianta implementar uma Interface &lt;em&gt;ICustomer&lt;/em&gt; nessa Classe e dizer que está programando 
Orientado a Objetos. Uma Interface que cresce a cada novo requisito não é uma Interface muito útil.&lt;/p&gt;

&lt;p&gt;Essa Classe foi definida pensando mais nas tabelas – que
porventura esse sistema venha a ter – do que na real abstração de um Cliente.&lt;/p&gt;

&lt;p&gt;Será que todo Cliente é igual, em todos os sistemas? Tenho certeza que não.&lt;/p&gt;

&lt;p&gt;Então como reutilizamos essa Classe?
Não reutilizamos. Ela foi &lt;strong&gt;codificada rigidamente&lt;/strong&gt;, utilizando atributos e conceitos para apenas 1 sistema e mesmo assim, 
está errada!&lt;/p&gt;

&lt;p&gt;Errada?!&lt;/p&gt;

&lt;p&gt;Bem… respire por um momento.&lt;/p&gt;

&lt;p&gt;Espero que você já tenha lido meus outros posts. Espero que você já tenha entendido que quando digo ERRADO ou CERTO é porque 
eu quero que você raciocine porque estou dizendo isso.&lt;/p&gt;

&lt;p&gt;Não há CERTO ou ERRADO &lt;strong&gt;absolutamente&lt;/strong&gt; na programação. Orientação a Objetos não é uma ciência exata – na verdade programação, 
seja qual for o tipo, não é uma ciência exata. Mas temos nossas convicções, nossa experiência, o que deu certo ou errado no passado…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/e3c71ca4993ce03a8e48256fcfa3343b.jpg&quot; alt=&quot;Free your mind&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quando estou afirmando alguma coisa, gostaria que você deixasse de lado, por um momento, suas convicções pessoais mantendo sua mente aberta,
para tentar entender meus motivos de escrever tais afirmações.&lt;/p&gt;

&lt;p&gt;Eu estou lhe mostrando uma porta, mas só você poderá abrí-la.&lt;/p&gt;

&lt;h3 id=&quot;exemplo-2-pensamento-objeto&quot;&gt;Exemplo 2: Pensamento Objeto&lt;/h3&gt;

&lt;p&gt;Pense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contexto #1:&lt;/strong&gt;
Você quer fazer uma assinatura online de uma revista “Object Pascal Programming”. Precisa preencher um cadastro contendo
seus dados pessoais, seu endereço, além do seu cartão de crédito.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contexto #2:&lt;/strong&gt;
O setor financeiro do site no qual você fez a assinatura precisa saber se o seu cartão de crédito é válido.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contexto #3:&lt;/strong&gt;
O setor de &lt;em&gt;marketing&lt;/em&gt; precisa enviar, por e-mail, qual serão as próximas matérias da próxima edição.&lt;/p&gt;

&lt;p&gt;Percebeu que cada contexto necessita de informações distintas?&lt;/p&gt;

&lt;p&gt;No Contexto #1 é necessário o Endereço e Cartão de Crédito. No #2 somente o cartão é necessário. No #3 o e-mail e
o &lt;em&gt;Status&lt;/em&gt; são necessários para enviar e-mails somente aos clientes ativos.&lt;/p&gt;

&lt;p&gt;Então temos, de uma forma bem sucinta, a definição das Interfaces:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ICustomer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Birthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;IEmail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;IAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;IStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;ICreditCard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExpiresIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Abaixo as possíveis implementações para cada contexto relacionado com Cliente:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Contexto #1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;TCustomer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{...}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;TCustomerAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{...}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Contexto #1 e #2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TCustomerCreditCard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICreditCard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{...}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;// Contexto #3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TCustomerStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{...}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Então se queremos saber o cartão de crédito de um determinado Cliente, basta codificar:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TCustomerCreditCard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;TCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dica: Veja mais sobre o &lt;strong&gt;Método New&lt;/strong&gt; &lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No Exemplo #2 eu tenho:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Possível &lt;strong&gt;reutilização de código&lt;/strong&gt; em vários sistemas;&lt;/li&gt;
  &lt;li&gt;Interfaces e Classes &lt;strong&gt;pequenas, simples e coesas&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Manutenção fácil&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Interfaces e Implementações para cada Entidade distinta.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Se você ainda está pensando:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Escreve demais&lt;/li&gt;
  &lt;li&gt;É mais complexo que o primeiro exemplo&lt;/li&gt;
  &lt;li&gt;Dá mais trabalho&lt;/li&gt;
  &lt;li&gt;[Escolha sua desculpa]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bem… sugiro pensar novamente.&lt;/p&gt;

&lt;p&gt;Você tem que &lt;a href=&quot;/posts/pensando-em-objetos/&quot;&gt;pensar em Objetos&lt;/a&gt;. Tem que pensar no longo prazo. Tem que pensar na manutenção. Tem que pensar na
verdadeira reutilização de código. Tem que pensar em Contextos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Se você vai a praia, não precisa levar um comprovante de endereço de sua residência com você;&lt;/li&gt;
  &lt;li&gt;Se você vai ao mercado, precisa levar dinhero ou cartão, caso queira levar alguma coisa de lá;&lt;/li&gt;
  &lt;li&gt;Se você vai ao trabalho precisa ter algum cartão que o identifique – na maioria dos casos;&lt;/li&gt;
  &lt;li&gt;Se está em casa, preparando um jantar romântico para você e sua esposa, vocês só precisam de si mesmos;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;São &lt;strong&gt;contextos diferentes&lt;/strong&gt; de você mesmo!&lt;/p&gt;

&lt;p&gt;Você não precisa de tudo que é relacionado com você em todos os momentos, em todos os contextos. Assim são com os Objetos.&lt;/p&gt;

&lt;p&gt;Aplique essa “regra” para não ter Classes gigantescas em seu código, crescendo a cada dia.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Cada Entidade deverá ter uma Interface ou Interfaces que a definiam, assim como poderá ter várias implementações.&lt;/p&gt;

&lt;p&gt;Cada Objeto deverá representar uma Entidade num determinado momento para um determinado Contexto.&lt;/p&gt;

&lt;p&gt;Esse é o segredo de um bom código Orientado a Objetos. Mantenha suas Interfaces e Classes pequenas, coesas e simples.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/objetos-representam-entidades/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/objetos-representam-entidades/</guid>
      </item>
    
  </channel>
</rss>
