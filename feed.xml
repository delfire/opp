<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Pascal Programming</title>
    <description>Sacadas sobre Programação Orientada a Objetos e Object Pascal.
</description>
    <link>http://objectpascalprogramming.com/</link>
    <atom:link href="http://objectpascalprogramming.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Nomeando Unidades</title>
        <description>&lt;p&gt;Acredito que todos os nomes de Unidades em um Projeto &lt;em&gt;Object Pascal&lt;/em&gt;, quiça em qualquer outra linguagem, deveriam ser hierárquicos do mais genérico para o mais específico.&lt;/p&gt;

&lt;p&gt;Neste artigo irei escrever sobre a lógica em utilizar uma nomenclatura hieraquizada para deixar seu projeto mais coeso e elegante.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1434030216411-0b793f4b4173.jpg&quot; alt=&quot;Imagem&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Foi-se o tempo quando programávamos utilizando nomes de Unidades como: &lt;code&gt;uUtils&lt;/code&gt;, &lt;code&gt;uPerson&lt;/code&gt;, &lt;code&gt;frmClient&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Em projetos pequenos tais nomes de Unidades ainda são utilizados (será?), mas essa nomenclatura não é nada profissional.&lt;/p&gt;

&lt;p&gt;Por quê?&lt;/p&gt;

&lt;p&gt;O motivo é que uma Unidade deve encapsular um Contexto &lt;strong&gt;bem definido&lt;/strong&gt;. Um Contexto pode ser genérico ou ser uma especialização.&lt;/p&gt;

&lt;p&gt;Um nome de Unidade como esses acima não transmitem um Contexto bem definido.&lt;/p&gt;

&lt;p&gt;Para que a idéia de Contexto fique clara, uma Unidade deve ter um nome sem ambiguidades.&lt;/p&gt;

&lt;p&gt;Veja esse exemplo de nomes de Unidades:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;frmClient&lt;/li&gt;
  &lt;li&gt;AcmeClientEditForm&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Qual dos nomes é mais claro, passando imediatamente a ideia do que essa Unidade faz?&lt;/p&gt;

&lt;p&gt;O item #2, é claro.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;Acme&lt;/code&gt; é o nome do Projeto ou nome da Empresa.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Client&lt;/code&gt; é o Contexto mais genérico.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Edit&lt;/code&gt; é o Contexto mais específico.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Form&lt;/code&gt; determina hierarquia da Classe ou o seu propósito.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A medida que um projeto cresce e novas Unidades são inseridas, colisões de nomes podem ocorrer. Ter bons nomes de Unidades no projeto fará muita diferença no longo prazo. Será mais fácil determinar o impacto de alguma alteração apenas olhando a hierarquia no nome da Unidade.&lt;/p&gt;

&lt;p&gt;Mas existem regras ou dicas para escolhermos bons nomes de Unidades?&lt;/p&gt;

&lt;p&gt;É o que iremos ver a seguir.&lt;/p&gt;

&lt;h2 id=&quot;regra-1-prefixos&quot;&gt;Regra 1: Prefixos&lt;/h2&gt;

&lt;p&gt;Um nome de Unidade hieraquizado nada mais é do que utilizar &lt;strong&gt;prefixos&lt;/strong&gt;. A cada prefixo adicionado, damos o nome de Contexto. O nome para cada Contexto ou prefixo utilizado vai depender de cada projeto.&lt;/p&gt;

&lt;p&gt;Um Contexto pode identificar uma tecnologia, protocolo, setor da empresa, entidade ou até mesmo um outro sistema.&lt;/p&gt;

&lt;p&gt;Para sistemas comerciais, o próprio usuário irá lhe dar os nomes desses Contextos. Os nomes dos setores na empresa serão o ponto de partida.&lt;/p&gt;

&lt;h2 id=&quot;regra-2-nome-do-projeto-ou-empresa&quot;&gt;Regra 2: Nome do Projeto ou Empresa&lt;/h2&gt;

&lt;p&gt;Toda Unidade deve ser precedida com o nome do Projeto ou nome da Empresa.&lt;/p&gt;

&lt;p&gt;Se teus projetos são feitos somente dentro de tua empresa para seu próprios clientes, basta utilizar o nome do Projeto como prefixo para todas as Unidades.&lt;/p&gt;

&lt;p&gt;Caso sua empresa faça &lt;em&gt;frameworks&lt;/em&gt; ou projetos OpenSource, ou seja, se o projeto terá um contexto mais global, é uma boa ideia utilizar o nome da Empresa como prefixo.&lt;/p&gt;

&lt;p&gt;Qual dos dois será utilizado dependerá do propósito geral do Projeto.&lt;/p&gt;

&lt;h2 id=&quot;regra-3-generico-para-especializado&quot;&gt;Regra 3: Genérico para o mais Especializado&lt;/h2&gt;

&lt;p&gt;O nome de uma Unidade deve ser hierarquizado do mais genérico para o mais especializado.&lt;/p&gt;

&lt;p&gt;No artigo sobre &lt;a href=&quot;/posts/nomeando-classes/&quot;&gt;Nomenclatura de Classes&lt;/a&gt; eu lhes dei um exemplo de nomenclatura (errada) para uma hipotética Classe do meu &lt;a href=&quot;https://github.com/mdbs99/aws&quot;&gt;Projeto AWS&lt;/a&gt; que foi &lt;code&gt;TAWSNetHTTPClient&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O nome de uma Classe não deve ser uma hierarquia.&lt;/p&gt;

&lt;p&gt;Classes nem deveriam fazer parte de uma &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;hieraquia de herança&lt;/a&gt; na maioria das vezes.&lt;/p&gt;

&lt;p&gt;A hierarquia deve estar no nome da Unidade.&lt;/p&gt;

&lt;p&gt;Então como ficariam os nomes, da Classe e da Unidade, considerando o exemplo acima?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unidade: AWSNetHttpClient&lt;/li&gt;
  &lt;li&gt;Classe: THttpClient&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O &lt;code&gt;Http&lt;/code&gt; se repete no nome da Classe. O motivo é porque o nome da Classe deve ser constituído de &lt;strong&gt;Contexto + Nome&lt;/strong&gt;, conforme já explicado &lt;a href=&quot;/posts/nomeando-classes/&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Outros exemplos de bons nomes para Unidades:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AcmeData&lt;/li&gt;
  &lt;li&gt;AcmeDataXml&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AcmeDataJson&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;AcmeReport&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AcmeReportRBuilder&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;AcmeWeb&lt;/li&gt;
  &lt;li&gt;AcmeWebHttp&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AcmeWebFtp&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;AcmeFinances&lt;/li&gt;
  &lt;li&gt;AcmeFinancesClient&lt;/li&gt;
  &lt;li&gt;AcmeFinancesClientReports&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;regra-4-interfaces-e-classes&quot;&gt;Regra 4: Interfaces numa Unidade, Classes noutra&lt;/h2&gt;

&lt;p&gt;Toda Classe deveria &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;implementar ao menos uma Interface&lt;/a&gt; e todo o Projeto deveria trabalhar com variáveis e argumentos do tipo Interface. Dessa forma um argumento poderia receber qualquer instância de Classe que implementa o tipo da Interface.&lt;/p&gt;

&lt;p&gt;Então temos que definir as Interfaces numa Unidade e suas implementações &lt;em&gt;default&lt;/em&gt; em outra Unidade. Caso o programador queira codificar sua própria implementação da Interface, ele só precisa adicionar no &lt;em&gt;uses&lt;/em&gt; apenas a Unidade que contém as Interfaces.&lt;/p&gt;

&lt;p&gt;Como nomear ambas as Unidades?&lt;/p&gt;

&lt;p&gt;Bem, eu utilizo uma nomenclatura que a princípio você não verá muita lógica, mas ficou como um costume pra mim. Talvez você pense numa nomenclatura melhor e nos diga na área de comentários.&lt;/p&gt;

&lt;p&gt;Vamos lá. Para Unidades sobre Finanças, por exemplo, eu teria o seguinte:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unidade das Interfaces: AcmeFinances&lt;/li&gt;
  &lt;li&gt;Unidade das Classes: AcmeFinancesA&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Isso aí. Apenas a letra &lt;code&gt;A&lt;/code&gt; como sufixo.&lt;/p&gt;

&lt;p&gt;O motivo é que as Unidades são exibidas em ordem alfabética, então a Unidade de Interfaces virá antes da Unidade de Classes.&lt;/p&gt;

&lt;p&gt;Caso eu tenha outro sub prefixo que também começe com &lt;code&gt;A&lt;/code&gt;, exemplo &lt;code&gt;AcmeFinancesAction&lt;/code&gt;, ainda assim a ordem visual seria mantida, do mais genérico para o mais especializado.&lt;/p&gt;

&lt;h2 id=&quot;regra-5-unidade-especializada&quot;&gt;Regra 5: Uma Unidade especializada utiliza a mais genérica, nunca o contrário&lt;/h2&gt;

&lt;p&gt;Essa regra é clara, mas sempre é bom lembrar que uma Unidade genérica &lt;strong&gt;nunca&lt;/strong&gt; poderá ter um &lt;em&gt;uses&lt;/em&gt; para uma mais especializada dentro da mesma hierarquia.&lt;/p&gt;

&lt;p&gt;Veja o esquema abaixo:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;AcmeFinances&lt;/li&gt;
  &lt;li&gt;AcmeFinancesClient » uses AcmeFinances&lt;/li&gt;
  &lt;li&gt;AcmeFinancesClientReports » uses AcmeFinancesClient&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;regra-6-unidade-nao-pertence-ao-projeto&quot;&gt;Regra 6: Se uma Unidade está sendo utilizada em muitas outras hierarquias, ela não pertence ao Projeto&lt;/h2&gt;

&lt;p&gt;Se uma Unidade ou um pequeno conjunto delas, sempre aparecem no &lt;em&gt;uses&lt;/em&gt; de várias hierarquias diferentes, isso pode indicar que essa(s) Unidade(s) não fazem parte do &lt;em&gt;core&lt;/em&gt; do projeto devem ser refatoradas/extraídas para outro projeto ou &lt;em&gt;package&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se essas Unidades podem ser reaproveitadas em outros projetos por serem muito genéricas, é também outro grande indício para refatorar e extraí-las do projeto.&lt;/p&gt;

&lt;h2 id=&quot;bnus&quot;&gt;Bônus&lt;/h2&gt;

&lt;h3 id=&quot;unidades-pontilhadas&quot;&gt;Nomes de Unidades Pontilhadas&lt;/h3&gt;

&lt;p&gt;Hoje e dia o Delphi e FreePascal/Lazarus tem suporte para “Nomes de Unidades Pontilhadas”, ou seja, podemos nomear uma Unidade utilizando pontos que separam contextos. No Java sempre foi assim e o .NET fez igual.&lt;/p&gt;

&lt;p&gt;E em que isso muda as regras acima?&lt;/p&gt;

&lt;p&gt;Nada.&lt;/p&gt;

&lt;p&gt;Sem considerar os pontos, não há nenhuma diferença técnica ou de utilização para utilizar &lt;code&gt;Acme.Finances.Client.Reports&lt;/code&gt; ao invés de &lt;code&gt;AcmeFinancesClientReports&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A “vantagem” em utilizar “Nomes de Unidades Pontilhadas”, na minha opinião, é apenas visual.&lt;/p&gt;

&lt;p&gt;Veja um exemplo:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;AcmeWebHTTPClient&lt;/li&gt;
  &lt;li&gt;Acme.Web.HTTP.Client&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A opção #2 é mais &lt;em&gt;clean&lt;/em&gt; que a opção #1 devido ao Contexto &lt;code&gt;HTTP&lt;/code&gt; ter sido escrito em maiúsculo.&lt;/p&gt;

&lt;p&gt;Obs.: Já ouvi falar que o compilador do Delphi atualmente tem parâmetros que podem selecionar um &lt;em&gt;namespace&lt;/em&gt; específico para compilar Unidades específicas e isso pode ter haver com esse tipo de nomenclatura que utiliza pontos. Caso você saiba mais sobre isso, porfavor deixei seu comentário.&lt;/p&gt;

&lt;h3 id=&quot;abreviacoes-maiusculas&quot;&gt;Abreviações em Pascal-case ou tudo em maiúsculas&lt;/h3&gt;

&lt;p&gt;Qual nomenclatura utilizar para abreviações, por exemplo, &lt;code&gt;HTTP&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Sendo &lt;code&gt;HTTP&lt;/code&gt; uma abreviação de &lt;em&gt;Hypertext Transfer Protocol&lt;/em&gt;, o mais correto na escrita seria &lt;code&gt;HTTP&lt;/code&gt; e não &lt;code&gt;Http&lt;/code&gt;. Mas visualmente, quando uma abreviação faz parte do nome de uma Classe, fica mais elegante ou mais fácil de ler utilizando Pascal-case.&lt;/p&gt;

&lt;p&gt;Teoricamente &lt;code&gt;THttpClient&lt;/code&gt; é mais fácil de ler do que &lt;code&gt;THTTPClient&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mas nesse quesito eu mesmo ainda não tomei uma decisão. Algumas vezes eu utilizo tudo em maiúsculo, outras vezes em Pascal-case. Ainda tenho um conflito interior entre o “certo na escrita” vs. “visual elegante”.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Escolher bons nomes para Unidades, Classes, Interfaces e métodos sempre será uma arte. Não existe o &lt;strong&gt;certo absoluto&lt;/strong&gt;. Cada projeto nos dará seus requisitos e os nomes irão aparecer.&lt;/p&gt;

&lt;p&gt;Essas Regras podem ajudar, mas cabe ao arquiteto ter bom senso, conhecer bem o domínio e pensar bem antes de nomear suas Unidades.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/nomeando-unidades/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/nomeando-unidades/</guid>
      </item>
    
      <item>
        <title>Assinatura Digital em Arquivos XML</title>
        <description>&lt;p&gt;A Assinatura Digital é cada vez mais utilizada devido a segurança de integridade que ela proporciona.
Nesse artigo vou demostrar como Assinar Digitalmente um arquivo XML utilizando o &lt;em&gt;framework&lt;/em&gt; ACBr.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1430760903787-4d91bbf15384.jpg&quot; alt=&quot;Imagem&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;A Assinatura Digital nos dá mais segurança no envio de arquivos entre servidores, utilizando WebServices e/ou Serviços REST.&lt;/p&gt;

&lt;p&gt;No mundo Java e .NET tem-se muitos &lt;em&gt;frameworks&lt;/em&gt; para trabalhar com Assinatura Digital… mas e em &lt;em&gt;Object Pascal&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Eu conhecia o &lt;a href=&quot;http://www.projetoacbr.com.br/&quot;&gt;Projeto ACBr&lt;/a&gt; a muito tempo. Eu utilizei esse projeto, anos atrás, para fazer a integração de NF-e para um cliente que, na época, utilizava Delphi 6.&lt;/p&gt;

&lt;p&gt;A integração foi feita em apenas 1 semana — conte com as madrugadas — e tudo funcionou perfeitamente.&lt;/p&gt;

&lt;p&gt;Anos se passaram e eu não tive mais projetos que envolvessem NF-e e/ou Assinatura Digital. Pelo menos não que eu mesmo tivesse que implementá-los.&lt;/p&gt;

&lt;p&gt;Este ano eu tenho um Novo Projeto.&lt;/p&gt;

&lt;p&gt;Nesse projeto tenho que utilizar Assinatura Digital em arquivos XML. Não são Notas Fiscais Eletrônicas (NF-e). São arquivos XML que precisam ser assinados antes do envio e verificados na outra ponta. A segurança é levado muito a sério nesse projeto.&lt;/p&gt;

&lt;p&gt;Lembrei do Projeto ACBr, é claro.&lt;/p&gt;

&lt;h2 id=&quot;utilizando-acbr&quot;&gt;Utilizando o ACBr&lt;/h2&gt;

&lt;p&gt;O ACBr trabalha com dois tipos de Assinadores: CAPICOM (Microsoft) e OpenSSL (OpenSource e crossplataforma).&lt;/p&gt;

&lt;p&gt;Meu cliente só utiliza Windows, então eu escolhi a opção mais óbvia.&lt;/p&gt;

&lt;p&gt;O ACBr compila em Delphi e FreePascal perfeitamente.&lt;/p&gt;

&lt;p&gt;Para instalar no Delphi é mais fácil. O projeto dispõe de um Instalador &lt;em&gt;next-next-finish&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para instalar no FreePascal eu não sei se é o mesmo instalador. O que fiz foi instalar os pacotes manualmente, pela IDE do Lazarus.&lt;/p&gt;

&lt;p&gt;Então fiz um programa simples para assinar um XML e tentar validar o resultado em um dos WebServices do cliente.&lt;/p&gt;

&lt;p&gt;Precisei criar o XML Template, que é o XML que tenho que enviar ao WebService:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;iso-8859-1&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Principal&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Solicitacao&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;Parametros&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Codigo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Todos&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/Solicitacao&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Assinatura&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Signature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;SignedInfo&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;CanonicalizationMethod&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Algorithm=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;SignatureMethod&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Algorithm=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Reference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;URI=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#123&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;Transforms&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Transform&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Algorithm=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Transform&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Algorithm=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Transforms&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;DigestMethod&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Algorithm=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#sha1&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;DigestValue&amp;gt;&amp;lt;/DigestValue&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Reference&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/SignedInfo&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;SignatureValue/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Signature&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Assinatura&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Principal&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Veja que já existe os nós da assinatura (Signature), mas estão em branco ou incompletos. Esse é o template que o ACBr irá utilizar para realmente assinar e gerar um novo XML.&lt;/p&gt;

&lt;p&gt;Então codifiquei um pequeno programa em Object Pascal para fazer os testes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TMainForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Assinar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDFeSSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDFeSSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSLLib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libCapicom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SelecionarCertificado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// carrega o XML de template&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LoadFromFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;template.xml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// obtém o XML assinado no Text do StringList&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;iso-8859-1&amp;quot;?&amp;gt;&amp;#39;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assinar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Assinatura&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// salva o XML em disco&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;assinado.xml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A tela para escolher o certificado — previamente instalado no computador — aparece e o usuário, que pode selecionar qual ele deseja.&lt;/p&gt;

&lt;p&gt;O XML é assinado (&lt;em&gt;node&lt;/em&gt; Assinatura) e tudo parece perfeito… mas o WebService do cliente não valida a Assinatura.&lt;/p&gt;

&lt;p&gt;Algo estava errado.&lt;/p&gt;

&lt;h1 id=&quot;solucao&quot;&gt;Solução&lt;/h1&gt;

&lt;p&gt;Após ajuda do pessoal do ACBr e amigos, chegamos a conclusão que os espaços em branco no Template eram o problema.&lt;/p&gt;

&lt;p&gt;Modifiquei o projeto de teste, intruduzindo algumas linhas de código para retirar os espaços e quebras de linha. Funcionou.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TMainForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Assinar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDFeSSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnsiString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDFeSSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSLLib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libCapicom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SelecionarCertificado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// carrega o XML de template&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LoadFromFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;template.xml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// retira dos os espaços em braco e quebras de linha&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;StringReplace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;StringReplace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;#13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfReplaceAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;sc&quot;&gt;#10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfReplaceAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// obtém o XML assinado no Text do StringList&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;iso-8859-1&amp;quot;?&amp;gt;&amp;#39;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assinar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Assinatura&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// salva o XML em disco&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;assinado.xml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O Projeto ACBr me ajudou bastante me poupando muito tempo de desenvolvimento.&lt;/p&gt;

&lt;p&gt;Há alguns detalhes que não mencionei. Foram necessários pequenas modificações no código do ACBr devido a alguns &lt;em&gt;nodes&lt;/em&gt; customizados que eu precisa fazer no XML mas que o ACBr original não suportava. Essas modificações foram enviadas aos programadores do ACBr.&lt;/p&gt;

&lt;p&gt;É isso.&lt;/p&gt;

&lt;p&gt;Agradeço a todos os desenvolvedores e amigos que ajudaram na solução.&lt;/p&gt;

&lt;p&gt;Obrigado e até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/assinatura-digital-em-arquivos-xml/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/assinatura-digital-em-arquivos-xml/</guid>
      </item>
    
      <item>
        <title>Objetos Imutáveis</title>
        <description>&lt;p&gt;Objetos Imutáveis são seguros, são &lt;em&gt;thread-safe&lt;/em&gt;, simples de entender, construir e testar. Evitam acoplamento temporal, previnem a referencia nil/NULL e não precisam utilizar “cópia defensiva”.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1448357019934-caa4696bb949.jpg&quot; alt=&quot;Imagem&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Um &lt;a href=&quot;https://en.wikipedia.org/wiki/Immutable_object&quot;&gt;Objeto Imutável&lt;/a&gt; é uma instância que, após inicializada através do 
&lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtor&lt;/a&gt; 
de sua Classe, nunca terá seu Estado alterado para o mundo exterior até o fim de sua vida.&lt;/p&gt;

&lt;p&gt;Se você está lendo isso pela primeira vez talvez não consiga visualizar os benefícios das &lt;strong&gt;restrições&lt;/strong&gt; que a Imutabilidade traz ao Desenvolvimento de Software.&lt;/p&gt;

&lt;p&gt;Sim, restrições, e isso é ótimo.&lt;/p&gt;

&lt;blockquote&gt;
  Objetos Imutáveis são livres de efeitos colaterais externos. Eles são criados representando um momento específico no tempo e devem permanecer inalterados até a sua morte.
  &lt;footer&gt;&lt;cite title=&quot;eBook OPP&quot;&gt;eBook — @ObjectPascalProgramming&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Imutabilidade irá lhe ajudar a &lt;strong&gt;codificar melhor&lt;/strong&gt;, muito melhor, devido as restrições impostas.&lt;/p&gt;

&lt;p&gt;Você terá que pensar cuidadosamente em suas Classes, porque elas existem, qual o real trabalho delas… Seus Objetos serão imutáveis então você não poderá alterar o comportamento deles em &lt;em&gt;runtime&lt;/em&gt; utilizando 
&lt;a href=&quot;/posts/getters-e-setters/&quot;&gt;&lt;em&gt;Setters&lt;/em&gt;&lt;/a&gt;. Consequentemente cada Objeto deverá ter uma &lt;strong&gt;construção simples&lt;/strong&gt; e fazer apenas um único trabalho. Os argumentos desse trabalho só poderão ser informados no construtor e ninguém quer um construtor complexo com 10 parâmetros, certo?&lt;/p&gt;

&lt;p&gt;Por causa da Imutabilidade você será obrigado a fazer as Classes com poucos métodos e poucos argumentos no construtor.&lt;/p&gt;

&lt;p&gt;Imutabilidade nos faz ter &lt;strong&gt;disciplina&lt;/strong&gt; para codificar.&lt;/p&gt;

&lt;h2 id=&quot;vantagens-da-imutabilidade&quot;&gt;Vantagens da Imutabilidade&lt;/h2&gt;

&lt;p&gt;Restrições são ótimas para o código. Restrições, limites, condições… tudo isso traz ordem, clareza e entendimento.&lt;/p&gt;

&lt;p&gt;Se você restringir, terá menos coisas para se preocupar, cuidar, modificar e testar.&lt;/p&gt;

&lt;p&gt;Além da disciplina, vejamos algumas outras vantagens em utilizarmos a Imutabilidade.&lt;/p&gt;

&lt;h3 id=&quot;seguranca&quot;&gt;1-Segurança&lt;/h3&gt;

&lt;p&gt;Objetos Imutáveis são seguros. Se o construtor de uma Classe retornar para o seu programa uma instância de um Objeto Imutável, significa que essa instância é segura para usar. Tudo o que deveria ter sido inicializado nessa instância que dependia do mundo externo, já foi verificado e satisfeito. Não é necessário utilizar nenhum outro &lt;code&gt;Setter&lt;/code&gt;. Não há mais dependências externas. Tudo está pronto. Nada poderá ser quebrado.&lt;/p&gt;

&lt;h3 id=&quot;thread-safe&quot;&gt;2-&lt;em&gt;Thread-safe&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Objetos Imutáveis são &lt;em&gt;thread-safe&lt;/em&gt; por definição. Se seu estado não modifica, seu Objeto pode ser compartilhado por mais de uma &lt;em&gt;thread&lt;/em&gt;, ao mesmo tempo, sem necessidade de sincronismos. Isso nos traz performance. Não há necessidade de &lt;em&gt;lock&lt;/em&gt; nas threads. A informação irá fluir com segurança e rapidez.&lt;/p&gt;

&lt;h3 id=&quot;entender-construir-testar&quot;&gt;3-Simples de Entender, Construir e Testar&lt;/h3&gt;

&lt;p&gt;Objetos Imutáveis só recebem seus argumentos no construtor da Classe. Não queremos 10 ou mais argumentos para iniciar um Objeto. No máximo deveríamos utilizar 5 argumentos — é a regra que tento seguir.&lt;/p&gt;

&lt;p&gt;Se uma Classe não tem modificadores externos e os construtores tem apenas 5 ou menos argumentos, então o Objeto será:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Simples de entender porque terá menos código para ler (toda a dependência externa estará apenas no construtor);&lt;/li&gt;
  &lt;li&gt;Fácil de construir por possuir poucos argumentos (lembre-se: 5 no máximo);&lt;/li&gt;
  &lt;li&gt;Fácil de testar porque o único ponto de variação do comportamento são os argumentos (trate-os em Testes de Unidade e terá coberto todas as possibilidades de comportamento que o Objeto poderá ter).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;acoplamento-temporal&quot;&gt;4-Evitam Acoplamento Temporal&lt;/h3&gt;

&lt;p&gt;Acoplamento Temporal é quando métodos ou funções só podem ser executadas numa sequência pré-determinada.&lt;/p&gt;

&lt;p&gt;Isso é programação procedural.&lt;/p&gt;

&lt;p&gt;Vejamos um exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&amp;#39;SELECT id, name FROM Customer WHERE id = :id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParamByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No exemplo acima o Objeto Query é criado. Temos que chamar seus métodos ou propriedades numa sequência correta ou uma &lt;code&gt;Exception&lt;/code&gt; será gerada. Esse é um “código padrão” que encontramos na maioria dos sistemas, certo?&lt;/p&gt;

&lt;p&gt;Esse código não é Orientado a Objetos, é Procedural. Apesar de haver Objetos envolvidos, eles não estão conversando entre si. Há um “controlador” (você) que informa passo-a-passo o que fazer.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;em&gt;query&lt;/em&gt; deve ser informada;&lt;/li&gt;
  &lt;li&gt;Os parâmetros devem ser informados;&lt;/li&gt;
  &lt;li&gt;Executa a &lt;em&gt;query&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Obtém o resultado;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Como seria o mesmo exemplo utilizando um código Orientado a Objetos, declarativo, com Objetos conversando entre si?&lt;/p&gt;

&lt;p&gt;Existem várias opções. Vou propor uma delas como exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;TStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;SELECT id, name FROM Customer WHERE id = :id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;TParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ftInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsString&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Não há um controlador. Não há procedimentos um após o outro. O que existe é uma combinação de Objetos que trabalham entre si para gerar um resultado.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Só é possível criar um &lt;code&gt;TStatement&lt;/code&gt; se passar um SQL e seus parâmetros;&lt;/li&gt;
  &lt;li&gt;Só é possível criar um &lt;code&gt;TQuery&lt;/code&gt; se passar uma instância de &lt;em&gt;Database&lt;/em&gt; e &lt;code&gt;TStatement&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;O método &lt;code&gt;Open&lt;/code&gt; pode ser executado a qualquer momento e ele gera um outro Objeto, por exemplo, um &lt;code&gt;TDataSet&lt;/code&gt; (não pense no mesmo &lt;code&gt;TDataSet&lt;/code&gt; que já existe na VCL/LCL);&lt;/li&gt;
  &lt;li&gt;Um &lt;code&gt;TDataSet&lt;/code&gt; tem uma lista &lt;code&gt;Fields&lt;/code&gt; que, pelo nome, retorna um &lt;code&gt;Field&lt;/code&gt; que é exibido na forma de &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Não há acoplamento temporal.&lt;/p&gt;

&lt;p&gt;Quando você executa o método &lt;code&gt;Open&lt;/code&gt; tudo já foi configurado antes.&lt;/p&gt;

&lt;h3 id=&quot;previne-referencia-null&quot;&gt;5-Previne a Referencia nil/NULL&lt;/h3&gt;

&lt;p&gt;Esse é um item óbvio quando utilizamos Objetos Imutáveis.&lt;/p&gt;

&lt;p&gt;Não existe instâncias &lt;a href=&quot;/posts/nao-utilize-nil-ou-null/&quot;&gt;nil/NULL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você não tem métodos de alteração dos atributos e os argumentos necessários para inicializar um Objeto Imutável são passados apenas no construtor da Classe, basta testar a existência de nil/NULL no construtor. Feito.&lt;/p&gt;

&lt;h3 id=&quot;copia-defensiva&quot;&gt;6-Não precisam usar “Cópia Defensiva”&lt;/h3&gt;

&lt;p&gt;Esse é um problema que muitos programadores Object Pascal não dão muita importância. Ele é mais conhecido no Java. Mas vou lhe dar um exemplo em Object Pascal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&amp;#39;SELECT id, name FROM Customer WHERE id = :id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParamByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A Classe &lt;code&gt;TQuery&lt;/code&gt; tem 2 defeitos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Acoplamento Temporal. Se &lt;code&gt;Open&lt;/code&gt; for executado antes da inicilização de &lt;code&gt;SQL&lt;/code&gt; e &lt;code&gt;Params&lt;/code&gt;, haverá problemas;&lt;/li&gt;
  &lt;li&gt;Os atributos &lt;code&gt;FSQL&lt;/code&gt; e &lt;code&gt;FParams&lt;/code&gt;, apesar de serem privados e não terem nenhum método &lt;code&gt;Setter&lt;/code&gt; para atualizá-los, ainda assim seus valores podem ser atualizados de fora do Objeto (chamadas a &lt;code&gt;SQL.Text&lt;/code&gt; e &lt;code&gt;Params.ParamByName&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Isso acontece porque &lt;code&gt;SQL&lt;/code&gt; e &lt;code&gt;Params&lt;/code&gt; são Classes com métodos Mutáveis.&lt;/p&gt;

&lt;p&gt;Para que não aconteça isso você deveria criar cópias defensivas desses mesmos Objetos e retorná-los nos métodos ao invés de utilizar a referência dos atributos privados.&lt;/p&gt;

&lt;p&gt;Mas teríamos outro problema, &lt;em&gt;memory leak&lt;/em&gt;. O programador não saberia quando destruir um Objeto porque ele não saberia se é uma cópia ou a referência do atributo privado do Objeto. Java não tem esse problema porque tem o &lt;em&gt;Garbage Collector&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O que devemos fazer, em Object Pascal, é só utilizar tipos Imutáveis ou retornar tipos de &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interfaces&lt;/a&gt;
que não tenham métodos/propriedades que permitam alterar seu estado interno. Interfaces com contagem de referência seriam destruídas automaticamete pelo compilador.&lt;/p&gt;

&lt;h2 id=&quot;desvantagens-da-imutabilidade&quot;&gt;Desvantagens da Imutabilidade&lt;/h2&gt;

&lt;p&gt;Na engenharia tudo tem um preço. A Orientação a Objetos tem a vantagem do encapsulamento e polimorfismo, mas dizem que tem um custo alto no uso da memória do computador.&lt;/p&gt;

&lt;p&gt;Temos que escolher as ferramentas corretas dependendo do trabalho a ser feito, pois não dá para termos só vantagens utilizando uma única ferramenta.&lt;/p&gt;

&lt;p&gt;Então vejamos algumas desvantagens em utilizarmos a Imutabilidade.&lt;/p&gt;

&lt;h3 id=&quot;impacto-na-performance&quot;&gt;1-Impacto na Performance&lt;/h3&gt;

&lt;p&gt;Imutabilidade exige que criemos uma nova instância se alguma modificação for necessária no estado do Objeto. 
Não podemos alterar o estado, então o Objeto deve criar uma cópia de si mesmo, com sutis diferenças.&lt;/p&gt;

&lt;p&gt;Isso pode impactar na performance, mas há técnicas para minimizar esse custo.&lt;/p&gt;

&lt;p&gt;O framework &lt;a href=&quot;&quot;&gt;Immutable-js&lt;/a&gt;, um framework do Facebook que utiliza o conceito da Imutabilidade, faz uso de estruturas compartilhas para minimizar a criação de novas instâncias.&lt;/p&gt;

&lt;h3 id=&quot;mudanca-de-pensamento&quot;&gt;2-Mudança de Pensamento&lt;/h3&gt;

&lt;p&gt;Com Objetos Imutáveis você não poderá pensar em execuções linha-a-linha. Tem-se que usar uma programação mais declarativa. Essa pode ser uma transição difícil de fazer.&lt;/p&gt;

&lt;p&gt;Nas &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;Linguagens Funcionais&lt;/a&gt; como Clojure, Haskell ou F# é natural utilizar Imutabilidade, pois esse é o &lt;em&gt;default&lt;/em&gt; nessas linguagens. 
O código é declarativo e funcional, não procedural. No código funcional, o valor de uma função de saída depende somente dos argumentos que são passados para a função. E funções podem retornar funções e recebê-las também. É um estilo completamente diferente do código procedural.&lt;/p&gt;

&lt;p&gt;Linguagens imperativas como Java, C/C++ ou Object Pascal não tem estruturas imutáveis por padrão. Precisa ser simulado. Precisamos pensar, deliberadamente, em tornar algo imutável. Cada retorno de método, cada Objeto ou argumento. Essa é uma desvantagem, mas que diminui com o tempo e prática.&lt;/p&gt;

&lt;h3 id=&quot;gui-widgets-etc&quot;&gt;3-GUI, &lt;em&gt;Widgets&lt;/em&gt;, etc&lt;/h3&gt;

&lt;p&gt;Temos Objetos que representam &lt;em&gt;widgets&lt;/em&gt; na tela do usuário. Fazer esses Objetos Imutáveis seria complicado. É possível, mas não é eficaz — teríamos que mudar a forma de pensar e escrever GUI.&lt;/p&gt;

&lt;p&gt;Tais Objetos como &lt;code&gt;TEdit&lt;/code&gt;, &lt;code&gt;TMemo&lt;/code&gt;, etc são melhores construídos sendo Mutáveis.&lt;/p&gt;

&lt;p&gt;Utilizando a forma que temos hoje para criar Objetos na tela, se tívessemos que criar um novo Objeto sempre que o usuário alterasse o &lt;code&gt;Text&lt;/code&gt; ou &lt;code&gt;Caption&lt;/code&gt; de algum &lt;em&gt;widget&lt;/em&gt;, a performance cairia drásticamente além de haver problemas com a GUI.&lt;/p&gt;

&lt;p&gt;Então, para construir GUI, Objetos Mutáveis ainda são melhores nessa área.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Imutabilidade me faz ter disciplina e simplicidade.&lt;/p&gt;

&lt;p&gt;Apresentei a teoria e os motivos — ou alguns deles — para você começar a utilizar Objetos Imutáveis.&lt;/p&gt;

&lt;p&gt;Na teoria pode parecer fácil mas na prática é muito mais difícil do que parece. Exige quase uma lobotomia. Você deve extrair o &lt;strong&gt;pensamento procedural&lt;/strong&gt;, que está muito ligado a mutabilidade, e começar a utilizar o &lt;strong&gt;pensamento funcional&lt;/strong&gt; onde tudo é imutável.&lt;/p&gt;

&lt;p&gt;Vejo a Orientação a Objetos como um caminho do meio. Um caminho mais equilibrado, mais simples, entre os paradigmas procedural e funcional.&lt;/p&gt;

&lt;p&gt;Utilizando a Orientação a Objetos podemos utilizar o que há de melhor entre esses dois paradigmas.&lt;/p&gt;

&lt;p&gt;Faça sua escolha.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/objetos-imutaveis/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/objetos-imutaveis/</guid>
      </item>
    
      <item>
        <title>Métodos Getters e Setters</title>
        <description>&lt;p&gt;Seus Objetos representam alguma Entidade real ou são apenas um “balde de dados e funções”? Classes que possuem somente métodos &lt;code&gt;Get/Set&lt;/code&gt; não geram Objetos reais seguindo o real conceito da Orientação a Objetos.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1466921583968-f07aa80c526e.jpg&quot; alt=&quot;Imagem&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Os Objetos devem ter métodos para interagir com o mundo exterior. Esses métodos podem executar ações e retornar outros Objetos. No entanto o mundo exterior não deveria ter o conhecimento se os Objetos ou valores retornados nesses métodos fazem ou não parte do Estado interno dos Objetos.&lt;/p&gt;

&lt;blockquote&gt;
  Ao projetar com cuidado e se concentrar no que você deve fazer ao invés de como você vai fazer, elimina a grande maioria dos métodos getters/setters em seu programa.
  &lt;footer&gt;&lt;cite title=&quot;JavaWorld&quot;&gt;— Why getter and setter methods are evil, JavaWorld&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Muitos programadores não entendem ou ignoram esse conceito.&lt;/p&gt;

&lt;p&gt;Um Objeto não deve representar um &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/#objeto-nao-e-um-balde-de-funcoes-e-dados&quot;&gt;registro numa tabela&lt;/a&gt;, mas sim &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;Entidades&lt;/a&gt; exteriores ao sistema no qual o Objeto foi criado.&lt;/p&gt;

&lt;h2 id=&quot;getters&quot;&gt;Métodos Getters&lt;/h2&gt;

&lt;p&gt;Os métodos &lt;code&gt;Getters&lt;/code&gt; são, conceituamente, mal entendidos e erroneamente utilizados. Por exemplo. Se você tem um método &lt;code&gt;GetName&lt;/code&gt;, público, que retorna um atributo &lt;code&gt;FName: string&lt;/code&gt; que faz parte do Estado do Objeto, conceitualmente falando, fica &lt;strong&gt;explícito&lt;/strong&gt; para o mundo exterior que informações internas do Objeto estão sendo retornadas apenas porque estamos utilizando o prefixo &lt;code&gt;Get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Essa é uma forma de &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/#encapsulamento&quot;&gt;Violação de Encapsulamento&lt;/a&gt;. No entanto é uma &lt;strong&gt;violação teórica&lt;/strong&gt;, baseada apenas na intenção da nomenclatura escolhida para o método.&lt;/p&gt;

&lt;p&gt;Repito. É uma violação &lt;strong&gt;teórica&lt;/strong&gt;. Isso quer dizer que não tem efeito prático em utilizar ou não o prefixo &lt;code&gt;Get&lt;/code&gt;. Mas estou falando de intenção, ou seja, qual será o trabalho do método. Usar &lt;code&gt;Get&lt;/code&gt; como prefixo dá a entender que &lt;strong&gt;algo interno será dado a quem pede&lt;/strong&gt;. E isso não é bom.&lt;/p&gt;

&lt;p&gt;Mas a linguagem &lt;em&gt;Object Pascal&lt;/em&gt; tem &lt;em&gt;properties&lt;/em&gt; — o mesmo conceito copiado para C# :) — e não precisamos utilizar métodos &lt;code&gt;Get&lt;/code&gt;, encapsulando do mundo exterior como a informação será processada antes de ser retornada. Pode vir de um método &lt;code&gt;Get&lt;/code&gt; privado ou diretamente do atributo. Ponto positivo para o &lt;em&gt;Object Pascal&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setters&quot;&gt;Métodos Setters&lt;/h2&gt;

&lt;p&gt;Bem, se deixar o mundo exterior bisbilhotar dentro de um Objeto utilizando seus métodos &lt;code&gt;Getters&lt;/code&gt; públicos para obter todo o seu Estado interno é ruim, imagine então permitir alterações no Estado desse Objeto utilizando métodos &lt;code&gt;Setters&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  Um Objeto não pode ter seu estado interno alterado, pois
  isso entraria em conflito com a realidade da Entidade na
  qual ele representa.
  &lt;footer&gt;&lt;cite title=&quot;eBook OPP&quot;&gt;eBook — @ObjectPascalProgramming&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Objetos devem ser Imutáveis.&lt;/p&gt;

&lt;p&gt;Objetos Imutáveis são livres de efeitos colaterais externos. Eles são criados representando um momento específico no tempo e devem permanecer inalterados até a sua morte.&lt;/p&gt;

&lt;p&gt;Esse é um conceito muito menos abstrato do que a violação de encapsulamento utilizando &lt;code&gt;Getters&lt;/code&gt;, mas pode ser ainda mais difícil de entender. E é por isso que terei que falar sobre imutabilidade em outro artigo.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Esse artigo serve para lembrá-lo que codificar Classes que representam registros em tabelas não é Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;Métodos &lt;code&gt;Getters&lt;/code&gt; públicos não são necessários.&lt;/p&gt;

&lt;p&gt;Métodos &lt;code&gt;Setters&lt;/code&gt; ou &lt;em&gt;properties&lt;/em&gt; que podem ser alteradas devem ser evitadas a todo custo. Nem todo Objeto pode ser imutável, infelizmente. Objetos &lt;em&gt;widgets&lt;/em&gt;, por exemplo, serão mutáveis por conveniência e performance. Mas tente manter seus Objetos de Negócio imutáveis.&lt;/p&gt;

&lt;p&gt;Podemos remover ambos, &lt;code&gt;Getters/Setters&lt;/code&gt;, de nossos sistemas Orientado a Objetos quase por completo. Classes imutáveis não tem &lt;code&gt;Setters&lt;/code&gt; e para &lt;code&gt;Getters&lt;/code&gt; o Objeto deve passar a informação &lt;strong&gt;ele mesmo&lt;/strong&gt; e não &lt;strong&gt;alguém pegar a informação&lt;/strong&gt; dele. Falarei sobre isso futuramente.&lt;/p&gt;

&lt;p&gt;Se você não precisasse de métodos &lt;code&gt;Setters&lt;/code&gt; e utilizar &lt;code&gt;Getters&lt;/code&gt; é no mínimo duvidoso, simplifique utilizando somente funções.&lt;/p&gt;

&lt;p&gt;Como sempre faço uso de &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interfaces&lt;/a&gt;, eu nunca implemento &lt;em&gt;properties&lt;/em&gt; porque seria obrigado a declarar seus métodos de leitura/escrita, ou seja, &lt;code&gt;Get/Set&lt;/code&gt;. Esses métodos poderiam ser privados, é claro, mas essa verbosidade é desnecessária se você estiver utilizando Objetos imutáveis.&lt;/p&gt;

&lt;p&gt;Você acha que sou o único a pensar dessa maneira? Bem, então &lt;a href=&quot;http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html&quot;&gt;aqui está&lt;/a&gt; um ótimo artigo que fala sobre o assunto. Foi dele que traduzi a citação no início do artigo. E se quiser mais um, &lt;a href=&quot;http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;aqui está&lt;/a&gt;. Boa leitura.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jun 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/getters-e-setters/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/getters-e-setters/</guid>
      </item>
    
      <item>
        <title>Herança pode ser o Mal da Orientação a Objetos — Parte Final</title>
        <description>&lt;p&gt;No artigo anterior falei sobre Forte Acoplamento.
Nesse artigo irei falar sobre &lt;strong&gt;Hierarquias Complexas&lt;/strong&gt; e concluir a série.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1457473075527-b0db85c08e66.jpg&quot; alt=&quot;Imagem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-4/&quot;&gt;Clique aqui&lt;/a&gt; para ler a &lt;strong&gt;Parte #4&lt;/strong&gt; dessa série, caso ainda não tenha lido.&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;A maioria dos desenvolvedores esqueceram ou nunca aprenderam que a Herança foi feita para proporcionar o Polimorfismo e não  para reutilizar código.&lt;/p&gt;

&lt;p&gt;O reuso de código é apenas um “efeito colateral” da Herança.&lt;/p&gt;

&lt;p&gt;Polimorfismo é importante e em linguagens como C++, por exemplo, a única maneira de implementarmos Polimorfismo é através da Herança de Classes.
A linguagem C++ não tem Interfaces, sendo Herança de Classe uma escolha correta.&lt;/p&gt;

&lt;p&gt;Arquitetos de linguagens de programação vem copiando as ideias de outras linguagens a muito tempo. Se uma linguagem nova for muito diferente das mais populares, corre o risco de nunca ter um público que as utilize. Então, por que não copiar caracteristicas de outras linguagens que já fazem sucesso?&lt;/p&gt;

&lt;p&gt;Se C++ tem Herança de Classes, porque não ter em Java, Ruby, Object Pascal… os programadores já estão acostumados, então vamos implementar essa característica também.&lt;/p&gt;

&lt;p&gt;Imagino que seja assim ao criar uma nova linguagem. Mas nem sempre. As linguagens funcionais são bem diferentes das imperativas. A Go Language, por exemplo, não é funcional mas também não implementa Herança — mas parece uma nova cópia da liguagem C, não?&lt;/p&gt;

&lt;p&gt;Então, cada nova linguagem deve ter alguma referência anterior para não ser completamente alienígena. Pra mim, esse é o maior motivo de ainda termos Herança de Classes nas novas linguagens.&lt;/p&gt;

&lt;p&gt;Se você programa em Object Pascal, no entanto, já tem o suporte a &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interfaces&lt;/a&gt;, que é uma melhor opção para implementar Polimorfismo do que utilizar Herança de Classes.
Se podemos implementar o Polimorfismo através de Interfaces e reutilizar código através da Composição de Objetos e delegação, por que iríamos limitar nossas Classes a herdar de uma única hierarquia rígida de Classes?&lt;/p&gt;

&lt;p&gt;Não faz sentido.&lt;/p&gt;

&lt;p&gt;Por que uma Classe Gato deveria herdar de Animal, Mamífero ou quadrúpede se o sistema só precisa conhecer um Gato?
Essas implementações de Super Classes, muitas vezes, &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-3/#solucao&quot;&gt;nem existem&lt;/a&gt; no modelo de negócios.&lt;/p&gt;

&lt;h2 id=&quot;hierarquias-complexas&quot;&gt;Hierarquias Complexas&lt;/h2&gt;

&lt;p&gt;Eu defino Hierarquias Complexas todos os modelos de Classes que utilizam Herança e que contenham erros conceituais ou reais. E eu sempre encontro esses tipos de erros. Sempre. A não ser que seu modelo seja muito pequeno, ele também conterá esses erros. O motivo é simples. É quase impossível definir uma Hierarquia de Classes perfeita porque o mundo real, o qual modelamos utilizando Classes, não é estruturado.&lt;/p&gt;

&lt;p&gt;Isso mesmo, a natureza não é estruturada. Não disse que não ela não é perfeita. Estou dizendo que ela não é estruturada como Classes perfeitamente agrupadas numa Hierarquia bonita e elegante. Na minha opinião, a natureza é um caos.&lt;/p&gt;

&lt;p&gt;Na &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-3/#exemplo-1&quot;&gt;Parte #3&lt;/a&gt; dessa série eu apresentei um modelo de Classes do Mundo Animal.&lt;/p&gt;

&lt;p&gt;Aqui está o Diagrama:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Diagram02.png&quot; alt=&quot;Diagram1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A princípio, parece simples e correto. Todos os animais no modelo são Animais, obviamente, e todos eles Caminham. Bem, com exceção do Tubarão, pois ele não tem pernas mas… vamos ignorar isso. Imagine um &lt;code&gt;raise Exception.Create&lt;/code&gt; no método &lt;code&gt;Caminhar&lt;/code&gt; do Tubarão e vamos em frente.&lt;/p&gt;

&lt;p&gt;E se quisermos adicionar mais animais nessa Hierarquia? Talvez um Tigre.&lt;/p&gt;

&lt;p&gt;Você pode imaginar que um Tigre herde de Gato — ou seria o contrário? — e tudo irá continuar funcionando. Bonito e elegante.&lt;/p&gt;

&lt;p&gt;O mesmo para um Leão, Lobo, Urso… e então precisamos implementar um Ornitorrinco.&lt;/p&gt;

&lt;p&gt;O que é um Ornitorrinco?&lt;/p&gt;

&lt;blockquote&gt;
Com bico de ave, semelhante a pato, é um mamífero semiaquático natural da Austrália e Tasmânia. É o único representante vivo da família Ornithorhynchidae, e a única espécie do gênero Ornithorhynchus. Juntamente com as equidnas, formam o grupo dos monotremados, os únicos mamíferos ovíparos existentes. A espécie é monotípica, ou seja, não tem subespécies ou variedades reconhecidas.
  &lt;footer&gt;&lt;cite title=&quot;wikipedia&quot;&gt;— Wikipedia&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;É um mamífero, ovíparo, tem bico e nadadeiras e é uma mono espécie… se a natureza fosse estruturada, esse seria um dos seus &lt;em&gt;bugs&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Pense agora no peixe-voador…&lt;/p&gt;

&lt;p&gt;Brincadeira a parte, eu acredito que não, que não há nada de errado com o Ornitorrinco ou qualquer outro animal.&lt;/p&gt;

&lt;p&gt;Nosso Modelo de Classes, baseado em Herança, é que está errado.&lt;/p&gt;

&lt;p&gt;Imagine o modelo acima bem maior, com mais métodos e Subclasses. Para tentar colocar o Ornitorrinco na Hierarquia você teria que fazer uma refatoração possivelmente grande. Criar novas classes abastratas, mover métodos para Classes acima, outros para Classes abaixo, “desabilitar” alguns métodos utilizando &lt;code&gt;raise&lt;/code&gt; e seguir a vida.&lt;/p&gt;

&lt;p&gt;A Hierarquia iria ficar &lt;strong&gt;extremamente complexa&lt;/strong&gt;. Iriam existir Classes que só existiram para compartilhar código, e não porque o &lt;strong&gt;modelo de negócios&lt;/strong&gt; exige que existam.&lt;/p&gt;

&lt;p&gt;Sempre foi assim nos sistema que utilizam Herança, certo? Aquele &lt;em&gt;Form&lt;/em&gt; que tem um botão que não é necessário na Subclasse, basta setar um &lt;code&gt;Visible = False&lt;/code&gt; e tudo certo; um botão que faz algo a mais do que é preciso na nova Subclasse, basta “refatorar” o código dividindo em 2 métodos com nomes insípedos e fazer a chamada deles, sobrescrevendo o método original para chamar apenas uma parte do código; sobrescrever métodos da super Classe para “não fazer nada”; copiar código de outra hierarquia de Classes… uma verdadeira bagunça.&lt;/p&gt;

&lt;p&gt;Eu conheço esses problemas. Eu passei por muitos deles. E, acredite, em grande parte o motivo dos problemas sempre foram as Hierarquias Complexas que criamos sem pensar, quando estamos tentando “reaproveitar” código utilizando Herança.&lt;/p&gt;

&lt;p&gt;Na natureza, eu acredito, não há “reaproveitamento de código”, só composição.&lt;/p&gt;

&lt;p&gt;Átomos, elementos químicos. Alguns organismos tem mais disso, outros mais daquilo. Um animal tem 0,0003% desse elemento, mais 0,0006% de outro. A composição desses Objetos determinam o comportamento e a evolução de cada indivíduo.&lt;/p&gt;

&lt;p&gt;DNA.&lt;/p&gt;

&lt;p&gt;Lembre-se que &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-3/#solucao&quot;&gt;a árvore&lt;/a&gt; não existe. Tetrápodes, Bípedes, Mamíferos, Anfíbios, Aves… nada disso existe. São abstrações que nós criamos para organizar as coisas, mas elas &lt;strong&gt;não existem no mundo real&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Qualquer Hierarquia de Classes que tente implementar o mundo, terá falhas.&lt;/p&gt;

&lt;p&gt;Parece que os biólogos conseguem separar os indivíduos em “hierarquias perfeitas”. Eles observam os indivíduos na natureza e classificam. Se descobrem um animal que não se encaixa em nenhuma hierarquia não há problema, basta criar uma nova. Nenhum animal já classificado será afetado. Não há um “fio” que liga os animais às hierarquias. 
O indivíduo determina a hierarquia, ou seja, de baixo pra cima. As hierarquias são apenas nomes e classificações. Ontologia.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A ontologia não define o comportamento das amostras individuais.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nós, desenvolvedores de software, fazemos o inverso. Vamos codificando nossas hierarquias e tentando definir o comportamento dos objetos de cima pra baixo! É como se tentássemos prever o futuro da evolução de nossas Classes separando-as em hierarquias pré-definidas. É praticamente impossível dar certo.&lt;/p&gt;

&lt;h2 id=&quot;solucao&quot;&gt;Solução&lt;/h2&gt;

&lt;p&gt;A solução é a Composição de Objetos em conjunto com Interfaces. Já falei isso. Falei e repeti muitas vezes. Mas para quem ainda não entendeu, vou revelar mais uma dica através de uma pergunta:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Se seu sistema trabalha com Tigres, quantas Classes Tigre você teria?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A grande maioria, acredito, responderia &lt;strong&gt;apenas uma classe&lt;/strong&gt; &lt;code&gt;TTigre&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Concorda?&lt;/p&gt;

&lt;p&gt;A pergunta é capciosa.&lt;/p&gt;

&lt;p&gt;Esse é um dos problemas ao tentarmos modelar sistemas Orientados a Objetos. O desenvolvedor acha que apenas uma Classe deve representar o conceito quando, na verdade, podemos ter &lt;strong&gt;diferentes Classes para representar o mesmo conceito em diferentes contextos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As pessoas me perguntaram quais eram as soluções para os problemas apontados nessa série. Eu lhes disse, Composição de Objetos.&lt;/p&gt;

&lt;p&gt;Mas elas esperavam ler a solução definitiva: Quais classes criar; quais interfaces; usar ou não herança; em quais Classes por tais métodos.&lt;/p&gt;

&lt;p&gt;Não há uma única resposta, porque tudo irá depender do seu modelo de negócios. Uma vez que você saiba o modelo de negócios, deverá haver a definição de contextos — Bounded Context no DDD — e assim você terá “N” &lt;a href=&quot;/posts/objetos-representam-entidades/#o-que-e-uma-entidade&quot;&gt;variações de um único conceito&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lembra do &lt;code&gt;TTigre&lt;/code&gt;? Se nesse sistema hipotético você precisa analisar na tela a pata de um tigre, não haveria necessidade de instânciar um objeto da Classe &lt;code&gt;TTigre&lt;/code&gt; que contém tudo de um tigre (olhos, tipo, peso, tamanho, cor, que corre, nada, caça, etc). Não estou dizendo isso pensando em performance ou alocação de memória, não! Estou dizendo isso porque essa Classe seria enorme e complexa. Iria implementar muitas interfaces para poder Correr, Nadar, Pular… num sistema precisamos abstrair o que não é necessário. Esse é um dos motivos de não precisarmos de Hierarquias Complexas. Se você precisa examinar uma pata, então:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IPaw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// function...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;TTigerPaw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// function...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assim como você poderá utilizar os Objetos da Classe &lt;code&gt;TTigerPaw&lt;/code&gt; para compor outras abstrações de Tigre em outros contextos.&lt;/p&gt;

&lt;p&gt;Sim, você terá muito mais definições de Classes. Mas isso já é previsto na Composição de Objetos. Fazer o certo dá mais trabalho, mas só no início.&lt;/p&gt;

&lt;h2 id=&quot;conclusao-final&quot;&gt;Conclusão Final&lt;/h2&gt;

&lt;p&gt;Chegamos ao final dessa série. Falei sobre como a Herança Viola o Encapsulamento, pode Duplicar o Código, promove Forte Acoplamento e
Hierarquias Complexas.&lt;/p&gt;

&lt;p&gt;Espero ter lhe ajudado a entender mais sobre Herança de Classes e os males que ela pode trazer ao código.&lt;/p&gt;

&lt;p&gt;O título dessa série é “Herança &lt;strong&gt;pode&lt;/strong&gt; ser o Mal da Orientação a Objetos”. Eu não falei que ela &lt;strong&gt;é&lt;/strong&gt;, disse que pode ser.
Eu lhe mostrei os problemas que vem com a Herança de Classes. Tenha conhecimento deles e evite-os.&lt;/p&gt;

&lt;p&gt;Herança de Classe pode ser benéfica em alguns (poucos) contextos. Mas ao usá-la uma vez, a tentação é grande em continuar utilizando. 
Não faça isso.&lt;/p&gt;

&lt;p&gt;Modele suas Classes utilizando Composição de Objetos que implementam Interfaces. Esse é o segredo.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-final/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-final/</guid>
      </item>
    
      <item>
        <title>Herança pode ser o Mal da Orientação a Objetos — Parte 4</title>
        <description>&lt;p&gt;No artigo anterior falei sobre Duplicação de Código.
Nesse artigo irei falar sobre o &lt;strong&gt;Forte Acoplamento&lt;/strong&gt; que ocorre ao utilizarmos a Herança de Classe.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1461287159820-04de78c094e9.jpg&quot; alt=&quot;Acoplamento&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-3/&quot;&gt;Clique aqui&lt;/a&gt; para ler a &lt;strong&gt;Parte #3&lt;/strong&gt; 
dessa série, caso ainda não tenha lido.&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Se um gato possui raça e patas, e um cachorro possui raça, patas e tipoDoPelo, logo Cachorro extends Gato?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O texto acima é emprestado &lt;a href=&quot;http://blog.caelum.com.br/como-nao-aprender-orientacao-a-objetos-heranca/&quot;&gt;desse artigo&lt;/a&gt; que
fala sobre Herança e Hierarquia de Classes. O artigo fala sobre o erro de &lt;em&gt;design&lt;/em&gt; dos projetistas da linguagem Java quando
codificaram as Classes &lt;code&gt;Stack&lt;/code&gt; e &lt;code&gt;Properties&lt;/code&gt;. Não precisa conhecer Java para entender o artigo.&lt;/p&gt;

&lt;p&gt;No mesmo artigo ele mostra o erro &lt;strong&gt;grotesco&lt;/strong&gt; no &lt;em&gt;design&lt;/em&gt; da Classe &lt;code&gt;HttpServlet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se você já utilizou Java e precisou extender essa Classe, deve ter reparado no mesmo problema citado no artigo.&lt;/p&gt;

&lt;p&gt;Na época da faculdade eu reparei nesse erro de &lt;em&gt;design&lt;/em&gt; mas, &lt;strong&gt;ignorei&lt;/strong&gt;. Achei que eu estava errado, que não tinha entendido a “maneira correta
de programar utilizando Orientação a Objetos com Java”. Eu não sabia muita coisa mesmo. Talvez
ainda não saiba… sempre que leio textos de outrem fico indignado o quanto ainda preciso aprender. Pois é.&lt;/p&gt;

&lt;p&gt;O fato é que o pensamento comum da maioria das pessoas é: Será que uma grande empresa, projetista do Java por exemplo, 
poderia estar errada?&lt;/p&gt;

&lt;p&gt;Sim as empresas erram, muito.&lt;/p&gt;

&lt;p&gt;Sim, elas também ganham muito dinheiro. Mas não é porque seus &lt;em&gt;softwares&lt;/em&gt; são perfeitos, mas sim porque elas se adaptam
rapidamente e dão aos seus clientes o que eles querem — ou o que está na moda; ou algo similar ao concorrente; ou talvez algo
“legal de se ter”.&lt;/p&gt;

&lt;p&gt;Por isso muitas empresas não se importam em descontinuar aplicativos e &lt;em&gt;frameworks&lt;/em&gt; se eles não dão lucro ou não estão mais em conformidade
com a visão de longo prazo delas — vide Microsoft — o que é perfeitamente normal. Elas precisam gerar lucro, certo?&lt;/p&gt;

&lt;p&gt;Então não pense que as empresas milionárias como a Microsoft, Sun/Oracle, Embarcadero e muitas outras, estão sempre certas “só” porque
elas são milionárias. Bem, elas estão corretíssimas sobre gerar lucro, mas nem sempre estão corretas sobre &lt;strong&gt;arquitetura e desenvolvimento&lt;/strong&gt;
de &lt;em&gt;softwares&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;forte-acoplamento&quot;&gt;Forte Acoplamento&lt;/h2&gt;

&lt;p&gt;O termo &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_(computer_programming)&quot;&gt;Acoplamento&lt;/a&gt; é uma medida de quão duas rotinas, módulos ou 
Classes estão ligados &lt;strong&gt;intimamente&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  Em engenharia de software, acoplamento é a maneira e grau de interdependência entre módulos de software.
  &lt;footer&gt;&lt;cite title=&quot;Coupling&quot;&gt;Coupling - Wikipedia&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Existem várias formas de acoplamento.&lt;/p&gt;

&lt;p&gt;O Forte Acoplamento entre Classes se dá quando uma Classe “conhece” uma outra diretamente. 
Por exemplo. Quando você inicializa um atributo de uma Classe utilizando uma Classe concreta, 
você está acoplando as Classes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No exemplo acima existe um acoplamento entre &lt;code&gt;TCustomer&lt;/code&gt; e &lt;code&gt;TAddress&lt;/code&gt;. Conceitualmente isso é ruim. O mais correto seria utilizar
&lt;strong&gt;injeção de dependência&lt;/strong&gt; passando a instância de &lt;code&gt;TAddress&lt;/code&gt; através de um argumento do tipo Interface no construtor de &lt;code&gt;TCustomer&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Devemos evitar o acoplamento. O motivo é simples. Toda vez que você alterar uma Classe que está acoplada a outra, haverá grandes
chances de você ter que alterar ambas.&lt;/p&gt;

&lt;p&gt;Se utilizar argumentos do tipo &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interface&lt;/a&gt; e injeção de dependência, 
o acoplamento será apenas de Interfaces.&lt;/p&gt;

&lt;p&gt;O exemplo acima não é sobre Herança, mas sobre &lt;strong&gt;Composição de Objetos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Apesar de ser ruim o acoplamento sem utilizar injeção de dependência, é possível refatorar essas Classes (se necessário) 
sem termos que alterar todas as Classes envolvidas.
Poderíamos começar a codificação de &lt;code&gt;TCustomer&lt;/code&gt; sem injetar &lt;code&gt;TAddress&lt;/code&gt; e, depois, resolver alterar o código para tornar &lt;code&gt;TCustomer&lt;/code&gt;
mais desacoplada.&lt;/p&gt;

&lt;p&gt;No entanto, se utilizássemos &lt;strong&gt;Herança de Classe&lt;/strong&gt;, a mesma refatoração poderia ser &lt;strong&gt;muito mais difícil&lt;/strong&gt;. 
Por exemplo. Se &lt;code&gt;TCustomer&lt;/code&gt; fosse uma Subclasse de &lt;code&gt;TPerson&lt;/code&gt; e essa Classe inicializasse &lt;code&gt;FAddress&lt;/code&gt; em seu construtor,
&lt;code&gt;TCustomer&lt;/code&gt; não poderia — ou não deveria — alterar a instância de &lt;code&gt;FAddress&lt;/code&gt;, reinicializando-a com um outro tipo de Classe.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;cm&quot;&gt;{ TPerson }&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;{ TCustomer }&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAnotherAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Nesse exemplo simples, existem alguns problemas.&lt;/p&gt;

&lt;p&gt;Primeiro, para que &lt;code&gt;TCustomer&lt;/code&gt; consiga alterar &lt;code&gt;FAddress&lt;/code&gt;, esta deve ter a visibilidade de &lt;code&gt;protected&lt;/code&gt;, o que é uma
&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/&quot;&gt;Violação de Encapsulamento&lt;/a&gt;, pois
&lt;code&gt;TCustomer&lt;/code&gt; teria conhecimento interno sobre o estado de &lt;code&gt;TPerson&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Segundo, se &lt;code&gt;TCustomer&lt;/code&gt; tem acesso de alteração dos atributos herdados de &lt;code&gt;TPerson&lt;/code&gt;, esta mudança poderia causar inúmeros
problemas pois o comportamento de &lt;code&gt;TPerson&lt;/code&gt; poderia ser alterado ou invalidado para todos as outras Subclasse de &lt;code&gt;TPerson&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;E terceiro, se &lt;code&gt;FAddress&lt;/code&gt; não fosse &lt;code&gt;protected&lt;/code&gt; nenhuma opção estaria disponível.&lt;/p&gt;

&lt;h2 id=&quot;a-classe-tdataset&quot;&gt;A Classe TDataSet&lt;/h2&gt;

&lt;p&gt;Erros de &lt;em&gt;design&lt;/em&gt; de Classes não existem só na linguagem Java. No Delphi também temos erros. Um deles, na minha opinião, 
é a Classe &lt;code&gt;TDataSet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por simplicidade, talvez, alguém pensou em fazer uma Classe para manipulação de dados. É o famoso &lt;em&gt;data-ware&lt;/em&gt;. Componentes mostram
dados em &lt;em&gt;widgets&lt;/em&gt; (edits, grids, etc) obtendo esses dados de instâncias de Subclasses de &lt;code&gt;TDataSet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Esse é um abuso clássico da Herança: Utilização da Herança para reaproveitar código.&lt;/p&gt;

&lt;p&gt;Bem, se a Herança fosse mesmo uma boa escolha, eu estaria utilizando Herança nas minhas Classes. Teria minha própria Hierarquia de 
Classes e Subclasses, certo?&lt;/p&gt;

&lt;p&gt;Então eu lhes pergunto: Onde &lt;code&gt;TDataSet&lt;/code&gt; faria sentido na minha Hierarquia de Classes? Provavelmente nenhum sentido.
No entanto eu sou &lt;strong&gt;obrigado&lt;/strong&gt; a herdar de &lt;code&gt;TDataSet&lt;/code&gt; se eu quiser exibir dados num &lt;code&gt;TDBGrid&lt;/code&gt;. Esse &lt;em&gt;design&lt;/em&gt; é muito errado.&lt;/p&gt;

&lt;p&gt;E qual seria o &lt;em&gt;design&lt;/em&gt; correto?&lt;/p&gt;

&lt;p&gt;Você já sabe.&lt;/p&gt;

&lt;p&gt;Todos os lugares que esperam uma instância de &lt;code&gt;TDataSet&lt;/code&gt; deveriam esperar uma Interface &lt;code&gt;IDataSet&lt;/code&gt;. Tão simples quanto
utilizar Herança, porém mais eficiente e desacoplado.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A utilização de Herança é a pior forma de acoplamento porque é mais difícil de corrigir e refatorar.&lt;/p&gt;

&lt;p&gt;Utilizar Herança é como usar concreto, após secar você não consegue mover mais nada.&lt;/p&gt;

&lt;h2 id=&quot;no-prximo-artigo&quot;&gt;No próximo artigo…&lt;/h2&gt;

&lt;p&gt;No próximo artigo irei falar sobre &lt;strong&gt;Hierarquias Complexas&lt;/strong&gt; entre Classes que utilizam Herança.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-final/&quot;&gt;Clique aqui&lt;/a&gt; para ler a &lt;strong&gt;Parte Final&lt;/strong&gt; dessa série.&lt;/p&gt;

&lt;p&gt;Caso você tenha alguma dúvida ou quiser compartilhar seus pensamentos sobre essa série, utilize a área 
abaixo para comentários.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jun 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-4/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-4/</guid>
      </item>
    
      <item>
        <title>Herança pode ser o Mal da Orientação a Objetos — Parte 3</title>
        <description>&lt;p&gt;No artigo anterior falei sobre Violação de Encapsulamento.
Nesse artigo irei falar sobre a &lt;strong&gt;Duplicação de Código&lt;/strong&gt; ao utilizarmos a Herança de Classe.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-90abc28jsj8383.jpg&quot; alt=&quot;Duplicação&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/&quot;&gt;Clique aqui&lt;/a&gt; para ler a &lt;strong&gt;Parte #2&lt;/strong&gt; 
dessa série, caso ainda não tenha lido.&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Duplicação de Código utilizando Herança. Essa afirmação pode parecer &lt;strong&gt;heresia&lt;/strong&gt; porque a maioria dos programadores
utilizam Herança de Classe justamente para &lt;strong&gt;não&lt;/strong&gt; duplicar o código.&lt;/p&gt;

&lt;p&gt;Em uma hierarquia de classes onde &lt;code&gt;B&lt;/code&gt; e &lt;code&gt;C&lt;/code&gt; herdam de &lt;code&gt;A&lt;/code&gt;, basta adicionar a nova funcionalidade em &lt;code&gt;A&lt;/code&gt; para termos 
disponível em &lt;code&gt;B&lt;/code&gt; e &lt;code&gt;C&lt;/code&gt;. Simples, rápido e sem duplicar código.&lt;/p&gt;

&lt;p&gt;Mas será esse o melhor &lt;em&gt;design&lt;/em&gt; para &lt;strong&gt;reaproveitar&lt;/strong&gt; e não duplicar código?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Herança de Classe é simples de usar e entender, mas no longo prazo é provado que essa não é a melhor escolha
ao projetar seu diagrama de Classes. Ao invés de Herança a melhor escolha é a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;Composição de Objetos&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quando estamos começando um novo projeto — ou um novo módulo — sim, essa &lt;strong&gt;parece&lt;/strong&gt; ser ser a “melhor maneira”
para reaproveitar código.&lt;/p&gt;

&lt;p&gt;Parece.&lt;/p&gt;

&lt;p&gt;Com certeza a Herança é &lt;strong&gt;simples&lt;/strong&gt; e &lt;strong&gt;intuitiva&lt;/strong&gt; no entanto não é o melhor &lt;em&gt;design&lt;/em&gt; no médio e longo prazo.&lt;/p&gt;

&lt;p&gt;Herança de Classe leva a um código altamente acoplado e sem flexibilidade.&lt;/p&gt;

&lt;h2 id=&quot;duplicando-o-codigo&quot;&gt;Duplicando o código&lt;/h2&gt;

&lt;p&gt;Então, como é possível duplicar o código utilizando Herança?&lt;/p&gt;

&lt;p&gt;Utilizando &lt;strong&gt;Hierarquias de Classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;É contra intuitivo pensar nisso, mas é verdade. Pense por um minuto. Se você tem um comportamento/funcionalidade
espalhado entre Classes e Subclasses dentro de uma Hierarquia, como &lt;strong&gt;reutilizar&lt;/strong&gt; esse código em outras Classes 
ou Hierarquias diferentes? Difícil.&lt;/p&gt;

&lt;p&gt;Não estou dizendo que é impossível. Estou dizendo que &lt;strong&gt;dificulta&lt;/strong&gt; muito a reutilização devido o comportamento não
ter sido codificado de maneira &lt;strong&gt;coesa&lt;/strong&gt;, utilizando &lt;strong&gt;Classes pequenas&lt;/strong&gt; com 
&lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/&quot;&gt;apenas uma responsabilidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quando utilizamos Herança somos seduzidos pelo &lt;strong&gt;fácil reaproveitamento&lt;/strong&gt; do código e por isso vamos agregando mais e 
mais funcionalidades nas Classes e Subclasses, tornando-as “inchadas” e dificultando o reaproveitamento entre módulos
ou Projetos distintos.&lt;/p&gt;

&lt;p&gt;Na maioria das vezes exigirá uma refatoração massiva no código para haver reutilização, devido as Classes e Subclasses
estarem muito acopladas umas as outras.&lt;/p&gt;

&lt;p&gt;Esse é o motivo da &lt;strong&gt;Duplicação de Código&lt;/strong&gt;. É muito mais fácil e confortável — para a maioria dos programadores 
com prazos curtos e chefes estressados — duplicar o código do que refatorar, talvez, toda a Hierarquia.&lt;/p&gt;

&lt;h2 id=&quot;exemplo&quot;&gt;Exemplo&lt;/h2&gt;

&lt;p&gt;Vejamos agora um exemplo utilizando Diagramas de Classes.&lt;/p&gt;

&lt;p&gt;Antes eu gostaria de lembrá-lo que é fácil olhar um exemplo simples e pensar em inúmeras maneiras de fazê-lo melhor. 
Mas pense que esses são apenas exemplos para lhe mostrar o conceito e não a melhor maneira de implementar uma solução.&lt;/p&gt;

&lt;h3 id=&quot;exemplo-1&quot;&gt;O Mundo Animal&lt;/h3&gt;

&lt;p&gt;Vou começar com o bom e velho “Exemplo de Animais”. O exemplo é antigo, sim, porém você ainda tem dúvidas sobre
utilizar ou não herança — senão não estaria lendo esse artigo — então acho que o exemplo continua sendo válido.&lt;/p&gt;

&lt;p&gt;Precisamos implementar um sistema que lida com Animais e resolvemos utilizar Herança de Classes para implementar
uma Hierarquia e “reutilizar o código”.&lt;/p&gt;

&lt;p&gt;Primeiramente o sistema só irá trabalhar com Cachorros e Gatos então temos o primeiro modelo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Diagram01.png&quot; alt=&quot;Diagram1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No diagrama acima temos 3 Classes simples: &lt;code&gt;Animal&lt;/code&gt;, &lt;code&gt;Cachorro&lt;/code&gt; e &lt;code&gt;Gato&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Apenas a Classe &lt;code&gt;Animal&lt;/code&gt; tem um método &lt;code&gt;Caminhar()&lt;/code&gt; que é herdado para as Classes &lt;code&gt;Cachorro&lt;/code&gt; e &lt;code&gt;Gato&lt;/code&gt;. Queremos 
reaproveitar o código então basta implementar na Classe mais acima da Hierarquia, ou seja, &lt;code&gt;Animal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Então vamos imaginar como seria a implementação do método &lt;code&gt;Caminhar()&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TAnimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Caminhar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAnimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MovePata1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MovePata2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MovePata3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MovePata4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Como estamos trabalhando, a princípio, com tetrápodes ou quadrúpedes, precisamos mover as 4 patas para caminhar.
Tudo funciona perfeitamente.&lt;/p&gt;

&lt;p&gt;Então precisamos acrescentar mais alguns animais: Pato, Tubarão, Sapo, Morcego e Crocodilo.&lt;/p&gt;

&lt;p&gt;Como somos espertos, vamos acrescentar mais abstrações para deixar o modelo mais “legal” e “sofisticado”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Diagram02.png&quot; alt=&quot;Diagram1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Um &lt;code&gt;Pato&lt;/code&gt; também caminha, no entanto ele caminha utilizando 2 membros. O &lt;code&gt;Sapo&lt;/code&gt; e &lt;code&gt;Crocodilo&lt;/code&gt; caminham com 4 patas, assim
como o &lt;code&gt;Cachorro&lt;/code&gt; e &lt;code&gt;Gato&lt;/code&gt;. O &lt;code&gt;Morcego&lt;/code&gt; tem pernas, mas ele realmente caminha? Não sei. O &lt;code&gt;Tubarão&lt;/code&gt;… complicou.&lt;/p&gt;

&lt;p&gt;Veja que pelo simples fato de termos acrescentado outros animais, &lt;strong&gt;toda a hierarquia deverá ser verificada&lt;/strong&gt; afim 
de saber se os métodos de Classes ancestrais continuam fazendo sentido para a nova hierarquia.&lt;/p&gt;

&lt;p&gt;O que fazer? Há inúmeras possibilidades. Algumas mais certas, outras mais erradas. Mas o que é que a &lt;strong&gt;maioria&lt;/strong&gt; 
dos programadores fazem — 
inclusive em &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/#exemplo-3&quot;&gt;grandes empresas&lt;/a&gt; —
quando a hierarquia não reflete o mundo real?&lt;/p&gt;

&lt;p&gt;Eles sobrescrevem métodos, &lt;strong&gt;ignorando-os&lt;/strong&gt; (métodos em branco) ou &lt;strong&gt;lançando uma exceção&lt;/strong&gt; (métodos que existem, mas não devem ser
utilizados… WTF!).&lt;/p&gt;

&lt;p&gt;Nesse ponto emerge a Duplicação de Código.&lt;/p&gt;

&lt;p&gt;Como assim?&lt;/p&gt;

&lt;p&gt;Dependendo da quantidade de Classes numa hierarquia, duplicar a implementação será o método escolhido.
No caso do nosso exemplo o método &lt;code&gt;Caminhar()&lt;/code&gt; seria modificado para utilizar apenas
2 patas em algumas Classes. Em outras levantaríamos uma exceção naqueles Animais que não deveriam caminhar, como no caso da Classe &lt;code&gt;Tubarão&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mas isso é uma &lt;strong&gt;solução alternativa&lt;/strong&gt; que está longe de ser a ideal.&lt;/p&gt;

&lt;h2 id=&quot;solucao&quot;&gt;Solução&lt;/h2&gt;

&lt;p&gt;A Hierarquia está errada? Qual seria a implementação “certa”? Como reaproveitar o código sem usar Herança?&lt;/p&gt;

&lt;p&gt;Quando os cientistas separam os animais em “Classes”, eles fizeram-na baseado no que eles são (identidade) e não no que eles fazem (comportamento).&lt;/p&gt;

&lt;p&gt;Um pato nada, assim como um crocodilo. Mas o ato de nadar &lt;strong&gt;não pertence&lt;/strong&gt; ao pato nem ao crocodilo, pois nadar é um &lt;strong&gt;comportamento&lt;/strong&gt; “implementado” em vários outros Animais (Classes).&lt;/p&gt;

&lt;p&gt;Vou lhe contar como resolver o problema da implementação da Hierarquia Animal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atenção&lt;/strong&gt;. Aqui está:&lt;/p&gt;

&lt;p&gt;Um Animal não caminha. Quem caminha é um Cachorro, Gato ou Pato. Animal é uma abstração, uma classificação, 
assim como Mamífero ou Anfíbio. Animal não existe.&lt;/p&gt;

&lt;p&gt;Tetrápodes, Bípedes, Mamíferos, Anfíbios, Aves, Peixes, Pássaros… &lt;strong&gt;eles não existem&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Que?!&lt;/p&gt;

&lt;p&gt;É isso aí.&lt;/p&gt;

&lt;p&gt;Não entendeu? Aqui vai outro exemplo.&lt;/p&gt;

&lt;p&gt;Você já viu uma Árvore? Tenho certeza que não! Você viu, talvez, uma goiabeira, bananeira, macieira… Árvore é uma abstração, uma classificação. Árvore não existe.&lt;/p&gt;

&lt;p&gt;Se Mamíferos, Anfíbios, Aves, Peixes…e Árvores não existem, o que são?&lt;/p&gt;

&lt;p&gt;São apenas &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interfaces&lt;/a&gt; que definem uma classificação para algum comportamento.&lt;/p&gt;

&lt;p&gt;Então não há — ou não deveria haver — Hierarquia de Classes, apenas &lt;strong&gt;Hierarquias de Interfaces&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Cientistas não tem problemas em classificar novas espécieis porque a inclusão na hierarquia existente não “quebra” nenhuma “funcionalidade”
nas “Classes” abaixo desta. São apenas Interfaces.&lt;/p&gt;

&lt;p&gt;Então, se não há Hierarquia de Classes, como reaproveitar código sem duplicar?&lt;/p&gt;

&lt;p&gt;Resposta: &lt;strong&gt;Composição de Objetos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Objetos tem comportamento, Interfaces não. Um cachorro é um Objeto; um pato é um Objeto; o ato de caminhar é um comportamento de 
“algum objeto” que os pássaros sabem utilizar… ou será que &lt;strong&gt;Alguém&lt;/strong&gt; “Duplicou o Código” em cada DNA porque era mais fácil de implementar? :)&lt;/p&gt;

&lt;h2 id=&quot;no-prximo-artigo&quot;&gt;No próximo artigo…&lt;/h2&gt;

&lt;p&gt;No próximo artigo irei falar sobre &lt;strong&gt;Forte Acoplamento&lt;/strong&gt; entre Classes que utilizam Herança.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-4/&quot;&gt;Clique aqui&lt;/a&gt; para ler a &lt;strong&gt;Parte #4&lt;/strong&gt; dessa série.&lt;/p&gt;

&lt;p&gt;Caso você tenha alguma dúvida ou quiser compartilhar seus pensamentos sobre essa série, utilize a área 
abaixo para comentários.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-3/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-3/</guid>
      </item>
    
      <item>
        <title>Herança pode ser o Mal da Orientação a Objetos — Parte 2</title>
        <description>&lt;p&gt;No artigo anterior citei alguns males ao utilizarmos Herança de Classe. Nesse artigo irei falar sobre
um deles, a &lt;strong&gt;Violação de Encapsulamento&lt;/strong&gt; ao utilizarmos Subclasses.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1456087468887-17b7d7b076e0.jpg&quot; alt=&quot;Imagem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;Clique aqui&lt;/a&gt; para ler a &lt;strong&gt;Parte #1&lt;/strong&gt; 
dessa série, caso ainda não tenha lido.&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Há muitos artigos na internet que falam sobre esse assunto, mas não encontrei nenhum que tenha apresentado esse conceito,
de forma satisfatória, para programadores &lt;em&gt;Object Pascal&lt;/em&gt; e, aqui estamos.&lt;/p&gt;

&lt;p&gt;Então, como um dos pilares da Orientação a Objetos, a Herança, pode se &lt;strong&gt;contrapor&lt;/strong&gt; a outro princípio, o &lt;strong&gt;Encapsulamento&lt;/strong&gt;?&lt;/p&gt;

&lt;blockquote&gt;
  ...a herança de classe permite definir a implementação de uma classe em termos da implemetação de outra.
  A reutilização por meio de sublcasses é frequentemente chamada de reutilização de caixa branca (ou aberta).
  O termo &quot;caixa branca&quot; se refere à visibilidade: com herança, os interiores das classes ancestrais são frequentemente
  visíveis para subclasses.
  &lt;footer&gt;&lt;cite title=&quot;Padrões de Projetos&quot;&gt;Padrões de Projetos, 2002 — p.34 — Erich Gamma e outros — ISBN 85-7307-610-0&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;O texto é claro.&lt;/p&gt;

&lt;p&gt;O autor escreveu que &lt;strong&gt;“…os interiores das classes ancestrais são frequentemente visíveis para subclasses”&lt;/strong&gt;.
Ele não escreveu, especificamente, que a Herança Viola o Encapsulamento mas você percebeu que é a mesma coisa?&lt;/p&gt;

&lt;p&gt;O interior de uma Classe não pode ser visível, mesmo para Subclasses, porque isso significaria &lt;strong&gt;violação de 
encapsulamento&lt;/strong&gt;. Ponto.&lt;/p&gt;

&lt;blockquote&gt;
  Porque a herança expõe para uma subclasse os detalhes da implementação dos seus ancestrais, frequentemente
   é dito que &quot;a herança viola a encapsulação&quot;[Sny86]
  &lt;footer&gt;&lt;cite title=&quot;Padrões de Projetos&quot;&gt;Padrões de Projetos, 2002 — p.34&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quando li isso a primeira vez, pouco tempo depois que comecei a codificar software “Orientado a Objetos” — eu achava
que estava utilizando Orientação a Objetos — tive o sentimento de &lt;strong&gt;negação&lt;/strong&gt; que você pode estar tendo agora:&lt;/p&gt;

&lt;p&gt;— “Ora, isso não faz o menor sentido!”&lt;/p&gt;

&lt;p&gt;Mas faz todo o sentido. Vou repetir: A Herança Viola o Encapsulamento.&lt;/p&gt;

&lt;p&gt;Isso é um &lt;strong&gt;fato lógico&lt;/strong&gt;. Pode não parecer lógico se é a primeira vez que você lê essa afirmação, mas você entenderá.&lt;/p&gt;

&lt;h2 id=&quot;encapsulamento&quot;&gt;Encapsulamento&lt;/h2&gt;

&lt;p&gt;Precisamos definir o que é Encapsulamento que, de acordo com o dicionário, significa:
&lt;strong&gt;colocar ou encerrar em cápsula; capsular&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Uma cápsula não pode — ou não deveria — ser quebrada. O mundo externo ao Objeto não pode saber o que há em seu
interior a menos que o Objeto queira lhes dizer “com suas próprias palavras”, ou seja, através de métodos que 
retornam informações mas não necessariamente seu &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/#objeto-nao-e-um-balde-de-funcoes-e-dados&quot;&gt;Estado&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O mundo externo só deve conhecer os métodos públicos de um Objeto. Seus métodos públicos representam sua
&lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interface&lt;/a&gt; para fazer o que ele deve fazer. Qualquer método ou
atributo interno ao Objeto é de propriedade dele e de mais ninguém.&lt;/p&gt;

&lt;p&gt;Um Objeto pode ter um único método em sua Interface
porém pode haver 10 outros métodos privados apenas para resolver um único problema. Mas o mundo externo não sabe e não deve
saber como o Objeto trabalha internamente.&lt;/p&gt;

&lt;p&gt;Um subtipo de Classe viola esse conceito.&lt;/p&gt;

&lt;h2 id=&quot;heranca-de-classe&quot;&gt;Herança de Classe&lt;/h2&gt;

&lt;p&gt;O motivo de termos Subclasses é &lt;strong&gt;acrescentar&lt;/strong&gt; mais funcionalidade às Classes ancestrais, criando um novo tipo.
Ao acrescentar funcionalidades a nova Subclasse deverá, inevitavelmente, interagir com o Estado e Métodos protegidos da 
Classe ancestral. Em outras palavras, a Subclasse deverá conhecer como a Classe ancestral trabalha (internamente) para
poder adicionar funcionalidade, o que é uma clara &lt;strong&gt;Violação de Encapsulamento&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  A implementação de uma Subclasse, dessa forma, torna-se tão amarrada à implementação da sua classe-mãe que qualquer mudança
  na implementação desta forçará uma mudança naquela.
  &lt;footer&gt;&lt;cite title=&quot;Padrões de Projetos&quot;&gt;Padrões de Projetos, 2002 — p.34&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Herança de Classe é simples de usar e entender, mas no longo prazo é provado que essa não é a melhor escolha
ao projetar seu diagrama de Classes. Ao invés de Herança a melhor escolha é a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;Composição de Objetos&lt;/a&gt;. Esse é um
dos princípios proposto no livro Padrões de Projetos:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Favoreça a composição de objetos em relação à herança de classe&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Foi o que fizeram os engenheiros do Google ao projetar a &lt;a href=&quot;https://golang.org/&quot;&gt;Go language&lt;/a&gt;. 
A linguagem &lt;a href=&quot;https://talks.golang.org/2012/splash.article#TOC_15&quot;&gt;não tem nenhuma forma&lt;/a&gt; de Herança de Classes,
ou seja, Herança baseada em subtipos. Não há hierarquia de tipos!&lt;/p&gt;

&lt;h2 id=&quot;me-mostre-o-codigo&quot;&gt;Me mostre o Código&lt;/h2&gt;

&lt;p&gt;A teoria foi explicada. Agora vou lhe mostrar alguns exemplos de código.&lt;/p&gt;

&lt;p&gt;Não posso colocar exemplos completos e reais senão o artigo iria virar um “repositório de código” e não um
artigo. Então veja os exemplos e imagine como seria no código real.&lt;/p&gt;

&lt;h3 id=&quot;exemplo-1&quot;&gt;Exemplo 1 — &lt;em&gt;Stack Overflow&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;É um exemplo simples que poderia ser evitado pelo programador que fez a Classe A, a classe ancestral, 
no entanto veja que para descobrir o problema o programador da Classe B, a Subclasse, deve ver como a Classe A
foi implementada, Violando o Encapsulamento, pois ele deverá fazer ajustes em função da implementão interna da 
Classe A:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TClasseA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;TClasseB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TClasseA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;{ TClasseA }&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TClasseA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Exec&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TClasseA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;{ TClasseB }&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TClasseB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;{ TForm1 }&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Button1Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TClasseA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TClasseB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A Classe B sobrescreve um método da Classe A. Simples. Fazemos isso todo tempo.
Então, qual é o problema desse código?&lt;/p&gt;

&lt;p&gt;Se você copiar/colar o código na sua IDE e executar, verá uma mensagem de erro na segunda execução de &lt;code&gt;Proc&lt;/code&gt;.
Essa mensagem pode variar de IDE mas basicamente é um &lt;em&gt;Stack Overflow&lt;/em&gt;. Ao sobrescrever &lt;code&gt;Exec&lt;/code&gt; 
na Classe B, o programador chamou &lt;code&gt;Proc&lt;/code&gt; internamente. O problema é que na Classe A, &lt;code&gt;Proc&lt;/code&gt; já está chamando &lt;code&gt;Exec&lt;/code&gt; e,
dessa forma, o programa entra em um &lt;em&gt;loop&lt;/em&gt; infinito.&lt;/p&gt;

&lt;h3 id=&quot;exemplo-2&quot;&gt;Exemplo 2 — Utilizar &lt;code&gt;inherited&lt;/code&gt; ou não?&lt;/h3&gt;

&lt;p&gt;Quando sobrescrevemos um método há a possibilidade de chamar o código do mesmo método da Classe ancestral. 
Para isso utilizamos a palavra reservada &lt;code&gt;inherited&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mas como saber se devo ou não chamar o código da Classe ancestral?&lt;/p&gt;

&lt;p&gt;Somente olhando a implementação privada da Classe para termos certeza se &lt;strong&gt;devemos ou não&lt;/strong&gt; chamar o código.
Novamente, temos uma Violação de Encapsulamento.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TClasseA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;TClasseB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TClasseA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;{ TClasseA }&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TClasseA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Count=&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;IntToStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Exec A&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;{ TClasseB }&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TClasseB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Count=&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;IntToStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ShowMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Exec B&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;{ TForm1 }&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Button1Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TClasseB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Quando executado teremos as mensagens:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;“Count=1”&lt;/li&gt;
  &lt;li&gt;“Exec A”&lt;/li&gt;
  &lt;li&gt;“Count=2”&lt;/li&gt;
  &lt;li&gt;“Exec B”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Nesse exemplo o programador utilizar &lt;code&gt;inherited&lt;/code&gt; porque ele sabe — olhando para a implementação de &lt;code&gt;TClasseA.Exec&lt;/code&gt; —
que a execução da Classe ancestral iria incrementar o atributo &lt;code&gt;FCount&lt;/code&gt; antes que ele fosse incrementado novamente no 
método sobrescrito.&lt;/p&gt;

&lt;p&gt;É um exemplo idiota, mas serve para o que eu quero lhe mostrar.&lt;/p&gt;

&lt;p&gt;Como eu disse, tente imaginar um código em produção, pensando quantas vezes você já teve que
ver o código da Classe ancestral (ou uma hierarquia de classes inteira) para saber se podia ou não chamar um método; se devia ou não
chamar o código ancestral do método; se um determinado atributo já havia sido inicializado, etc.&lt;/p&gt;

&lt;p&gt;Antigamente, nos compiladores mais antigos, era possível fazer uma chamada a um método abstrato — sei que o compilador FreePascal
não permite, nem compila — mas não sei se o compilador atual do Delphi permite. Bem, em compiladores antigos esse é mais um problema:
“Será que posso utilizar &lt;code&gt;inherited&lt;/code&gt; nesse método? Como saber se é abstrato?”&lt;/p&gt;

&lt;p&gt;Se não me engano, acho que o Java permite a chamada a métodos abstratos — me corrijam se eu estiver errado.&lt;/p&gt;

&lt;h3 id=&quot;exemplo-3&quot;&gt;Exemplo 3 — Herança pode ser o Mal em qualquer lugar&lt;/h3&gt;

&lt;p&gt;O próximo exemplo não é sobre &lt;em&gt;Object Pascal&lt;/em&gt;, mas sim Java. Muitas pessoas pensam que algo está correto só
porque foi feito por uma grande empresa. Não. Pode ser uma grande empresa lucrativa, porém seus programadores
não são robôs, eles falham.&lt;/p&gt;

&lt;blockquote&gt;
  Quando então usar herança? Essa é uma questão difícil. Na minha visão particular, a resposta seria um enfático “quase nunca”.
  &lt;footer&gt;&lt;cite title=&quot;Paulo Silveira&quot;&gt;Como não aprender orientação a objetos: Herança — Paulo Silveira&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.caelum.com.br/como-nao-aprender-orientacao-a-objetos-heranca/&quot;&gt;Clique aqui&lt;/a&gt; para ler o artigo na íntegra e
ver como os arquitetos do Java erraram incrivelmente no &lt;em&gt;design&lt;/em&gt; da arquitetura de &lt;em&gt;Servlets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A solução proposta pelo autor do artigo é a mesma que proponho em quase todos os posts aqui no blog:
&lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Utilize Interfaces&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;no-prximo-artigo&quot;&gt;No próximo artigo…&lt;/h2&gt;

&lt;p&gt;Espero que você tenha entendido. Herança viola o Encapsulamento. Não é apenas um conceito, mas um fato.&lt;/p&gt;

&lt;p&gt;No próximo artigo irei falar mais sobre &lt;strong&gt;Duplicação de Código&lt;/strong&gt; ao utilizarmos a Herança de Classe.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-3/&quot;&gt;Clique aqui&lt;/a&gt; para ler a &lt;strong&gt;Parte #3&lt;/strong&gt; dessa série.&lt;/p&gt;

&lt;p&gt;Caso você tenha alguma dúvida ou quiser compartilhar seus pensamentos sobre essa série, utilize a área 
abaixo para comentários.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 May 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/</guid>
      </item>
    
      <item>
        <title>Herança pode ser o Mal da Orientação a Objetos — Parte 1</title>
        <description>&lt;p&gt;Se você utiliza Herança em seu código, especificamente &lt;strong&gt;Herança de Classe&lt;/strong&gt;, pode estar
cometendo um &lt;strong&gt;erro&lt;/strong&gt; terrível.&lt;/p&gt;

&lt;p&gt;Com o uso da Herança você &lt;strong&gt;viola o encapsulamento&lt;/strong&gt; de suas Classes, deixa seu código menos
&lt;strong&gt;flexível&lt;/strong&gt; e mais &lt;strong&gt;complexo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Herança de Classe deve ser &lt;strong&gt;evitada&lt;/strong&gt; a todo custo.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1444212477490-ca407925329e.jpg&quot; alt=&quot;Imagem&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Se você já programa utilizando &lt;strong&gt;Orientação a Objetos&lt;/strong&gt; há muito tempo, utilizando &lt;strong&gt;Classes e 
Subclasses&lt;/strong&gt; em seu código para “reutilizar” funcionalidades, eu realmente &lt;strong&gt;não&lt;/strong&gt; espero que você 
entenda e concorde comigo tão rapidamente.&lt;/p&gt;

&lt;p&gt;Será necessário &lt;strong&gt;tempo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Tempo para digerir as informações. Tempo para uma &lt;strong&gt;releitura&lt;/strong&gt;. Tempo para &lt;strong&gt;pesquisas&lt;/strong&gt; feitas por
você mesmo. Tempo para ler sobre &lt;strong&gt;outras linguagens&lt;/strong&gt;. Tempo para ler outros &lt;strong&gt;artigos e livros&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Depois você poderá formar sua opinião própria. Mas faça isso baseado em &lt;strong&gt;fatos&lt;/strong&gt; e não baseado
em &lt;strong&gt;preconceitos&lt;/strong&gt; ou ignorância de informações.&lt;/p&gt;

&lt;p&gt;No fim eu espero veementemente que você junte tudo isso e chegue a mesma conclusão que eu cheguei: 
&lt;strong&gt;Herança é o Mal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;E, claro, é importante saber que grandes empresas e desenvolvedores ao redor do mundo já 
chegaram a mesma conclusão faz muito tempo.&lt;/p&gt;

&lt;p&gt;Mas porfavor, não pense que estou &lt;strong&gt;abolindo&lt;/strong&gt; completamente a Herança. Estou lhe dizendo que ela é má,
mas mesmo assim haverá momentos em que poderá ser mais &lt;strong&gt;simples&lt;/strong&gt; ou eficiente utitilizá-la do que outra 
abordagem. Por exemplo, um médico pode tomar a decisão de amputar a perna de um paciente para mantê-lo vivo. 
Não é algo “bom” para se fazer se pensarmos somente na amputação, no entanto pode ser a melhor decisão se 
você pensar no todo — a sobrevivência do paciente.&lt;/p&gt;

&lt;p&gt;É o mesmo com a Herança. Você tem essa possibilidade, mas só deverá utilizar em último recurso.&lt;/p&gt;

&lt;h2 id=&quot;heranca&quot;&gt;Herança&lt;/h2&gt;

&lt;p&gt;A Herança é um dos pilares da Orientação a Objetos, assim como &lt;strong&gt;Encapsulamento&lt;/strong&gt; e &lt;strong&gt;Polimorfismo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se uma Classe B herda de A, então B &lt;strong&gt;é-um&lt;/strong&gt; A. Herança é isso. As Subclasses serão substitutas mais especializadas
de suas Super Classes.&lt;/p&gt;

&lt;p&gt;Quando comecei a estudar Orientação a Objetos — 20 anos atrás — foi a primeira coisa que li. Esse era o 
mantra na época: &lt;strong&gt;Herança, Encapsulamento e Polimorfismo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para alguém como eu que só tinha visto &lt;strong&gt;código procedural&lt;/strong&gt; em C ou Pascal, declarar uma Classe e Subclasses para
herdar o comportamento reutilizando o código era… &lt;strong&gt;mágico&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Acho que Herança é o que mais &lt;strong&gt;impressiona&lt;/strong&gt; quem está aprendendo — ou mesmo quem já é veterano — a
programar Orientado a Objetos.&lt;/p&gt;

&lt;p&gt;Com Herança o programador consegue extender uma Classe com novos
métodos ou mesmo alterar o comportamento da Hierarquia com pouco código. Mágica.&lt;/p&gt;

&lt;p&gt;E isso não é bom?!&lt;/p&gt;

&lt;p&gt;Quase nunca.&lt;/p&gt;

&lt;p&gt;Eu não entendi logo na primeira vez que li sobre “Herança ser ruim”. Eu já me considerava um desenvolvedor
&lt;strong&gt;experiente&lt;/strong&gt; em Orientação a Objetos, no entanto eu tive que mudar meus conceitos. Na verdade eu tive que
&lt;strong&gt;reaprender&lt;/strong&gt; o que era Orientação a Objetos. Não só por causa do uso da Herança, mas por causa de uma série
de “novas” ideias que venho coletando, estududando e divulgando aqui mesmo, nesse blog.&lt;/p&gt;

&lt;p&gt;E é por isso que eu acho que o mesmo deve acontecer à você, ou seja, mais cedo ou mais tarde você terá que 
mudar/atualizar seus conceitos sobre Orientação a Objetos. É inevitável.&lt;/p&gt;

&lt;p&gt;Mas se você for uma pessoa mais &lt;strong&gt;sábia&lt;/strong&gt; do que eu fui na época quando li sobre &lt;strong&gt;Herança ser ruim e que deve
ser evitada&lt;/strong&gt;, você poderá obter o benefício de ler sobre isso agora e não ter que perder tempo em busca 
de uma resposta para a &lt;strong&gt;dor&lt;/strong&gt; que eu sei que você tem hoje, quando seu código começa a não fazer mais sentido; 
quando sua &lt;strong&gt;Hierarquia de Classes&lt;/strong&gt; se torna um peso e atrapalha mais do que ajuda; quando você tem que sobrescrever
métodos para não “fazer nada”, desabilitando funcionalidades; ou quando você tem que &lt;strong&gt;duplicar código&lt;/strong&gt; porque sua
Classe foi codificada numa “Hierarquia errada”.&lt;/p&gt;

&lt;h2 id=&quot;os-males&quot;&gt;Os Males&lt;/h2&gt;

&lt;p&gt;Se você nunca ouviu dizer que Herança é ruim, deve estar pensando que eu sou louco. Bem, saiba que eu não inventei
tal afirmação. Gostaria de citar um artigo que encontrei na Internet há bastante tempo e que serviu
de inspiração para o título desse artigo que você está lendo agora.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&quot;http://www.javaworld.com/article/2073649/core-java/why-extends-is-evil.html&quot;&gt;artigo&lt;/a&gt; foi publicado na JavaWorld em
&lt;strong&gt;1 de Agosto de 2003&lt;/strong&gt;, intitulado: “&lt;em&gt;Why extends is evil&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;Abaixo um pequeno trecho desse artigo. (Tradução Livre)&lt;/p&gt;

&lt;blockquote&gt;
  Uma vez fui a uma reunião do grupo de usuários Java, onde James Gosling (inventor do Java) foi o orador de destaque. 
  Durante o memorável Q&amp;amp;A sessão, alguém lhe perguntou: &quot;Se você pudesse fazer Java novamente, o que você mudaria?&quot; 
  &quot;Eu deixaria de fora as Classes&quot;, ele respondeu. Após sessarem os risos, ele explicou que o verdadeiro problema 
  não era as Classes em si, mas sim a Herança de Implementação (extends). Herança de Interface 
  (implements) é preferível. Você deve evitar a Herança de Implementação, sempre que possível.
  &lt;footer&gt;&lt;cite title=&quot;JavaWorld&quot;&gt;Why extends is evil — JavaWorld&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nessa série de artigos vou tentar explicar os motivos porque eu — e milhares de desenvolvedores ao redor do mundo — 
considero Herança algo ruim e que deve ser evitada a todo custo.&lt;/p&gt;

&lt;p&gt;Os principais motivos são:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Viola o Encapsulamento&lt;/li&gt;
  &lt;li&gt;Duplicação de Código&lt;/li&gt;
  &lt;li&gt;Forte Acoplamento&lt;/li&gt;
  &lt;li&gt;Hierarquias Complexas&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;no-prximo-artigo&quot;&gt;No próximo artigo…&lt;/h2&gt;

&lt;p&gt;No próximo artigo irei explicar em detalhes porque a Herança &lt;strong&gt;Viola o Encapsulamento&lt;/strong&gt;, com exemplos de código.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/&quot;&gt;Clique aqui&lt;/a&gt; para ler a &lt;strong&gt;Parte #2&lt;/strong&gt; dessa série.&lt;/p&gt;

&lt;p&gt;Caso você tenha alguma dúvida ou quiser compartilhar seus pensamentos sobre essa série, utilize a área 
abaixo para comentários.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;

</description>
        <pubDate>Mon, 23 May 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/</guid>
      </item>
    
      <item>
        <title>Singleton é um anti-padrão?</title>
        <description>&lt;p&gt;O padrão &lt;em&gt;Singleton&lt;/em&gt; garante a existência de &lt;strong&gt;apenas uma instância&lt;/strong&gt; de &lt;strong&gt;uma classe&lt;/strong&gt;, 
mantendo &lt;strong&gt;um ponto global&lt;/strong&gt; de acesso ao seu Objeto.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;conceito&lt;/strong&gt; do &lt;em&gt;Singleton&lt;/em&gt; não está errado, mas sua &lt;strong&gt;implementação&lt;/strong&gt; clássica está.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1462826743322-63f0fbb29f87.jpg&quot; alt=&quot;Imagem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ter um &lt;strong&gt;ponto global de acesso&lt;/strong&gt; é bom.&lt;/p&gt;

&lt;p&gt;Garantir uma &lt;strong&gt;única instância&lt;/strong&gt; para um Objeto, pode ser bom.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;erro&lt;/strong&gt; é ter uma única instância de uma &lt;strong&gt;classe&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por que?&lt;/p&gt;

&lt;p&gt;Simples. Você não deve utilizar pontos globais com &lt;strong&gt;Referência Direta&lt;/strong&gt; em seu código.&lt;/p&gt;

&lt;p&gt;Quando digo Referência Direta quero dizer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variáveis globais&lt;/li&gt;
  &lt;li&gt;Métodos estáticos que não trabalham com &lt;em&gt;Interfaces&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;variaveis-globais&quot;&gt;Variáveis globais&lt;/h2&gt;

&lt;p&gt;Você já deve saber que não devemos utilizar variáveis globais.&lt;/p&gt;

&lt;p&gt;Seu uso é considerado um anti-padrão porque seu conteúdo pode ser modificado/acessado de 
qualquer parte do seu código. Haverá uma dependência direta dessa variável aumentando a 
complexidade do código. Qualquer alteração no valor dessa variável poderá ocasionar problemas
em qualquer parte do código que a utilize.&lt;/p&gt;

&lt;h2 id=&quot;metodos-estaticos&quot;&gt;Métodos estáticos&lt;/h2&gt;

&lt;p&gt;Um &lt;a href=&quot;/posts/nao-utilize-metodos-estaticos/&quot;&gt;método estático&lt;/a&gt; é acessado
diretamente na Classe. Assim como uma variável global, o método estático é uma dependência 
direta e isso não é bom. No entanto o valor retornado 
por um método estático pode ser dinâmico. Pode ser um Objeto. Pode ser uma instância
de uma &lt;em&gt;Interface&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;Método New()&lt;/a&gt; é estático, 
mas seu retorno é dinâmico. Ele também retorna uma instância de uma &lt;em&gt;Interface&lt;/em&gt; ao invés de 
um tipo primitivo ou Classe.&lt;/p&gt;

&lt;h2 id=&quot;padrao-singleton&quot;&gt;O Padrão &lt;em&gt;Singleton&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Um &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;em&gt;Singleton&lt;/em&gt;&lt;/a&gt; utiliza uma variável global, 
que está encapsulada dentro da própria classe. Também utiliza um método estático, que irá 
retornar a instância única encapsulada na Classe. Essa instância é do tipo da própria Classe.&lt;/p&gt;

&lt;p&gt;Precisamos utilizar esse Padrão?&lt;/p&gt;

&lt;p&gt;Sim, por simplicidade.&lt;/p&gt;

&lt;p&gt;Explico.&lt;/p&gt;

&lt;p&gt;É possível nunca utilizar o &lt;em&gt;Singleton&lt;/em&gt;. Basta você utilizar Injeção de Dependência nos
&lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtores&lt;/a&gt; das Classes.&lt;/p&gt;

&lt;p&gt;Mas para cada dependência teríamos que definir um argumento em todos os construtores, de todas as 
Classes, que necessitam utilizar a dependência.&lt;/p&gt;

&lt;p&gt;Isso irá gerar &lt;strong&gt;Complexidade&lt;/strong&gt; no código.&lt;/p&gt;

&lt;p&gt;Você precisa de uma única instância de Objetos para:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Conexão com um SGBD&lt;/li&gt;
  &lt;li&gt;Log de execução/&lt;em&gt;debugging&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Configurações da Aplicação&lt;/li&gt;
  &lt;li&gt;Etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;São exemplos. Na verdade eu posso querer utilizar um &lt;em&gt;pool&lt;/em&gt; de conexões para o SGBD; ter várias Classes
que representam as Configurações, etc. Mas, você entendeu.&lt;/p&gt;

&lt;p&gt;Então garantir a existência de &lt;strong&gt;apenas uma instância&lt;/strong&gt; mantendo &lt;strong&gt;um ponto global&lt;/strong&gt; de acesso ao Objeto 
é importante. Isso minimiza a complexidade.
Ao invés de ter sempre um parâmetro a mais em todos os construtores das Classes — ou da maioria delas — eu
só preciso ter um único ponto de acesso para “algum” Objeto.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;Singleton&lt;/em&gt; clássico parece resolver isso. Sim, mas ele nos traz um problema maior do que o benefício.&lt;/p&gt;

&lt;h3 id=&quot;o-problema&quot;&gt;O Problema&lt;/h3&gt;

&lt;p&gt;Não há como implementar um &lt;em&gt;Singleton&lt;/em&gt; sem haver uma &lt;strong&gt;variável&lt;/strong&gt; para retornar &lt;strong&gt;uma única instância&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O problema não é a variável, pois ela estará encapsulada na Classe. Isso quer dizer que
ela estará protegida. Bem, talvez não tão protegida mas ainda melhor que uma variável global.&lt;/p&gt;

&lt;p&gt;O problema também não é o &lt;strong&gt;método estático&lt;/strong&gt; — mesmo tendo seu uso desencorajado na maioria dos casos —
pois podemos retornar qualquer valor.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;real problema&lt;/strong&gt; do Padrão &lt;em&gt;Singleton&lt;/em&gt;, em sua implementação clássica, é o &lt;strong&gt;tipo de retorno&lt;/strong&gt; do método estático.&lt;/p&gt;

&lt;h3 id=&quot;implementacao-classica&quot;&gt;Implementação Clássica&lt;/h3&gt;

&lt;p&gt;Existem variações de implementação do Padrão &lt;em&gt;Singleton&lt;/em&gt; que utilizam algumas técnicas para inicializar 
a variável encapsulada, ou seja, a instância que será retornada pelo método estático que, na maioria das 
vezes, é denominado &lt;code&gt;GetInstance&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Na implementação mais básica, que pode ser feita em praticamente qualquer linguagem Orientada a Objetos,
implementamos construtores da Classe 
como privados. Assim o utilizador da Classe não conseguirá instanciar Objetos dessa Classe diretamente. Depois
é definido um (ou mais) método estático — &lt;code&gt;GetInstance&lt;/code&gt; — para retornar uma instância da Classe… do mesmo tipo da Classe!&lt;/p&gt;

&lt;p&gt;Aí está o problema.&lt;/p&gt;

&lt;p&gt;Um &lt;strong&gt;grave&lt;/strong&gt; problema.&lt;/p&gt;

&lt;p&gt;Se você retornar uma instância do mesmo tipo da Classe, seu código terá uma dependência direta com essa Classe.
Só isso pode arruinar qualquer tentativa de testes automatizados no código.&lt;/p&gt;

&lt;p&gt;Veja um exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TUserAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ChangePassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewPassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Invalid Password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Must have 8 characters or more&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TMSSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;É um código idiota, mas serve ao propósito.&lt;/p&gt;

&lt;p&gt;Vejamos.&lt;/p&gt;

&lt;p&gt;Existe um Classe &lt;code&gt;TUserAction&lt;/code&gt; que tem um método para alterar o &lt;em&gt;password&lt;/em&gt; do usuário logado. Esse método tem 
algumas validações simples.&lt;/p&gt;

&lt;p&gt;Alteramos seu &lt;em&gt;password&lt;/em&gt; e depois essa alteração será persistida no SGBD.&lt;/p&gt;

&lt;p&gt;A chamada &lt;code&gt;TMSSQL.GetInstance&lt;/code&gt; é um &lt;em&gt;Singleton&lt;/em&gt;. O método irá retornar uma conexão &lt;code&gt;TMSSQLConnection&lt;/code&gt; para o MSSQL.&lt;/p&gt;

&lt;p&gt;Utilizamos então o método &lt;code&gt;Save(User)&lt;/code&gt; para persistir as alterações.&lt;/p&gt;

&lt;p&gt;Não importa como &lt;code&gt;Save(User)&lt;/code&gt; sabe como persistir um usuário. Isso não é relevante. O problema aqui é
como iremos testar &lt;code&gt;ChangePassword&lt;/code&gt; sem fazer a integração/conexão real com o SGBD (MSSQL).&lt;/p&gt;

&lt;p&gt;Eu só quero testar o método utilizando um &lt;strong&gt;teste automatizado&lt;/strong&gt;. Eu não quero ter que conectar num SGBD real,
utilizar &lt;em&gt;user/password&lt;/em&gt; reais e muito menos alterar algum dado.&lt;/p&gt;

&lt;p&gt;Quero fazer &lt;strong&gt;testes de unidade&lt;/strong&gt;, não &lt;strong&gt;testes de integração&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Bem, se &lt;code&gt;TMSSQL.GetInstance&lt;/code&gt; me retorna uma instância de &lt;code&gt;TMSSQLConnection&lt;/code&gt;, uma Classe concreta, &lt;strong&gt;não é possível
fazer o teste automatizado&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;É um exemplo simples. Vejo isso na maioria dos códigos “&lt;em&gt;Object Pascal&lt;/em&gt;” — que não tem nada de Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;Na verdade, a maioria iria utilizar uma instância de algum
&lt;a href=&quot;/posts/datamodule-e-apenas-um-container/&quot;&gt;DataModule&lt;/a&gt; e iria substituir a chamada &lt;code&gt;TMSSQL.GetInstance&lt;/code&gt;
por apenas &lt;code&gt;DM.conMSSQL&lt;/code&gt; ou seja, duas variáveis. Triste.&lt;/p&gt;

&lt;p&gt;Entendeu por que não devemos utilizar uma instância de Classe concreta?&lt;/p&gt;

&lt;p&gt;E qual a solução?&lt;/p&gt;

&lt;p&gt;Retornar uma instância de &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interface&lt;/a&gt; ao invés
de uma instância do tipo Classe.&lt;/p&gt;

&lt;h3 id=&quot;implementacao-sugerida&quot;&gt;Implementação Sugerida&lt;/h3&gt;

&lt;p&gt;O que irei sugerir para a implementação de um &lt;em&gt;Singleton&lt;/em&gt; é tão simples quanto parece, mas com um ganho
incontestável: &lt;strong&gt;Desacoplamento&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Utilize &lt;em&gt;Interfaces&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ao invés de &lt;code&gt;TMSSQL.GetInstance&lt;/code&gt; retornar um &lt;code&gt;TMSSQLConnection&lt;/code&gt;, o método irá retornar um &lt;code&gt;IConnection&lt;/code&gt; ou seja,
uma &lt;em&gt;Interface&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se agora temos um retorno que é uma &lt;em&gt;Interface&lt;/em&gt;, podemos ter qualquer Classe que implemente essa &lt;em&gt;Interface&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A Classe &lt;code&gt;TMSSQLConnection&lt;/code&gt; deverá implementar &lt;code&gt;IConnection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;E onde está desacoplamento?&lt;/p&gt;

&lt;p&gt;Você poderá retornar qualquer instância que implemente &lt;code&gt;IConnection&lt;/code&gt; e isso pode ser feito de várias formas.&lt;/p&gt;

&lt;p&gt;Se quiser escrever menos, utilize &lt;strong&gt;diretivas de compilação&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TMSSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Assigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{$IFDEF TEST}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TFakeConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{$ELSE}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TMSSQLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;{$ENDIF}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Essa é a maneira “Rápido e sujo”. Você pode começar por aí caso nunca tenha pensado nisso. Quando estiver
em “modo de teste”, ative a diretiva &lt;code&gt;TEST&lt;/code&gt;, do contrário a Classe de produção será utilizada.&lt;/p&gt;

&lt;p&gt;A Classe &lt;code&gt;TFakeConnection&lt;/code&gt; não se conecta em nenhum SGBD. Talvez você possa utilizá-la para fazer 
um log das instruções SQL ou &lt;strong&gt;não fazer nada&lt;/strong&gt; quando chamar o método &lt;code&gt;Save&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se você está testando as &lt;strong&gt;Regras de Negócio&lt;/strong&gt;, a persistência é irrelevante.&lt;/p&gt;

&lt;p&gt;Depois você pode &lt;strong&gt;refatorar&lt;/strong&gt; esse código e deixá-lo mais Orientado a Objetos, utilizando 
Injeção de Dependência em conjunto com &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_factory_pattern&quot;&gt;&lt;em&gt;Abstract Factory Pattern&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como?&lt;/p&gt;

&lt;p&gt;Bem, em algum lugar no seu código você deverá ter uma chamada para “inicializar” a Classe &lt;code&gt;TMSSQL&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TMSSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IConnectionFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;initialization&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TMSSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TDbConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mssql&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mais um vez estaremos utilizando métodos estáticos. Mas estamos em busca de simplicidade.
Não devemos ser &lt;strong&gt;puristas&lt;/strong&gt; em Orientação a Objetos se não há nenhum benefício. Sempre haverá partes do código
que poderiam melhorar, refatorar, eliminar, etc. Enfim.&lt;/p&gt;

&lt;p&gt;A Classe &lt;code&gt;TMSSQL&lt;/code&gt; deverá ser bem pequena e sem complexidade.&lt;/p&gt;

&lt;p&gt;O atributo &lt;code&gt;FFactory&lt;/code&gt; é um &lt;code&gt;class var&lt;/code&gt; assim como &lt;code&gt;FInstance&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Então você poderá ter novas Classes que implementam &lt;code&gt;IConnectionFactory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No exemplo temos &lt;code&gt;TDbConnectionFactory&lt;/code&gt;. Optei por utilizar um parâmetro que me diz qual “tipo” de Classe será
utilizada. Se eu quiser testar o código bastaria chamar &lt;code&gt;TDbConnectionFactory.New(&#39;test&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Utilize seu estilo.&lt;/p&gt;

&lt;p&gt;Após essa alteração o método &lt;code&gt;GetInstance&lt;/code&gt; pode ser refatorado:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TMSSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Assigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A chamada a &lt;code&gt;FFactory.NewConnection&lt;/code&gt; irá gerar uma nova instância de &lt;code&gt;IConnection&lt;/code&gt;. Qual a Classe que 
estará sendo utilizada é irrelevante para o código que utiliza &lt;code&gt;TMSSQL.GetInstance&lt;/code&gt; em todos os lugares,
como deve ser. O retorno poderia ser &lt;code&gt;TMSSQLConnection&lt;/code&gt;, &lt;code&gt;TFakeConnection&lt;/code&gt; ou qualquer outra classe que
implemente &lt;code&gt;IConnection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Esse é um &lt;em&gt;Singleton&lt;/em&gt; &lt;strong&gt;simples&lt;/strong&gt;, &lt;strong&gt;desacoplado&lt;/strong&gt; e &lt;strong&gt;Orientado a Objetos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 May 2016 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/singleton-e-um-anti-padrao/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/singleton-e-um-anti-padrao/</guid>
      </item>
    
  </channel>
</rss>
