<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Pascal Programming</title>
    <description>Sacadas sobre Programação Orientada a Objetos e Object Pascal.
</description>
    <link>http://objectpascalprogramming.com/</link>
    <atom:link href="http://objectpascalprogramming.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>FreeAndNil... Esqueça</title>
        <description>&lt;p&gt;Se você utiliza o paradigma da Orientação a Objetos corretamente, você não precisa utilizar
&lt;em&gt;FreeAndNil&lt;/em&gt;… você não precisa nem mesmo utilizar o método &lt;em&gt;Free&lt;/em&gt;!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1452942000102-9c4c7aaeac81.jpg&quot; alt=&quot;Antigo pensamento&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduo&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Já existe muitas controvérsias e discussões na Internet em torno do uso do &lt;em&gt;FreeAndNil&lt;/em&gt;, se é “certo” ou
“errado” utilizá-lo.&lt;/p&gt;

&lt;p&gt;Dizem que o código fica mais seguro, previne vazamentos de memória… será mesmo?&lt;/p&gt;

&lt;p&gt;As coisas mudam. Nem sempre o que aprendemos no passado será verdade no futuro.&lt;/p&gt;

&lt;p&gt;Por exemplo. Muitos programadores aprenderam Pascal utilizando variáveis globais — a IDE Delphi/Lazarus adiciona 
automaticamente uma variável global na &lt;em&gt;unit&lt;/em&gt; do &lt;em&gt;Form&lt;/em&gt; — e alguns mantém esse aprendizado até hoje como uma
verdade, como correto. Outro exemplo do antigo aprendizado é o uso do &lt;em&gt;FreeAndNil&lt;/em&gt;. Para muitos programadores 
seu uso é incontestável.&lt;/p&gt;

&lt;p&gt;Então não quero tornar esse post mais um debate sem fim, mas apenas mostrar porque &lt;strong&gt;eu&lt;/strong&gt; não
utilizo &lt;em&gt;FreeAndNil&lt;/em&gt; em 99.9% dos casos e explicar porque considero errado utilizá-lo — mesmo quando sou 
obrigado a utilizá-lo — mas deixo à você leitor, o veredicto final.&lt;/p&gt;

&lt;h2 id=&quot;programao-imperativa-ou-estruturada&quot;&gt;Programação Imperativa ou Estruturada&lt;/h2&gt;

&lt;p&gt;A Linguagem Pascal é realmente surpreendente. Até hoje seus desenvolvedores conseguem suportar
vários tipos de paradigmas de desenvolvimento dentro da mesma linguagem.&lt;/p&gt;

&lt;p&gt;Infelizmente (meu ponto de vista) o paradigma mais utilizado pelas comunidades Pascal — e também Java, 
C#, PHP… sim, eles também — é o Imperativo ou Estruturado. Para mim ambos são equivalentes e se complementam.
O paradigma Estruturado só melhorou o Imperativo, adicionando estruturas de sequência, decisão e iteração.&lt;/p&gt;

&lt;p&gt;Eu me refiro a ambos como Imperativo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Na Ciência da Computação, programação imperativa é um paradigma de programação que descreve 
    a computação como ações, enunciados ou comandos que mudam o estado (variáveis) de um programa.
    Muito parecido com o comportamento imperativo das linguagens naturais que expressam ordens, 
    programas imperativos são uma sequência de comandos para o computador executar.
  &lt;/p&gt;
  &lt;footer&gt;&lt;cite title=&quot;Wikipedia&quot;&gt;— Wikipedia&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;As diferenças entre o paradigma Imperativo comparado ao paradigma Orientado a Objetos podem ser bem
sutis ou muito explícitos, dependendo do caso.&lt;/p&gt;

&lt;p&gt;No paradigma Imperativo o programador diz ao computador para seguir uma sequência de ações passo-a-passo,
enquanto que no paradigma Orientado a Objetos são &lt;strong&gt;os objetos que determinam a sequência de ações&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1442458370899-ae20e367c5d8.jpg&quot; alt=&quot;??!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pode parecer muito estranho afirmar isso, pois mesmo objetos tem códigos sequênciais em seus métodos, mas essa
&lt;a href=&quot;/posts/pensando-em-objetos/&quot;&gt;diferença sutil de mindset&lt;/a&gt; pode determinar se uma aplicação
é mais ou menos Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;O uso de &lt;em&gt;FreeAndNil&lt;/em&gt; remete ao código Imperativo. Significa que você tem uma variável global — ou um atributo
num objeto — que está sendo recriada várias vezes. Isso é o que eu penso quando encontro um &lt;em&gt;FreeAndNil&lt;/em&gt; no código.
E isso é péssimo. Primeiro que instâncias deveriam ser &lt;strong&gt;imutáveis&lt;/strong&gt;, pois a mutabilidade é um dos fatores que
trazem complexidade para o código e segundo, se você está reutilizando uma variável, o &lt;em&gt;design&lt;/em&gt; do seu código
está errado, na maioria dos casos.&lt;/p&gt;

&lt;p&gt;Sobre o uso do &lt;em&gt;FreeAndNil&lt;/em&gt;, Nick Hodges &lt;a href=&quot;http://www.nickhodges.com/post/Using-FreeAndNil.aspx&quot;&gt;escreveu&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“When should I use FreeAndNil?” is “never”, or at least “Almost never, and if you must use it, make sure that there is a really, really good reason to do so and that you clearly document that reason”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A opinião dele é &lt;strong&gt;nunca&lt;/strong&gt;, ou quase nunca, utilizar &lt;em&gt;FreeAndNil&lt;/em&gt; a não ser que tenha uma ótima razão para fazê-lo.
Seu post data de Dezembro de 2011. É um post antigo que fala de um assunto mais antigo ainda… mas que 
continuamos a falar sobre isso em 2016. Triste.&lt;/p&gt;

&lt;p&gt;Para quem não sabe, Nick Hodges é programador Delphi de longa data e autor de &lt;a href=&quot;http://www.amazon.com/gp/product/1941266037/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1941266037&amp;amp;linkCode=as2&amp;amp;tag=nickhodgeshomepa&quot;&gt;Coding in Delphi&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tentando-achar-motivos-para-usar-freeandnil&quot;&gt;Tentando achar motivos para usar &lt;em&gt;FreeAndNil&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Vou tentar dar alguns exemplos do uso de &lt;em&gt;FreeAndNil&lt;/em&gt; para depois mostrar o que eu considero ser
a forma correta, utilizando o paradigma Orientado a Objetos.&lt;/p&gt;

&lt;p&gt;Vamos codificar um acesso hipotético ao serviço da Amazon S3 para obter um arquivo e salvá-lo no HD.&lt;/p&gt;

&lt;h3 id=&quot;exemplo-1&quot;&gt;Exemplo 1&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAWSCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAWSClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Rgn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TS3Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TS3Bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TS3Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAWSCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;secret_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAWSClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Rgn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TS3Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rgn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetBucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mybucket&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;./foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Rgn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O programador teve que informar a sequência de ações passo-a-passo para o compilador. Mas o código parece bem “simples”, não?&lt;/p&gt;

&lt;p&gt;Criamos uma credencial, um client, uma região, inicializamos &lt;em&gt;Bucket&lt;/em&gt; e &lt;em&gt;Obj&lt;/em&gt; com &lt;code&gt;nil&lt;/code&gt; (?!!).&lt;/p&gt;

&lt;p&gt;Depois &lt;em&gt;Rgn&lt;/em&gt; chama &lt;em&gt;GetBucket&lt;/em&gt; para obter uma nova instância de &lt;em&gt;TS3Bucket&lt;/em&gt; e este chama &lt;em&gt;GetObject&lt;/em&gt; para
obtermos uma nova instância de &lt;em&gt;TS3Object&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por que, neste exemplo, &lt;strong&gt;precisamos&lt;/strong&gt; inicializar &lt;em&gt;Bucket&lt;/em&gt; e &lt;em&gt;Obj&lt;/em&gt; com &lt;code&gt;nil&lt;/code&gt;? O motivo é porque dentro 
do &lt;em&gt;try-finally&lt;/em&gt;, pode ocorrer uma &lt;em&gt;Exception&lt;/em&gt; (acesso a Internet, HTTP, login, etc) nestas linhas&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rgn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetBucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mybucket&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;e se ocorrer uma exceção a variável &lt;em&gt;Bucket&lt;/em&gt; e/ou &lt;em&gt;Obj&lt;/em&gt; nunca serão inicializadas e no fim ocorrerá uma 
violação de acesso quando o compilador tentar liberar a memória utilizando &lt;em&gt;.Free&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bem, na minha opinião, esse código é muito errado. Tem mais código de infraestrutura para o computador do que código para 
resolver meu requisito, que é salvar o arquivo no meu computador.&lt;/p&gt;

&lt;p&gt;Mas, talvez, o &lt;em&gt;FreeAndNil&lt;/em&gt; possa nos ajudar com esse problema… não é?&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Dica:&lt;/strong&gt; Você não deve criar um objeto em A (&lt;em&gt;Rgn.GetBucket&lt;/em&gt;) e destruí-lo B (&lt;em&gt;TForm1.SaveButtonClick&lt;/em&gt;).
Isso é errado para linguagens com liberação manual de memória. Sempre crie e libere seus objetos dentro de um mesmo contexto.
Não siga o &lt;em&gt;design&lt;/em&gt; do exemplo acima, é apenas um exemplo.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Continuando…&lt;/p&gt;

&lt;p&gt;Escrevemos demais num único método (evento, na verdade). Melhor seria refatorar esse código para a reutilização dos objetos,
para podermos chamar os métodos de &lt;em&gt;Bucket&lt;/em&gt; ou &lt;em&gt;Obj&lt;/em&gt; em outros botões ou formulários.&lt;/p&gt;

&lt;h4 id=&quot;refatorando&quot;&gt;Refatorando&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TForm1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAWSCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAWSClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FRgn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TS3Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FBucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TS3Bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;FObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TS3Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FormCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FCredentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAWSCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;secret_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAWSClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FRgn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TS3Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FormDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FRgn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FBucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FBucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FRgn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetBucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mybucket&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FBucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;./foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;FreeAndNil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;FreeAndNil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FBucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora o código esta menor e continua “seguro”. Se houver uma exceção, as variáveis &lt;em&gt;FBucket&lt;/em&gt; e &lt;em&gt;FObj&lt;/em&gt; ainda
serão liberadas no fim do programa, no envento &lt;em&gt;FormDestroy&lt;/em&gt;, sem violação de acesso porque o &lt;em&gt;FreeAndNil&lt;/em&gt;
irá garantir isso.&lt;/p&gt;

&lt;p&gt;Agora ficou muito melhor? Eu acho que não:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Apenas movemos o problema para outro lugar;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Form1&lt;/em&gt; não deveria saber quem é &lt;em&gt;Bucket&lt;/em&gt;, &lt;em&gt;Region&lt;/em&gt;, &lt;em&gt;Credentials&lt;/em&gt;, etc apenas porque queremos reutilizar suas instâncias;&lt;/li&gt;
  &lt;li&gt;Se &lt;em&gt;FBucket&lt;/em&gt; e &lt;em&gt;FObj&lt;/em&gt; são recriados toda hora, qual a vantagem de termos eles como atributos de &lt;em&gt;Form1&lt;/em&gt;?&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Form1&lt;/em&gt; agora é um objeto inchado porque “sabe demais”;&lt;/li&gt;
  &lt;li&gt;Você ainda precisa se preocupar com a liberação de memória no &lt;em&gt;FormDestroy&lt;/em&gt; e utilizando &lt;em&gt;try-finally&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;exemplo-2&quot;&gt;Exemplo 2&lt;/h3&gt;

&lt;p&gt;Se o exemplo anterior foi simples demais, veja este outro &lt;a href=&quot;https://github.com/mdbs99/Greyhound/blob/0524b1f61e9ef267d17544ae1fc9dfa82683d64c/src/ghsql.pas#L1170&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Este código faz parte do &lt;a href=&quot;https://github.com/mdbs99/Greyhound/&quot;&gt;Greyhound&lt;/a&gt;, um projeto OpenSource codificado em FreePascal por mim.&lt;/p&gt;

&lt;p&gt;Isso mesmo, estou lhe dizendo que usei &lt;em&gt;FreeAndNil&lt;/em&gt; em um dos meus projetos.&lt;/p&gt;

&lt;p&gt;Eu utilizo &lt;em&gt;FreeAndNil&lt;/em&gt; 3 vezes em todo o projeto (nesta mesma &lt;em&gt;unit&lt;/em&gt;, pode procurar). E sim, continuo achando errado. Mas esse
projeto tem uma complexidade muito maior do que o simples exemplo anterior.&lt;/p&gt;

&lt;h4 id=&quot;explicando-o-uso-do-freeandnil-no-projeto-greyhound&quot;&gt;Explicando o uso do &lt;em&gt;FreeAndNil&lt;/em&gt; no Projeto Greyhound&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;FData&lt;/em&gt; é um atributo do tipo &lt;em&gt;TDataSet&lt;/em&gt;. A instância de &lt;em&gt;TghSQLTable&lt;/em&gt;, que contem &lt;em&gt;FData&lt;/em&gt;, não sabe como o &lt;em&gt;DataSet&lt;/em&gt; é criado.
Ela depende de outro objeto para criar o &lt;em&gt;DataSet&lt;/em&gt;, que depende dos filtros setados e também
do tipo de &lt;em&gt;Lib&lt;/em&gt; utilizada para conexão ao SGBD. Então, neste caso, foi &lt;strong&gt;mais fácil&lt;/strong&gt; destruir e pedir uma nova instância.&lt;/p&gt;

&lt;p&gt;Mas esse design &lt;ins&gt;não está correto&lt;/ins&gt; assim como eu não estou 100% satisfeito com ele. Motivos esses que me farão
reescrever toda a Lib — na verdade já estou reescrevendo a algum tempo, porém privadamente.&lt;/p&gt;

&lt;h2 id=&quot;freeandnil-na-programao-orientada-a-objetos&quot;&gt;&lt;em&gt;FreeAndNil&lt;/em&gt; na Programação Orientada a Objetos&lt;/h2&gt;

&lt;p&gt;É claro que &lt;em&gt;FreeAndNil&lt;/em&gt; não existe aqui. Nenhuma &lt;em&gt;procedure&lt;/em&gt; ou &lt;em&gt;function&lt;/em&gt; deveriam existir.&lt;/p&gt;

&lt;p&gt;Apenas Objetos com Estado e Comportamento, interagindo entre si e manipulando dados.&lt;/p&gt;

&lt;p&gt;No início do post eu falei que não há necessidade de usar &lt;em&gt;FreeAndNil&lt;/em&gt; ou mesmo &lt;em&gt;Free&lt;/em&gt;. É claro que estou falando do uso de 
&lt;em&gt;Interfaces&lt;/em&gt; em conjunto com a técnica que expliquei &lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;aqui sobre o Método &lt;em&gt;New&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Utilizando &lt;em&gt;Interfaces&lt;/em&gt; para usufruir do &lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;&lt;em&gt;“Garbage Collector”&lt;/em&gt;&lt;/a&gt; do compilador, 
não precisaremos utilizar &lt;em&gt;Free&lt;/em&gt; e muito menos &lt;em&gt;FreeAndNil&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Então como seria a codificação do exemplo acima utilizando Orientação a Objetos?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TS3Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TAWSClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;TAWSCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;secret_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buckets&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mybucket&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;./foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Não é a melhor &lt;em&gt;design&lt;/em&gt;, mas melhorou 100% comparado aos exemplos anteriores.&lt;/p&gt;

&lt;p&gt;Não tenho variáveis, nem mutabilidade, nem código de infraestrutura como &lt;em&gt;try-finally&lt;/em&gt; para desalocação de memória. É
menor, mais simples, mais direto.&lt;/p&gt;

&lt;p&gt;Mas ainda haverá duplicação de código toda vez que for utilizar os métodos de um &lt;em&gt;S3Bucket&lt;/em&gt; ou &lt;em&gt;S3Object&lt;/em&gt; em outros lugares.
Então como faríamos se quiséssemos reutilizar o código sem ter que especificar a &lt;em&gt;Credentials&lt;/em&gt; e &lt;em&gt;Client&lt;/em&gt; todas as vezes?&lt;/p&gt;

&lt;p&gt;Uma das opções é codificar sua própria implementação de &lt;em&gt;IS3Region&lt;/em&gt;, a &lt;em&gt;interface&lt;/em&gt; que &lt;em&gt;TS3Region&lt;/em&gt; implementa.
No construtor da nova implementação (ex: &lt;em&gt;TMyRegion&lt;/em&gt;) você poderá inicializar &lt;em&gt;Credentials&lt;/em&gt; e &lt;em&gt;Client&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;refatorando-1&quot;&gt;Refatorando&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TMyRegion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IS3Region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IS3Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IS3Region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IS3Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;c1&quot;&gt;// IS3Region methods...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TMyRegion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IS3Region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;inherited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FOrigin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TMyRegion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IS3Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TMyRegion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TS3Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;TAWSClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TAWSCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;secret_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    

&lt;span class=&quot;c1&quot;&gt;//....&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TForm1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TMyRegion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buckets&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mybucket&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;./foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A instância &lt;em&gt;FOrigin&lt;/em&gt; será utilizada dentro de cada implementação para cada método de &lt;em&gt;IS3Region&lt;/em&gt;.
A implementação &lt;em&gt;TMyRegion&lt;/em&gt; é um &lt;em&gt;Decorator&lt;/em&gt; implícito.&lt;/p&gt;

&lt;p&gt;O código ficou ainda menor e mais robusto, pois agora qualquer modificação em &lt;em&gt;Credentials&lt;/em&gt; e/ou &lt;em&gt;Client&lt;/em&gt; serão
modificados em apenas um lugar, a classe &lt;em&gt;TMyRegion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;É claro que o código das &lt;em&gt;classes&lt;/em&gt; e &lt;em&gt;interfaces&lt;/em&gt; somados podem ser maiores que a quantidade de código do modelo Imperativo.
Mas isso é irrelevante quando você consegue codificar de forma mais segura e consistente, após implementar as &lt;em&gt;interfaces&lt;/em&gt;
e &lt;em&gt;classes&lt;/em&gt;. Se implementá-los bem, você só precisa fazer isso uma vez, enquanto que no modelo Imperativo a qualquer momento
você pode quebrar o código devido a sua mutabilidade e &lt;strong&gt;acoplamento temporal&lt;/strong&gt; — assunto para outro post.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Para dizer se é “certo” ou “errado” utilizar &lt;em&gt;FreeAndNil&lt;/em&gt; é necessário saber o contexto e o paradigma utilizado para
codificar o sistema.&lt;/p&gt;

&lt;p&gt;Sistemas antigos com muito código Imperativo o utilizam. Sem problemas.&lt;/p&gt;

&lt;p&gt;Mesmo em sistemas Orientado a Objetos poderemos encontrar &lt;em&gt;FreeAndNil&lt;/em&gt; devido a alguns motivos bem particulares como, 
por exemplo, utilização de código legado, uso de DLL/SO, uso de &lt;em&gt;lib&lt;/em&gt; de terceiros ou até mesmo por simplicidade em alguns casos.&lt;/p&gt;

&lt;p&gt;O importante, no entanto, é estarmos conscientes do seu uso e do &lt;strong&gt;motivo&lt;/strong&gt; de estarmos utilizando-o. Não tome como uma regra 
quando dizem que é melhor utilizar &lt;em&gt;FreeAndNil&lt;/em&gt; em todos os casos ou que “não faz mal utilizar”… &lt;em&gt;FreeAndNil&lt;/em&gt; pode não
fazer mal diretamente, mas tem potencial para fazer mal indiretamente quando ajuda a deixar seu código com um péssimo &lt;em&gt;design&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sempre pesquise sobre o real motivo de utilizar qualquer função, classe, estrutura e todo o resto… e tire suas próprias conclusões.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/freeandnil-esqueca/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/freeandnil-esqueca/</guid>
      </item>
    
      <item>
        <title>Interfaces em Todo Lugar</title>
        <description>&lt;p&gt;Variáveis não devem ser do tipo Classe.&lt;/p&gt;

&lt;p&gt;Utilize Interfaces para definir o tipo de todas as Variáveis, Atributos e Argumentos de Métodos.&lt;/p&gt;

&lt;p&gt;Por que?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1452776145041-517a74be1f14.jpg&quot; alt=&quot;Pensando&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;interfaces-so-contratos&quot;&gt;Interfaces são Contratos&lt;/h2&gt;

&lt;p&gt;Vou contar uma história.&lt;/p&gt;

&lt;p&gt;Carlos é um empreendedor. Ele tem um Café chamado “Instância do Café” :)&lt;/p&gt;

&lt;p&gt;Seus negócios estão indo muito bem mas seus clientes estão ficando cada vez mais exigentes… ele
precisa contratar um barista mais experiente.&lt;/p&gt;

&lt;p&gt;Ele paga por um anúncio para achar o melhor barista que ele puder pagar. Ele não sabe quem será o novo
contratado, ele só espera que o pretendente tenha as qualificações necessárias para fazer o trabalho que
lhe for designado.&lt;/p&gt;

&lt;p&gt;Carlos não está procurando especificamente um João, Amanda ou um Xavier… suas exigências são apenas
sobre as qualificações de barista. Ele não quer saber se o novo pretendente será homem ou mulher. Não importa
a cor do cabelo e muito menos sobre seu gosto musical. Ele precisa de um profissional, e só.&lt;/p&gt;

&lt;p&gt;O pretendente com as melhores qualificações terá um &lt;strong&gt;contrato&lt;/strong&gt; com Carlos, seja ele/ela quem for.&lt;/p&gt;

&lt;p&gt;Na Orientação a Objetos, a &lt;strong&gt;Interface&lt;/strong&gt; é o contrato firmado entre dois ou mais Objetos.&lt;/p&gt;

&lt;h2 id=&quot;interfaces-definem-o-trabalho-no-as-implementaes&quot;&gt;Interfaces definem o trabalho, não as Implementações&lt;/h2&gt;

&lt;p&gt;Assim como Carlos, você não deve ser “preconceituoso” ao definir trabalho para Classes específicas.&lt;/p&gt;

&lt;p&gt;Defina o contrato do trabalho ou função utilizando Interfaces.&lt;/p&gt;

&lt;p&gt;Toda classe que implementar esse contrato será uma pretendente em potencial.&lt;/p&gt;

&lt;p&gt;Por isso que toda Variável deve ser do tipo Interface — essa é a resposta ao “Porque” no início do post.&lt;/p&gt;

&lt;p&gt;Se você utilizar tipos de Classes em vez de tipos de Interfaces,
você estará restringindo quem fará o trabalho. Isso é preconceito. Seu sistema ficará dependende dessas Classes e 
não poderá deixá-las nunca mais. Não faça isso!&lt;/p&gt;

&lt;p&gt;Exemplo. Eu utilizo &lt;a href=&quot;http://synapse.ararat.cz/doku.php/download&quot;&gt;Synapse&lt;/a&gt; para protocolos de rede como &lt;code&gt;HTTP&lt;/code&gt;, &lt;code&gt;FTP&lt;/code&gt;, etc. 
Mas meus sistemas não conhecem a implementação do Synapse, com exeção de um único módulo onde as classes específicas de Synapse são instânciadas.
Todos os outros módulos/classes só conhecem os contratos, ou seja, as Interfaces para os protocolos de rede, 
mas não se importam em saber quem irá executar o trabalho.
Isso é Polimorfismo. Se eu quiser mudar de Synapse para &lt;a href=&quot;https://lnet.wordpress.com/&quot;&gt;lNet&lt;/a&gt; ou &lt;a href=&quot;http://www.indyproject.org/index.en.aspx&quot;&gt;Indy&lt;/a&gt;, 
poderia fazê-lo em apenas um lugar e tudo continuaria funcionando perfeitamente.&lt;/p&gt;

&lt;p&gt;Eu tenho um projeto OpenSource codificado em FreePascal chamado &lt;a href=&quot;https://github.com/mdbs99/AWS&quot;&gt;AWS Lib&lt;/a&gt;.
Ele é um &lt;em&gt;client&lt;/em&gt; para o  serviço &lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html&quot;&gt;Amazon S3&lt;/a&gt; que também utiliza Synapse
para as chamadas &lt;code&gt;HTTP&lt;/code&gt;.
Este projeto mostra de forma bem simples o que eu quero dizer. Sugiro “passear” pelos fontes e descobrir você mesmo
onde é instanciado o(s) Objeto(s) do Synapse.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/mdbs99/AWS&quot;&gt;AWS Lib&lt;/a&gt; também mostra conceitos sobre &lt;strong&gt;imutabilidade&lt;/strong&gt; que irei
explicar em futuros posts.&lt;/p&gt;

&lt;p&gt;Argumentos e atributos também são variáveis. Então vamos nos referir aos três apenas como &lt;strong&gt;instância&lt;/strong&gt; de agora em diante,
utilizando a nomenclatura correta para o paradigma Orientado a Objetos.&lt;/p&gt;

&lt;p&gt;Utilizando Interfaces em todas as suas instâncias você ganha o benefício do &lt;strong&gt;Polimorfismo&lt;/strong&gt; pois qualquer classe — mesmo
aquelas fora do seu sistema — poderão executar o trabalho de acordo com o contrato. Favorece baixo acoplamento
porque as classes não estarão conectadas entre si, mas sim por Interfaces. Outra vantagem é facilitar a codificação de testes
automatizados, pois podemos criar implementações &lt;em&gt;fake&lt;/em&gt; para qualquer Interface… assunto para outro post.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Dica:&lt;/strong&gt; A utilização de tipos primitivos como Integer, TDateTime ou &lt;code&gt;string&lt;/code&gt; em variáveis sempre será em
função da performance em detrimento ao melhor design. Priorize as Interfaces. Só utilize tipos 
primitivos em métodos locais — você poderá alterar quando quiser sem complicações — ou em casos bem específicos onde o 
ganho de performance é muito maior do que o benefício do Polimorfismo ao utilizar Interfaces.&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/interfaces-em-todo-lugar/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/interfaces-em-todo-lugar/</guid>
      </item>
    
      <item>
        <title>Interfaces e o Método estático New</title>
        <description>&lt;p&gt;No &lt;a href=&quot;/posts/pensando-em-objetos/&quot;&gt;post anterior&lt;/a&gt; eu mostrei um código
Orientado a Objetos onde os Objetos eram instanciados utilizando um Método estático chamado &lt;em&gt;New&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Este método &lt;em&gt;New&lt;/em&gt; não é padrão da linguagem Object Pascal. Ele também não é um &lt;code&gt;constructor&lt;/code&gt;.
Ele é um &lt;strong&gt;Método de classe&lt;/strong&gt; que retorna a mesma Interface que a classe implementa.&lt;/p&gt;

&lt;p&gt;A utilização do Método &lt;em&gt;New&lt;/em&gt; é um padrão que defini para todos os meus projetos.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/829d24cf.jpg&quot; alt=&quot;Pensando&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;object-pascal-e-seu-garbage-collector&quot;&gt;Object Pascal e seu “&lt;em&gt;Garbage Collector&lt;/em&gt;”&lt;/h2&gt;

&lt;p&gt;Ok. Object Pascal não tem &lt;em&gt;garbage collector&lt;/em&gt; como no Java ou C# — e isso é ótimo quando precisamos de performance —
porém temos algo parecido quando utilizamos Interfaces.&lt;/p&gt;

&lt;p&gt;Toda variável que tem uma Interface como seu tipo, por padrão, será desalocada da memória assim que
sair do escopo de execução. Vamos chamar essas variáveis de &lt;strong&gt;variável-interface&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;No momento que o compilador sabe que a variável-interface não será mais utilizada, ele desaloca a memória
chamando o &lt;code&gt;destructor&lt;/code&gt; da instância.&lt;/p&gt;

&lt;p&gt;Isso é ótimo para a programação Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;Significa que, se eu fizer isso corretamente, poderei criar Objetos dentro de Objetos, encadear chamadas de Objetos,
criar novas instâncias &lt;code&gt;inline&lt;/code&gt; para utilizar em argumentos e muito mais… assim como fazem no Java ou C#.&lt;/p&gt;

&lt;h2 id=&quot;o-problema&quot;&gt;O problema&lt;/h2&gt;

&lt;p&gt;Existe um grande problema em utilizar Interfaces:&lt;/p&gt;

&lt;p&gt;A falta da variável-interface.&lt;/p&gt;

&lt;p&gt;Se não implementar da forma correta, você terá algumas violações de acesso (&lt;code&gt;Access Violation&lt;/code&gt;)
e/ou vazamentos de memória (&lt;code&gt;memleaks&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Para que o &lt;em&gt;garbage colletor&lt;/em&gt; funcione corretamente você precisa ter uma variável-interface para receber a instância, sempre.&lt;/p&gt;

&lt;p&gt;Considere o código abaixo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;TTask é uma classe que recebe uma &lt;code&gt;string&lt;/code&gt; no construtor;&lt;/li&gt;
  &lt;li&gt;TTask implementa ITask, uma Interface;&lt;/li&gt;
  &lt;li&gt;TAction é uma classe que recebe uma &lt;strong&gt;interface&lt;/strong&gt; ITask no construtor;&lt;/li&gt;
  &lt;li&gt;TAction implementa IAction, uma Interface;&lt;/li&gt;
  &lt;li&gt;TAction tem um método Execute que retorna uma interface IResult;&lt;/li&gt;
  &lt;li&gt;IResult tem um método ToString que retorna o resultado no formato &lt;code&gt;string&lt;/code&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Quantos vazamentos de memória teremos: 0, 1 ou 2?&lt;/p&gt;

&lt;p&gt;A resposta é 1.&lt;/p&gt;

&lt;p&gt;Porque?&lt;/p&gt;

&lt;p&gt;O compilador fará o seguinte (mais ou menos, em termos leigos):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Executar TTask.Create(Name), criando a instância;&lt;/li&gt;
  &lt;li&gt;A instância criada irá ser passada no argumento, que é do tipo ITask, do construtor de TAction;&lt;/li&gt;
  &lt;li&gt;TAction irá criar uma instância de IResult quando chamar Execute;&lt;/li&gt;
  &lt;li&gt;Utilizando a instância de IResult, o método ToString é chamado e uma &lt;code&gt;string&lt;/code&gt; é retornada;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Onde está o erro?&lt;/p&gt;

&lt;p&gt;Na chamada &lt;code&gt;TAction.Create&lt;/code&gt; porque a instância não é referenciada por nenhuma variável-interface!&lt;/p&gt;

&lt;p&gt;O compilador não tem uma referência, então ele não sabe se deve desalocar a memória.&lt;/p&gt;

&lt;p&gt;Na chamada &lt;code&gt;TTask.Create(Name)&lt;/code&gt; não há problema. O argumento de &lt;code&gt;TAction&lt;/code&gt; recebe uma &lt;code&gt;ITask&lt;/code&gt;, então o compilador
sabe que deverá desalocar essa instância logo que não precisar mais dela.&lt;/p&gt;

&lt;p&gt;Então vamos acertar o código:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora não haverá &lt;code&gt;memleaks&lt;/code&gt; porque agora o compilador tem a referência &lt;code&gt;A&lt;/code&gt; para &lt;code&gt;TAction&lt;/code&gt;. No fim do método
&lt;code&gt;TFoo.Execute&lt;/code&gt; a instância em &lt;code&gt;A&lt;/code&gt; será liberada automaticamente.&lt;/p&gt;

&lt;p&gt;Se não me falha a memória isso foi implementado no Delphi
a partir da versão 3 (me corrijam se eu estiver errado).&lt;/p&gt;

&lt;p&gt;Tem muito material sobre isso na Internet se quiserem mais detalhes, mas acredito que você já sabia disso
ou ao menos já leu sobre isso alguma vez.&lt;/p&gt;

&lt;h2 id=&quot;o-mtodo-new&quot;&gt;O método New&lt;/h2&gt;

&lt;p&gt;Se você prestou atenção nos códigos acima, vai reparar que está na mão do programador saber quando utilizar
uma variável-interface para “dizer” ao compilador que a instância deverá ser liberada automaticamente…&lt;/p&gt;

&lt;p&gt;E é claro que você vai esquecer disso quando estiver programando… várias vezes! Aconteceu comigo. Centenas de vezes.&lt;/p&gt;

&lt;p&gt;Nem precisa ser esquecimento, basta o código mudar numa parte para começar a ter &lt;code&gt;memleaks&lt;/code&gt;, exemplo:&lt;/p&gt;

&lt;p&gt;Se o argumento é do tipo Interface, não há problema em criar uma instância &lt;code&gt;inline&lt;/code&gt;, mas e se o código for
alterado para receber uma classe concreta (mudou de IAction para TAction o argumento)? 
O código pode continuar funcionando, porém haverá &lt;code&gt;memleaks&lt;/code&gt; porque
o compilador não irá mais desalocar a instância criada no argumento por não ser mais do tipo Interface.&lt;/p&gt;

&lt;p&gt;Ora podemos criar &lt;code&gt;inline&lt;/code&gt;, ora não… isso é muito chato!&lt;/p&gt;

&lt;h3 id=&quot;a-soluo&quot;&gt;A Solução&lt;/h3&gt;

&lt;p&gt;Todas as novas instâncias terão uma variável-interface para receber a referência.&lt;/p&gt;

&lt;p&gt;Eu implemento essa “mágica” de forma muito simples utilizando o método &lt;em&gt;New&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TInterfacedObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;cm&quot;&gt;{ Implementação de Create e Execute... irrelevantes }&lt;/span&gt;  

&lt;span class=&quot;cm&quot;&gt;{ Implementação do método New também para TTask... }&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;{...}&lt;/span&gt;  
  
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora nós estamos chamando &lt;code&gt;TAction.New&lt;/code&gt; ao invés de &lt;code&gt;TAction.Create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O método &lt;em&gt;New&lt;/em&gt; irá retornar uma instância de &lt;code&gt;IAction&lt;/code&gt; (interface) diferentemente do construtor
&lt;code&gt;Create&lt;/code&gt; que iria retornar uma instância de &lt;code&gt;TAction&lt;/code&gt; (classe).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sem problemas de &lt;code&gt;memleaks&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Código mais limpo, sem variáveis locais&lt;/li&gt;
  &lt;li&gt;Código mais limpo, sem try-finally para desalocar variáveis locais&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Utilize o método &lt;em&gt;New&lt;/em&gt; em todas as suas classes e nunca mais chame o construtor diretamente.
Assim você não terá o problema da falta da variável-interface, seja por esquecimento ou por
mudanças no código.&lt;/p&gt;

&lt;p&gt;Tá gostando? Alguma dúvida? Não concorda? Posta aí nos comentários.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/interfaces-e-o-metodo-estatico-new/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/interfaces-e-o-metodo-estatico-new/</guid>
      </item>
    
      <item>
        <title>Pensando em Objetos</title>
        <description>&lt;p&gt;Como Pensar em Objetos?&lt;/p&gt;

&lt;p&gt;Aqui vai uma resposta simples e direta:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pensar em Objetos significa &lt;strong&gt;não&lt;/strong&gt; implementar uma tarefa na forma de instruções passo-a-passo para o computador.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1446511437394-36cdff3ae1b3.jpg&quot; alt=&quot;Pensando&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pensar em Objetos é uma mudança de paradigma enorme para quem começou a programar em 
linguagens procedurais como C, ASM ou Pascal e não conseguiu — ou nunca quis — mudar o &lt;em&gt;mindset&lt;/em&gt;
para entender como programar Orientado a Objetos.&lt;/p&gt;

&lt;p&gt;A tempos aprendemos sobre Herança, Encapsulamento e Polimorfismo, mas eu acho que todos nós — inclusive eu, no passado —
não entendemos a transição do Procedural para o paradigma Orientado a Objetos.&lt;/p&gt;

&lt;h2 id=&quot;programando-orientado-a-objetos&quot;&gt;Programando Orientado a Objetos&lt;/h2&gt;

&lt;p&gt;Nada melhor do que um exemplo prático para começarmos a entender as diferenças entre programação Procedural e Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;Um cliente nos contratou. Um WebService está disponível e precisamos construir um &lt;em&gt;Client&lt;/em&gt; para consumi-lo.&lt;/p&gt;

&lt;p&gt;Eu não quero utilizar um gerador automatizado de código para ler o WSDL e gerar uma classe
— existe essa opção no Delphi e no Lazarus instalando um &lt;code&gt;package&lt;/code&gt; específico.&lt;/p&gt;

&lt;p&gt;Então, hipoteticamente falando, temos um WebService simples com 5 métodos. Cada método tem os mesmos argumentos: usuário e senha.&lt;/p&gt;

&lt;p&gt;As configurações do WebService como Usuário, Senha, URL, métodos do WebService que deverão ser executados, horário de execução, etc.
estão num arquivo de configurações. Porque isso? Bem, esse WebService será executado em &lt;code&gt;batch&lt;/code&gt; automaticamente em horários pré-programados.
E em cada horário alguns métodos serão executados, em outros não.&lt;/p&gt;

&lt;p&gt;Como é automatizado, precisamos de um &lt;code&gt;Log&lt;/code&gt;. Em texto mesmo. Um &lt;code&gt;Log&lt;/code&gt; que grave a execução, método, horário, usuário/senha, exeções, etc.&lt;/p&gt;

&lt;p&gt;O cliente também quer testar o WebService utilizando um Form (GUI) para ver se está tudo funcionando, mostrando na tela o XML recebido
de acordo com o método a ser executado, escolhido numa &lt;code&gt;ComboBox&lt;/code&gt;.
Quando o Form é utilizado o sistema não precisa criar &lt;code&gt;Log&lt;/code&gt;, mas precisa mostrar exceções na tela. 
Mas quando em execução em &lt;code&gt;batch&lt;/code&gt;, ele precisa gravar o &lt;code&gt;Log&lt;/code&gt; de execução e de exceções.&lt;/p&gt;

&lt;p&gt;Vejam que esse &lt;em&gt;Client&lt;/em&gt; é para o pessoal de Infra então é sem frescura mesmo: &lt;code&gt;Log&lt;/code&gt; em texto, roda em &lt;code&gt;batch&lt;/code&gt; e não tem tela bonita.&lt;/p&gt;

&lt;p&gt;Para cada requisição, o &lt;em&gt;Client&lt;/em&gt; precisa:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Trazer o XML;&lt;/li&gt;
  &lt;li&gt;Fazer um &lt;em&gt;parser&lt;/em&gt; nos dados;&lt;/li&gt;
  &lt;li&gt;Fazer uma persistência com os dados obtidos;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aqui está o código &lt;strong&gt;Procedural&lt;/strong&gt; para consumir o WebService:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atenção&lt;/strong&gt;: Eu digitei a &lt;code&gt;procedure&lt;/code&gt; diretamente no post, sem teste de compilação, então podem haver erros de sintaxe.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TDpvAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMethodName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDpvService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDpvXMLMappingInTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;XMLIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TXMLIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// FFileConfig é um atributo da classe&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDpvService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDpvXMLMappingInTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;XMLIterable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TXMLIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Configura a URL do WebService&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFileConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;WebService&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
    &lt;span class=&quot;c1&quot;&gt;// Configura com verificação de exceção&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Configura para gerar Log&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Client executa o método&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecuteMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FFileConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;WebService&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FFileConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;WebService&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;WebMethodName&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Obtém as configurações necessárias&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;XMLIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetXMLNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FFileConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;XMLNodes&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMethodName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Configura o XML gerado&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;XMLIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetXML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Executa e gera outro XML (sim, reutilizei a mesma variável)  :)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XMLIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Executa a persistência&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetXML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Não pode esquecer de desalocar tudo&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;XMLIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;É um código Procedural e funciona (teoricamente).&lt;/p&gt;

&lt;p&gt;Parece fácil de ler, mas o código tem complexidade onde não deveria.
As classes tem funções demais — mesmo separando em classes, continua procedural.&lt;/p&gt;

&lt;p&gt;Reparou nas &lt;strong&gt;linhas em branco&lt;/strong&gt; para “facilitar a leitura”? Fiz isso propositalmente por 2 motivos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Queria destacar cada linha para você ter mais contexto do problema;&lt;/li&gt;
  &lt;li&gt;Ainda não sei como alterar as configurações do &lt;code&gt;highlight&lt;/code&gt; para deixar o código menos poluído quando eu usar comentários :(&lt;/li&gt;
  &lt;li&gt;Todo mundo faz isso para facilitar a leitura… certo? :)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mas quando vocês programarem Orientado a Objetos, não haverá mais motivos para pular linhas dentro de um método, Ok?&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Dica:&lt;/strong&gt; Pular linhas dentro de um método é um &lt;strong&gt;“mal cheiro”&lt;/strong&gt; no código.
Pode significar que você está fazendo coisas demais num único método.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Nesse tipo de código, a cada manutenção, você se preocupa em quebrar alguma coisa.&lt;/p&gt;

&lt;p&gt;Para não quebrar nada você precisa:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chamar os métodos na sequência correta&lt;/li&gt;
  &lt;li&gt;Chamar os &lt;code&gt;SetXXX&lt;/code&gt; na sequência correta&lt;/li&gt;
  &lt;li&gt;Ter cuidado com as variáveis, suas inicializações e reutilização&lt;/li&gt;
  &lt;li&gt;Instanciar os objetos na sequência correta&lt;/li&gt;
  &lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não tome cuidado e… BUMM! Quebrou o código. Debugg. Checagem das atribuições na sequência exata. Perda de tempo.&lt;/p&gt;

&lt;p&gt;Não? Você sabe que é verdade :)&lt;/p&gt;

&lt;p&gt;O código apresentado é 100% Procedural, mesmo utilizando classes!
Você poderia usar mais classes e até mesmo Herança entre elas,
mas o código continuaria Procedural. Você não tem objetos, você tem &lt;strong&gt;funções agrupadas&lt;/strong&gt;
em blocos (classes) para fazer ações para o &lt;strong&gt;orquestrador&lt;/strong&gt;, você!&lt;/p&gt;

&lt;p&gt;E como estes mesmos requisitos poderiam ser codificados utilizando Orientação a Objetos,
sem um orquestrador, utilizando “objetos vivos” com &lt;strong&gt;encapsulamento&lt;/strong&gt; perfeito, minimizando a quebra de código
em manutenções futuras e com um código muito mais &lt;strong&gt;elegante&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Aqui está o código &lt;strong&gt;Orientado a Objetos&lt;/strong&gt; para consumir o mesmo WebService:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectpascal&quot; data-lang=&quot;objectpascal&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TDpvAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMethodName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TDpvXMLMappingInTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FFileConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;MethodsVsTables&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMethodName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TDpvXMLIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FFileConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;XMLNodes&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMethodName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;TDpvServiceWithLogging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TDpvServiceWithChecking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;TDpvService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FFileConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;WebService&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TDpvMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;WebMethodName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;TWebAuthorization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FFileConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;WebService&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FFileConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;WebService&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Esse é um código verdadeiramente Orientado a Objetos. Não dizemos ao computador linha-a-linha sobre o que fazer.
Os Objetos sabem o que fazer! Eles não precisam de um &lt;strong&gt;orquestrador&lt;/strong&gt; lhes dizendo o que fazer a cada momento.
Crie-os já configurados e deixe-os conversarem entre si. Eles sabem os métodos a chamar e &lt;strong&gt;quando&lt;/strong&gt; chamá-los.
Eles podem criar objetos internamente ou não e isso é irrelevante para o código chamador. Eles são como uma
caixa preta, ninguém sabe o que há dentro deles. Você, o programador, só precisa saber o &lt;strong&gt;contrato&lt;/strong&gt; que o
objeto deverá cumprir. Esse contrato chamamos de &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Não dá pra ver no código por motivos de simplificação, mas cada instância é do tipo de uma &lt;code&gt;interface&lt;/code&gt;, por isso temos os métodos &lt;code&gt;New&lt;/code&gt; — um padrão
que eu defini para meus projetos para contornar uma &lt;code&gt;feature&lt;/code&gt; do compilador mas só irei falar a respeito em outros posts.&lt;/p&gt;

&lt;p&gt;Ao invés de uma &lt;code&gt;procedure&lt;/code&gt; agora temos uma &lt;code&gt;function&lt;/code&gt; que retorna um &lt;code&gt;IActionResult&lt;/code&gt; e o fato de ter apenas um &lt;code&gt;Result&lt;/code&gt; é um ótimo sinal de que a função
não faz coisas demais. Essa função é como um grande objeto ou uma composição deles — vou falar mais sobre isso em futuros posts.&lt;/p&gt;

&lt;p&gt;Se todas as instâncias são do tipo &lt;code&gt;interface&lt;/code&gt;, então não preciso desalocar nada manualmente
deixando o código mais &lt;code&gt;clean&lt;/code&gt; sem try-finally e sem &lt;code&gt;memleaks&lt;/code&gt; (caso esqueça algum .Free).&lt;/p&gt;

&lt;p&gt;Todos os objetos são &lt;strong&gt;imutáveis&lt;/strong&gt;, ou seja, após criados não há nenhum &lt;code&gt;SetXXX&lt;/code&gt; que altere seu &lt;strong&gt;estado interno&lt;/strong&gt;.
Então não configuro meu &lt;em&gt;Client&lt;/em&gt;, e nenhum outro objeto, utilizando métodos &lt;code&gt;SetXXX&lt;/code&gt; para ele trabalhar com &lt;code&gt;Log&lt;/code&gt; 
ou com checagem de exceções.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Dica:&lt;/strong&gt; Toda classe deveria ser imutável, a não ser que tenha uma ótima razão para não ser.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Eu uso &lt;code&gt;Decorators&lt;/code&gt; ao invés de &lt;code&gt;properties&lt;/code&gt; ou &lt;code&gt;SetXXX&lt;/code&gt; para ligar/desligar &lt;code&gt;flags&lt;/code&gt; (atributos).
Assim não preciso &lt;strong&gt;completar&lt;/strong&gt; a(s) classe(s) numa sequência correta de chamadas dos métodos.&lt;/p&gt;

&lt;p&gt;Se eu não preciso do &lt;code&gt;Log&lt;/code&gt;, não utilizo o &lt;code&gt;decorator&lt;/code&gt; do &lt;code&gt;Service&lt;/code&gt; de &lt;code&gt;Log&lt;/code&gt; que chamei de &lt;code&gt;TDpvServiceWithLogging&lt;/code&gt;;
o mesmo para a checagem de Exceções, que chamei de &lt;code&gt;TDpvServiceWithChecking&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O método de chamada no WebService é uma classe separada, que chamei de &lt;code&gt;TDpvMethod&lt;/code&gt;.
Cada autorização (usuário/senha) também é uma classe, que chamei de &lt;code&gt;TWebAuthorization&lt;/code&gt;… enfim.&lt;/p&gt;

&lt;p&gt;Viu as diferenças?&lt;/p&gt;

&lt;p&gt;Espero que você tenha visto as vantagens de programar Orientado a Objetos, mesmo com esse exemplo simples.&lt;/p&gt;

&lt;p&gt;Tá gostando? Alguma dúvida? Não concorda? Posta aí nos comentários.&lt;/p&gt;

&lt;p&gt;Vejo você no próximo post.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Dica:&lt;/strong&gt; Sugiro a leitura do livro Object Thinking de David West. Leia-o com a mente aberta e começará a entender mais sobre o &lt;strong&gt;Pensamento Objeto&lt;/strong&gt;.
&lt;a href=&quot;http://www.amazon.com/Object-Thinking-Developer-Reference-David/dp/0735619654&quot;&gt;&lt;img src=&quot;/images/object-thinking-book.jpg&quot; alt=&quot;Object Thinking&quot; title=&quot;Object Thinking by David West&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/pensando-em-objetos/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/pensando-em-objetos/</guid>
      </item>
    
      <item>
        <title>Você sabe, com certeza, o que é Orientação a Objetos?</title>
        <description>&lt;p&gt;Não pense que você programa Orientado a Objetos só porque utiliza Classes, Herança, Encapsulamento e, talvez, Polimorfismo.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-1451340124423-6311db67a5d9.jpg&quot; alt=&quot;Rochas&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;um-pouco-de-histria&quot;&gt;Um pouco de História&lt;/h2&gt;

&lt;p&gt;Muitos programadores, ao menos uma vez na vida, já devem ter pesquisado 
o que significa &lt;strong&gt;Orientação a Objetos&lt;/strong&gt;, quando o termo foi cunhado e por quem.&lt;/p&gt;

&lt;p&gt;Há vários sites hoje em dia contendo essas informações, então não vou 
replicá-las aqui… bem, só pra lembrar rapidamente: o criador do termo foi Alan Kay, 
o mesmo criador da linguagem Smalltalk — uma linguagem puramente 
Orientada a Objetos — no entanto, mesmo antes do termo ter sido criado, 
ideias conceituais sobre Orientação a Objetos já estavam sendo aplicadas 
na linguagem Simula 67 (1967).&lt;/p&gt;

&lt;p&gt;Linguagens de programação foram desenhadas com base nesse paradigma; centenas ou milhares de livros foram escritos; milhões de sites na Internet falam desse assunto. Então porque, após todos esses anos, a maioria dos programadores ainda não sabem o que é programar Orientado a Objetos?&lt;/p&gt;

&lt;h2 id=&quot;um-objeto-no--um-balde-de-funes-e-dados&quot;&gt;Um Objeto não é um “balde” de Funções e Dados&lt;/h2&gt;

&lt;p&gt;Ok, &lt;ins&gt;tecnicamente&lt;/ins&gt; ele é um “balde” de funções e dados.
Quando um objeto é criado ele possui uma estrutura de dados em memória; cada função recebe um ponteiro implícito para essa estrutura; as funções podem utilizar esses dados como se fossem variáveis locais… basicamente é isso.&lt;/p&gt;

&lt;p&gt;Mas se você não for um projetista de compiladores, pouco importa saber como um Objeto é gerenciado internamente pelo compilador — muitos programadores Java nem sabem o que é um ponteiro :)&lt;/p&gt;

&lt;p&gt;Então funções e dados ganharam novos nomes: funções são chamadas de Métodos e dados são chamados de Atributos ou Propriedades.&lt;/p&gt;

&lt;p&gt;Utilizar as palavras Métodos e Atributos já é um grande passo para entender o que são Objetos, mas eu prefiro dizer que um Objeto tem &lt;strong&gt;Comportamento&lt;/strong&gt; e &lt;strong&gt;Estado&lt;/strong&gt;, respectivamente.&lt;/p&gt;

&lt;p&gt;E qual a diferença (teórica) entre &lt;ins&gt;Métodos vs Comportamentos&lt;/ins&gt; e &lt;ins&gt;Atributos vs Estado&lt;/ins&gt;?
Se você “executa sequencialmente os métodos” de um Objeto e/ou “atualiza seus atributos”, você utiliza &lt;strong&gt;Programação Procedural&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;É assunto para outro post explicar as diferenças sutis de nomenclatura, assim como as afirmações que fiz acima, mas se for possível para você apenas aceitar tais definições por enquanto, continue lendo.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
    “A orientação a objetos é um modelo de análise,
    projeto e programação de sistemas de software baseado
    na composição e interação entre diversas unidades de
    software chamadas de objetos.” 
  &lt;/p&gt;
  &lt;footer&gt;&lt;cite title=&quot;Wikipedia&quot;&gt;— Wikipedia&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Objetos podem ser &lt;strong&gt;compostos&lt;/strong&gt; por outros Objetos e eles &lt;strong&gt;interagem&lt;/strong&gt; entre si.&lt;/p&gt;

&lt;p&gt;Funções são executadas. Objetos interagem entre si.&lt;/p&gt;

&lt;p&gt;Nunca pensem em Objetos em termos de funções e dados. Nunca.&lt;/p&gt;

&lt;p&gt;Para nós, de agora em diante, um Objeto representa uma entidade, 
criatura ou qualquer coisa fora do contexto do programa.&lt;/p&gt;

&lt;p&gt;Alguns dizem, também, que um Objeto representa uma entidade na “vida real”. 
A definição está correta, porém pode gerar confusão, por exemplo:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Um cachorro é uma entidade na vida real? Sim.&lt;/li&gt;
  &lt;li&gt;Uma pessoa é uma entidade na vida real? Sim.&lt;/li&gt;
  &lt;li&gt;Um arquivo de computador é uma entidade na vida real? Sim.&lt;/li&gt;
  &lt;li&gt;Um pixel é uma entidade na vida real? Sim.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Se você não notou diferença entre os exemplos, parabéns. Mas se ficou em dúvida a 
respeito dos itens #3 e #4, tudo bem, muitos tem a mesma dúvida. Por isso eu digo 
que um Objeto é qualquer coisa fora do contexto do programa. Definir como “vida real” 
também está certo e tem a vantagem de ser mais rápido pra escrever 😉&lt;/p&gt;

&lt;h2 id=&quot;os-programadores-no-utilizam-orientao-a-objetos&quot;&gt;Os programadores não utilizam Orientação a Objetos&lt;/h2&gt;

&lt;p&gt;Estou afirmando com base na minha experiência pessoal com o mercado brasileiro, 
livros e inúmeros post lidos por mim no decorrer dos anos.&lt;/p&gt;

&lt;p&gt;Você pode entender isso como uma coisa boa ou ruim. Depende do ponto de vista. 
Existe a Programação Funcional e muitas (grandes) empresas a utilizam. 
Programação Funcional não tem nada haver com Orientação a Objetos e, tudo bem.&lt;/p&gt;

&lt;p&gt;Mas, atenção. Não pense que você programa Orientado a Objetos só 
porque utiliza &lt;strong&gt;Classes&lt;/strong&gt;, &lt;strong&gt;Herança&lt;/strong&gt;, &lt;strong&gt;Encapsulamento&lt;/strong&gt; e, talvez, 
&lt;strong&gt;Polimorfismo&lt;/strong&gt;. Esse é a base, mas não é tudo.&lt;/p&gt;

&lt;p&gt;Não somos diferentes. Eu pensava que programava Orientado a Objetos por 
usar e aplicar — ou achar que estava aplicando — esses conceitos básicos da 
Orientação a Objetos que nos ensinaram no meio acadêmico. Mas não foi o bastante.&lt;/p&gt;

&lt;p&gt;Esqueceram de nos ensinar como &lt;strong&gt;Pensar Orientado a Objetos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mas isso é assunto para um próximo post.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Dec 2015 15:00:00 +0000</pubDate>
        <link>http://objectpascalprogramming.com/posts/o-que-e-orientacao-a-objetos/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/o-que-e-orientacao-a-objetos/</guid>
      </item>
    
  </channel>
</rss>
