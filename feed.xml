<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Pascal Programming</title>
    <description>Sacadas sobre Programação Orientada a Objetos e Object Pascal.
</description>
    <link>http://objectpascalprogramming.com/</link>
    <atom:link href="http://objectpascalprogramming.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Atributos Primários e Secundários</title>
        <description>&lt;p&gt;Um Objeto pode ter Atributos Primários e Secundários.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/photo-tim-gouw-60216.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Os &lt;a href=&quot;/posts/menos-e-mais/#atributos&quot;&gt;atributos&lt;/a&gt; de um Objeto são a representação do seu conhecimento, ou seja, tudo que o Objeto &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/#encapsulamento&quot;&gt;encapsula&lt;/a&gt; é representado por atributos.&lt;/p&gt;

&lt;p&gt;Assim como uma Classe pode ter 2 tipos de &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtores&lt;/a&gt;, um Objeto pode ter 2 tipos de atributos: Primários e Secundários.&lt;/p&gt;

&lt;h2 id=&quot;primarios&quot;&gt;Primários&lt;/h2&gt;

&lt;p&gt;Atributos Primários são aqueles que fazem parte do &lt;a href=&quot;/estado-do-objeto&quot;&gt;Estado do Objeto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;São os atributos inicializados pela Classe, passados ao Objeto através do construtor com a finalidade de representar uma &lt;a href=&quot;/posts/objetos-representam-entidades/#o-que-e-uma-entidade&quot;&gt;Entidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vejamos um exemplo:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/5952c6f39810803d91b05a6f1c4b8766.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Na Classe &lt;code&gt;TFile&lt;/code&gt; acima, há apenas 1 argumento no construtor. Esse argumento será parte do Estado do Objeto e, portanto, irá inicializar um Atributo Primário chamado &lt;code&gt;FFilePath&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;secundario&quot;&gt;Secundários&lt;/h2&gt;

&lt;p&gt;Atributos Secundários são todos os atributos que não foram inicializados pelo construtor da Classe.&lt;/p&gt;

&lt;p&gt;São atributos de &lt;em&gt;suporte tecnológico&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Vejamos um exemplo:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/48237c902271b6f2c3a314d3b6f5b8c0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Nesse exemplo acima a Classe &lt;code&gt;TFile&lt;/code&gt; foi atualizada. Um novo atributo &lt;code&gt;FStream&lt;/code&gt; foi adicionado.&lt;/p&gt;

&lt;p&gt;Esse atributo não foi passado no construtor, então ele é um Atributo Secundário.&lt;/p&gt;

&lt;p&gt;O método &lt;code&gt;Stream&lt;/code&gt; irá retornar o &lt;em&gt;stream&lt;/em&gt; do arquivo, no entanto os dados do arquivo em disco serão lidos apenas na primeira execução, pois após inicializar o atributo &lt;code&gt;FStream&lt;/code&gt; ele não é mais atualizado.&lt;/p&gt;

&lt;p&gt;A Classe &lt;code&gt;TDataStream&lt;/code&gt; é irrelevante para o entendimento, mas veja que o &lt;em&gt;path&lt;/em&gt; do arquivo é passado. Então essa Classe irá ler o arquivo em disco e retornar uma instância de &lt;code&gt;IDataStream&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Atributos Primários são inicializados através do construtor da Classe e &lt;em&gt;devem&lt;/em&gt; ser &lt;a href=&quot;/posts/objetos-imutaveis/&quot;&gt;imutáveis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Atributos Secundários podem ou não ser inicializados através do construtor da Classe, pois eles podem ser inicializados a qualquer momento e em qualquer lugar do Objeto.&lt;/p&gt;

&lt;p&gt;Tudo são atributos, mas saber essa diferença sutil entre Atributos Primários e Secundários é essencial para construírmos Classes melhores.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Jun 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/atributos-primarios-secundarios</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/atributos-primarios-secundarios</guid>
      </item>
    
      <item>
        <title>Estado do Objeto</title>
        <description>&lt;p&gt;Estado de um Objeto. Existem dois tipos. Entenda-os e torne-os invioláveis.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/photo-tim-evans-88330.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Venho escrevendo sobre Orientação a Objetos e já falei  várias vezes sobre o &lt;em&gt;Estado de um Objeto&lt;/em&gt;, mas nunca havia explicado o que exatamente isso significa.&lt;/p&gt;

&lt;p&gt;Saber esse conceito é primordial para o entendimento da verdadeira Orientação a Objetos.&lt;/p&gt;

&lt;h2 id=&quot;estado&quot;&gt;O que é Estado&lt;/h2&gt;

&lt;p&gt;Todo Objeto é composto de Estado e Comportamento.&lt;/p&gt;

&lt;p&gt;Enquanto o comportamento é o que o Objeto &lt;em&gt;faz&lt;/em&gt;, Estado é o que o Objeto &lt;em&gt;sabe&lt;/em&gt; sobre a &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;Entidade&lt;/a&gt; que ele está representando dentro do &lt;em&gt;software&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Todo Objeto tem um Estado, mesmo que você não saiba sobre ele.&lt;/p&gt;

&lt;p&gt;Existem basicamente dois tipos de Estado.&lt;/p&gt;

&lt;h2 id=&quot;implicito&quot;&gt;Estado Implícito&lt;/h2&gt;

&lt;p&gt;Todo Objeto tem ou &lt;a href=&quot;/posts/objetos-sem-estado/&quot;&gt;deveria&lt;/a&gt; ter um Estado. No entanto existem casos especiais onde um Estado inicial não faz sentido &lt;em&gt;tecnicamente&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Um exemplo de um Objeto sem Estado inicial é uma Lista. Podemos inicializar a lista com um item, porém nem sempre esse será o caso. Na maioria das vezes queremos uma lista para depois ir adicionando itens. Então iniciamos a lista sem Estado aparente.&lt;/p&gt;

&lt;p&gt;Isso é fato se tivermos uma visão estritamente técnica. Mas quando essa lista for instânciada na memória do computador, seu Estado será inicializado. Em outras palavras, a área de memória que o Sistema Operacional concedeu ao Objeto será, também, o seu Estado.&lt;/p&gt;

&lt;p&gt;Pensando &lt;em&gt;filosoficamente&lt;/em&gt;, no
&lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtor&lt;/a&gt; de uma Classe Lista que é inicializada vazia, “sem estado”, seria passado o endereço de memória onde a lista iria residir na memória do computador. Porém construtores já fazem isso por padrão — encontram um endereço de memória disponível — então não há necessidade de sabermos endereços de memória e muito menos passá-los no construtor.&lt;/p&gt;

&lt;p&gt;Estados implícitos devem ser utilizados apenas para Objetos primários ou muito genéricos, como uma lista.&lt;/p&gt;

&lt;h2 id=&quot;explicito&quot;&gt;Estado Explícito&lt;/h2&gt;

&lt;p&gt;Argumentos nos &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtores&lt;/a&gt; de Classes mostram a intenção do desenvolvedor em instanciar um Objeto com um Estado Explícito.&lt;/p&gt;

&lt;p&gt;No entanto tais argumentos podem ou não fazer parte do Estado do Objeto que queremos inicializar.&lt;/p&gt;

&lt;p&gt;É o Objeto que irá decidir o que utilizar no seu Estado.&lt;/p&gt;

&lt;p&gt;Por exemplo. Numa Classe &lt;code&gt;TSalary&lt;/code&gt;, que representa um salário de alguém, é esperado um argumento no construtor do tipo &lt;code&gt;IMoney&lt;/code&gt;, que é uma &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interface&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A Classe &lt;code&gt;TSalary&lt;/code&gt; poderia ter um outro construtor secundário com um argumento do tipo &lt;code&gt;string&lt;/code&gt;. Porém sabemos que um &lt;em&gt;TSalary&lt;/em&gt; não é uma &lt;em&gt;string&lt;/em&gt; e seu Estado não pode ser inicializado com um valor que não seja um &lt;code&gt;IMoney&lt;/code&gt;. Então porque esse construtor existe?&lt;/p&gt;

&lt;p&gt;Um exemplo de implementação desses construtores poderia ser assim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// primary
construtor TSalary.Create(Value: IMoney);
begin
  FValue := Value;
end;

// secondary
construtor TSalary.Create(const Value: string);
begin
  Create(TStringAsMoney.New(Value));
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No exemplo acima o construtor secundário chama o primário com o argumento correto, do tipo &lt;code&gt;IMoney&lt;/code&gt;, porém outro Objeto é utilizado. O argumento &lt;code&gt;Value&lt;/code&gt; do tipo &lt;em&gt;string&lt;/em&gt; não faz parte do estado de &lt;code&gt;TSalary&lt;/code&gt; porém faz parte do estado de &lt;code&gt;TStringAsMoney&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Como eu disse antes, o Objeto que decide.&lt;/p&gt;

&lt;p&gt;Estados explícitos devem ser utilizados em todos os Objetos de alto nível e de regras de negócio.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;De todo esse papo técnico mas também filosófico, o que você nunca deve esquecer quando estiver construindo uma Classe é:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;O estado de um Objeto jamais deve ser violado.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Após o Objeto ser criado, seu Estado — implícito ou explícito — nunca poderia ser alterado, permanecendo intacto até o fim da sua vida.&lt;/p&gt;

&lt;p&gt;Se esse Estado for violado significa que seu Objeto não possui &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-2/#encapsulamento&quot;&gt;encapsulamento&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um Objeto que não encapsula não pode ser considerado um Objeto. Chame-o de estrutura de dados.&lt;/p&gt;

&lt;p&gt;Objetos tem Estado, estruturas tem Dados.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jun 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/estado-do-objeto</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/estado-do-objeto</guid>
      </item>
    
      <item>
        <title>Herdar para Rotular</title>
        <description>&lt;p&gt;A Herança de Classe pode ter outras finalidades que você ainda não havia pensado.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/photo-matt-briney-160808.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Já escrevi bastante sobre Herança &lt;a href=&quot;/posts/heranca-pode-ser-o-mal-da-orientacao-a-objetos-parte-1/&quot;&gt;aqui&lt;/a&gt; (série de artigos em 5 partes) e vimos o mal que seu uso pode trazer ao código Orientado a Objetos.&lt;/p&gt;

&lt;p&gt;No entanto, assim como uma arma de fogo pode ser inofensiva, pois é o ser humano que faz mal uso da arma, a herança pode ser inofensiva se for utilizada de forma &lt;a href=&quot;/posts/como-utilizar-heranca-apropriadamente/&quot;&gt;apropriada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nesse artigo você irá ver mais uma forma de uso da Herança de Classe, mas sem sobrescrita de métodos ou uso de propriedades e métodos protegidos.&lt;/p&gt;

&lt;p&gt;Vamos utilizar a Herança para &lt;em&gt;rotular&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;contextualizando&quot;&gt;Contextualizando&lt;/h2&gt;

&lt;p&gt;De vez em quanto eu costumo utilizar Herança de Classe apenas como um rótulo.&lt;/p&gt;

&lt;p&gt;Para que você entenda o benefício do uso de um rótulo, é necessário haver uma contextualização para compararmos o uso do código sem rótulo e, depois, com rótulo.&lt;/p&gt;

&lt;p&gt;Vamos ver um exemplo.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/0676083483d1d9b75f21b8527e6e4897.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;É uma Classe bem simples, apenas para exemplificar o que eu quero lhe mostrar.&lt;/p&gt;

&lt;p&gt;Se você não entendeu para que serve o método &lt;em&gt;New&lt;/em&gt;, veja sobre ele &lt;a href=&quot;/posts/interfaces-e-o-metodo-estatico-new/&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Toda Classe deve implementar ao menos uma &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interface&lt;/a&gt;, então temos a Interface &lt;code&gt;IMoney&lt;/code&gt; com apenas um único método &lt;code&gt;Value: Currency&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Imagine agora que seu &lt;em&gt;software&lt;/em&gt; trata de vários tipos de Taxas e Descontos, mas vou citar apenas dois como exemplo:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Taxa de Inscrição (1%)&lt;/li&gt;
  &lt;li&gt;Desconto (10% se menor de 18 anos)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Você, sendo um dos programadores numa empresa de Cursos de Mecânica de Automóveis, foi encarregado de implementar o cálculo de Inscrição e Desconto.&lt;/p&gt;

&lt;p&gt;Se o valor da inscrição é R$ 100 vamos imaginar um botão para apenas mostrar o valor total a pagar pelo novo aluno:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/95395ad64ac9d1a7b3eed55ebf436724.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;O código acima tem uma condicional, proporcionado pela classe &lt;code&gt;TIf&lt;/code&gt; (não relacionada nesse artigo), que é bem simples de entender:&lt;/p&gt;

&lt;p&gt;Se o (futuro) estudante tem idade menor do que 18 anos, ele irá ter um desconto de 10%, senão não haverá desconto.&lt;/p&gt;

&lt;p&gt;Depois há a função primitiva &lt;code&gt;CurrToStr&lt;/code&gt; para converter o somatório do Valor Inscrição + a Taxa de Inscrição (1%) - o Desconto (se houver) em &lt;code&gt;string&lt;/code&gt; para ser exibido num simples &lt;code&gt;ShowMessage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bem, você sabe isso porque eu estou lhe dizendo. Eu preparei o contexto antes que você visse o código. Se fosse tivesse visto apenas isso…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TPercentCalculated.New(V, 1).Value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…saberia que se trata de uma Taxa que calcula 1% do valor, mas não saberia dizer sobre &lt;em&gt;qual&lt;/em&gt; taxa o código se refere.&lt;/p&gt;

&lt;p&gt;É aí que usamos um rótulo.&lt;/p&gt;

&lt;h2 id=&quot;rotulando&quot;&gt;Rotulando&lt;/h2&gt;

&lt;p&gt;Um rótulo serve para marcar alguma coisa para facilitar a visão, a leitura, a identificação.&lt;/p&gt;

&lt;p&gt;Uma Classe também é um rótulo.&lt;/p&gt;

&lt;p&gt;O código abaixo é a refatoração do código que lhe acabei de mostrar:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/02a4ab8115cbebe3fe671905d51c1dd1.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;O código agora ficou muito mais &lt;a href=&quot;/posts/simplicidade/&quot;&gt;simples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Está claro que o &lt;code&gt;valor&lt;/code&gt; é somado com uma Taxa de Inscrição e com um Desconto.&lt;/p&gt;

&lt;p&gt;O formulário que contém esse código, não “sabe” qual é o percentual da Taxa de Registro e nem como é feito o cálculo para o Desconto… e é assim que deve ser.&lt;/p&gt;

&lt;p&gt;Então a primeira refatoração seria criar 2 classes distintas, uma para cada tipo de cálculo. Mas aí teríamos um problema: &lt;a href=&quot;/posts/codigo-duplicado-talvez-nao/&quot;&gt;Código duplicado&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se o cálculo é o mesmo, ou seja, apenas um percentual simples, porque eu iria duplicar o mesmo código em duas Classes? Não faz sentido.&lt;/p&gt;

&lt;p&gt;Mas podemos fazer isso:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/0e8ac1cd0af1f631b5204061c554dbaf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Agora ambas as Classes tem como herança &lt;code&gt;TPercentCalculated&lt;/code&gt;. No entanto eu não estou sobrecarregando nenhum Método e não estou usando nada protegido… na verdade esse código não está &lt;em&gt;tocando em nada&lt;/em&gt; da super Classe.&lt;/p&gt;

&lt;p&gt;Ambas as Classes apenas inicializam, de forma apropriada e contextualizada, a Classe &lt;code&gt;TPercentCalculated&lt;/code&gt; utilizando o &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtor&lt;/a&gt; da super Classe.&lt;/p&gt;

&lt;p&gt;Apenas isso.&lt;/p&gt;

&lt;p&gt;Mas para o utilizador das Classes, elas parecem ser completamente independentes.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 May 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/herdar-para-rotular</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/herdar-para-rotular</guid>
      </item>
    
      <item>
        <title>Observando Objetos</title>
        <description>&lt;p&gt;Um semáforo de trânsito está prestes a mudar de vermelho para verde e vários pedestres estão aguardando para atravessar a rua.&lt;/p&gt;

&lt;p&gt;A mudança de estado do semáforo irá impactar a vida de apenas algumas pessoas, ou seja, só daquelas que estão realmente interessadas, aguardando e observando este Evento que irá ocorrer em breve.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/photo-hermes-rivera-253620.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;No &lt;a href=&quot;/eventos-e-objetos&quot;&gt;artigo anterior&lt;/a&gt; escrevi sobre &lt;a href=&quot;/eventos-e-objetos#eventos&quot;&gt;Eventos&lt;/a&gt; que ocorrem entre dois Objetos e como eles podem ser implementados de forma bem simples.&lt;/p&gt;

&lt;p&gt;Nesse artigo iremos implementar Eventos que possam notificar mais de um Objeto de uma só vez.&lt;/p&gt;

&lt;h2 id=&quot;observer-pattern&quot;&gt;Observer Pattern&lt;/h2&gt;

&lt;p&gt;Você pode utilizar um Evento para mostrar um &lt;em&gt;ProgressBar&lt;/em&gt; enquanto um processamento está ocorrendo ou notificar o usuário quando algum outro processo terminar.&lt;/p&gt;

&lt;p&gt;No entanto, em todos esses casos, os Eventos ocorrem entre apenas 2 Objetos: Transmissor e Receptor.&lt;/p&gt;

&lt;p&gt;Há casos, porém, onde o Transmissor deverá notificar mais de um Receptor.&lt;/p&gt;

&lt;p&gt;Há um padrão de implementação conhecido chamdo de &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;&lt;em&gt;Observer Pattern&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mas ao invés de só implementarmos o &lt;em&gt;Observer Pattern&lt;/em&gt; na sua forma clássica, utilizando seus termos como &lt;em&gt;Subject&lt;/em&gt; e &lt;em&gt;Observers&lt;/em&gt;, vamos entender como esse padrão funciona, utilizando uma abordagem mais direta, simples e &lt;em&gt;“Pascalized”&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implementacao&quot;&gt;Implementação&lt;/h2&gt;

&lt;p&gt;A maneira mais óbvia — ou talvez a única — para implementar uma notificação que seja propagada não em apenas um ponto do código, mas sim em infinitos pontos ou infinitos Objetos, é utilizando uma simples… &lt;em&gt;lista&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A pergunta é: Onde estará a instância dessa lista?&lt;/p&gt;

&lt;p&gt;A lista é global? Com certeza não, pois não trabalhamos com variáveis globais.&lt;/p&gt;

&lt;p&gt;A lista é implementada no Objeto transmissor? Também não, pois o transmissor — no exemplo é um semáforo — não dá a mínima para quem o está observando. O transmissor apenas dá a &lt;em&gt;possíbilidade&lt;/em&gt; de observação do evento, aceitando um ponteiro para o evento no &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtor&lt;/a&gt;, primário ou secundário.&lt;/p&gt;

&lt;p&gt;Se não houvesse ninguém para observar o semáforo, ele iria parar de funcionar? Não! Portanto a &lt;em&gt;responsabilidade&lt;/em&gt; de notificação a vários Objetos não é do transmissor original.&lt;/p&gt;

&lt;p&gt;Então a lista é implementada em algum outro Objeto? Com certeza!&lt;/p&gt;

&lt;h3 id=&quot;exemplo-1&quot;&gt;1-Notificando um Objeto&lt;/h3&gt;

&lt;p&gt;Primeiramente vamos implementar um Evento simples, como no último artigo.&lt;/p&gt;

&lt;p&gt;Teremos um Objeto &lt;code&gt;Semaphore&lt;/code&gt;, que será o objeto transmissor de um Evento: Sempre que haver mudança de cor, o evento será disparado.&lt;/p&gt;

&lt;p&gt;Como estamos trabalhando com Orientação a Objetos, antes precisamos definir o &lt;a href=&quot;/posts/interfaces-em-todo-lugar/#interfaces-sao-contratos&quot;&gt;contrato&lt;/a&gt;, ou seja, a Interface que representa a entidade Semáforo.&lt;/p&gt;

&lt;p&gt;Veja o código baixo.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/acfb7acf71670182b6cf509c51540949.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Vamos entender o código acima:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Há uma Interface &lt;code&gt;ISemaphore&lt;/code&gt; com apenas um Método &lt;code&gt;Color&lt;/code&gt;. Não há Eventos na Interface.&lt;/li&gt;
  &lt;li&gt;O tipo &lt;code&gt;TChangeEvent&lt;/code&gt; é a assinatura do Evento.&lt;/li&gt;
  &lt;li&gt;A classe &lt;code&gt;TSemaphore&lt;/code&gt; implementa a Interface &lt;code&gt;ISemaphore&lt;/code&gt;. Novamente, também não há Eventos na definição da Classe, apenas no construtor. O ato de notificação através de Eventos é um &lt;strong&gt;detalhe de implementação&lt;/strong&gt; e não faz parte da entidade na qual a Interface e a Classe &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;representam&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A Classe &lt;code&gt;TSemaphore&lt;/code&gt; instância um &lt;code&gt;TTimer&lt;/code&gt;. É através desse &lt;em&gt;timer&lt;/em&gt; que a mudança de cores irá ocorrer (a cada 2 segundos).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agora, num novo projeto, adicionem um &lt;code&gt;TShape&lt;/code&gt; num &lt;code&gt;TForm&lt;/code&gt;, alterem a &lt;code&gt;property Shape&lt;/code&gt; para &lt;code&gt;stCircle&lt;/code&gt; e utilize o código abaixo:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/f4221d8c6be58201bbb5a82da26fe1a3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;O código acima é &lt;em&gt;simples&lt;/em&gt;, &lt;em&gt;elegante&lt;/em&gt;, &lt;em&gt;Orientado a Objetos&lt;/em&gt; e não possui &lt;em&gt;Setters&lt;/em&gt;, nem mesmo para o Evento.&lt;/p&gt;

&lt;p&gt;Se você fez tudo certo, verá algo parecido com a imagem abaixo — e a cada 2 segundos a cor é alterada.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/screenshot-semaphore-1.jpg&quot; alt=&quot;semaphore&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mas, mesmo que tudo esteja funcionando, temos apenas 1 Objeto (o &lt;em&gt;Form&lt;/em&gt;) que está “observando” o Evento de mudança de cor do semáforo.&lt;/p&gt;

&lt;p&gt;O que queremos é poder notificar “N” Objetos de uma só vez.&lt;/p&gt;

&lt;h3 id=&quot;exemplo-2&quot;&gt;2-Notificando muitos Objetos&lt;/h3&gt;

&lt;p&gt;Para notificar muitos Objetos precisamos de uma lista com os Objetos previamente adicionados.&lt;/p&gt;

&lt;p&gt;Vamos modificar o código existe e adicionar mais Interfaces e Classes.&lt;/p&gt;

&lt;p&gt;Essas são as Interfaces:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/b5ebdc91138eb140bce07f5ef0dde976.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;São mais duas Interfaces com nomes bem genéricos. Talvez, num projeto maior, seus nomes poderiam ser &lt;code&gt;ISemaphoreObserver&lt;/code&gt; e &lt;code&gt;ISemaphoreObservers&lt;/code&gt; respectivamente, afim de diminuir as chances de haver conflito de nomes. Mas isso é irrelevante por enquanto.&lt;/p&gt;

&lt;p&gt;Sendo nomes genéricos, eu posso implementar em Classes bem distintas que, inicialmente, não teriam nada haver com o contexto de Semáforo.&lt;/p&gt;

&lt;p&gt;Confuso?&lt;/p&gt;

&lt;p&gt;Vamos a um exemplo de implementação: &lt;em&gt;Pessoas&lt;/em&gt; que gostariam de ser notificadas a respeito das mudanças do semáforo:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/74622575318450edc1fc40b8cd265f85.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Vamos entender o código acima:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Primeiramente, o &lt;em&gt;GUID&lt;/em&gt; na Interface &lt;code&gt;IObserver&lt;/code&gt; serve apenas para ser possível fazer o &lt;em&gt;casting&lt;/em&gt; no método &lt;code&gt;Get&lt;/code&gt; de &lt;code&gt;TPeople&lt;/code&gt;. Fique a vontade para usar &lt;em&gt;Generics&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;A Interface &lt;code&gt;IObservers&lt;/code&gt; é um subtipo de &lt;code&gt;IObserver&lt;/code&gt; apenas para aproveitar a definição do método &lt;code&gt;Changed&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;O método &lt;code&gt;Changed&lt;/code&gt; faz parte da definição da Interface &lt;code&gt;IObserver&lt;/code&gt;, sim, porque a entidade que ela representa necessita: Um observador precisa saber das mudanças do Objeto observado.&lt;/li&gt;
  &lt;li&gt;Um Objeto &lt;code&gt;TPeople&lt;/code&gt; é apenas uma lista que irá repassar o Evento para seus itens.&lt;/li&gt;
  &lt;li&gt;Quando um Objeto &lt;code&gt;TPerson&lt;/code&gt; tem seu método &lt;code&gt;Changed&lt;/code&gt; chamado na lista, ele irá gerar um novo Evento &lt;code&gt;OnStatus&lt;/code&gt;. Esse “status” é apenas para notificar o que o Objeto está fazendo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ok. Só falta agora ligar tudo isso junto.&lt;/p&gt;

&lt;p&gt;Vamos alterar um pouco o código inicial do &lt;em&gt;Form&lt;/em&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/31851f1e8e5d70f893ab84c0df2614f7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Vamos entender o código acima:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Adicionei um &lt;code&gt;TMemo&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Adicionei um método privado &lt;code&gt;PersonStatus&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Renomeei &lt;code&gt;FSemaphore&lt;/code&gt; para &lt;code&gt;FSemaphore1&lt;/code&gt; e criei outro do mesmo tipo.&lt;/li&gt;
  &lt;li&gt;Adicionei um atributo &lt;code&gt;FPeople&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Por fim foi alterado o &lt;code&gt;FormCreate&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Acho que você já entendeu o que irá ocorrer aqui, certo?&lt;/p&gt;

&lt;p&gt;Se você replicou tudo certo aí, verá uma imagem parecida com essa abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/screenshot-semaphore-2.jpg&quot; alt=&quot;semaphore&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Utilizar Eventos não quer dizer, necessariamente, que você está utilizando RAD.&lt;/p&gt;

&lt;p&gt;Eventos são necessários para unir duas peças que, talvez, não tenham nada em comum mas que precisam se comunicar.&lt;/p&gt;

&lt;p&gt;Nesse artigo tentei mostrar uma maneira de implementar eventos de forma mais Orientada a Objetos, utilizando Interfaces e Classes e não apenas ponteiros para métodos.&lt;/p&gt;

&lt;p&gt;Mostrei que a lista de notificações não deve ficar no transmissor. Assim poderíamos acrescentar mais listas de notificações. Listas que notificam listas, se necessário. E os itens dessas listas poderiam ser instâncias de Classes complemente diferentes umas das outras, assim como o que iriam fazer — seu comportamento — ao receber a notificação da lista. Isso deixa nosso código bem extensível, sem que precisemos alterar o que já foi concluído.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 May 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/observando-objetos</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/observando-objetos</guid>
      </item>
    
      <item>
        <title>Eventos e Objetos</title>
        <description>&lt;p&gt;Quando o semáforo de trânsito muda de vermelho para verde, isso é considerado um Evento ou uma Mensagem entre Objetos (motorista e semáforo)?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/photo-ashim-d-silva-95242.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;O mundo é constituído de Eventos.&lt;/p&gt;

&lt;p&gt;Uma sirene que toca ao longe; o semáforo que passou de amarelo para vermelho; as notificaçõess do celular; a luz que acende num painel; o atendente do Starbucks chamando seu nome quando o café está pronto.&lt;/p&gt;

&lt;p&gt;Um &lt;a href=&quot;https://en.wikipedia.org/wiki/Event_(computing)&quot;&gt;Evento&lt;/a&gt; no mundo computacional é uma ação ou ocorrência gerado no software e reconhecido e tratado pelo software.&lt;/p&gt;

&lt;p&gt;Entre Objetos computacionais, existem 2 formas de interação: Mensagens e Eventos.&lt;/p&gt;

&lt;h2 id=&quot;mensagens&quot;&gt;Mensagens&lt;/h2&gt;

&lt;p&gt;Dois Objetos comunicam-se entre si através de &lt;a href=&quot;/posts/diga-me-algo-sobre-voce/#mensagens&quot;&gt;mensagens&lt;/a&gt; ou Métodos.&lt;/p&gt;

&lt;p&gt;Podemos chamar essa troca de mensagens de diálogo pois os Objetos que estão participando da “conversa” estão todos “cientes” do trabalho que estão desenvolvendo juntos (composição).&lt;/p&gt;

&lt;p&gt;Cada Objeto está fazendo o trabalho para o qual foi &lt;a href=&quot;/posts/interfaces-em-todo-lugar/#interfaces-sao-contratos&quot;&gt;contrato&lt;/a&gt; e repassando seu resultado para o próximo Objeto afim de terminar um trabalho maior.&lt;/p&gt;

&lt;p&gt;Para um Objeto enviar uma Mensagem à outro, ele deve saber como passar a mensagem na forma que o receptor já conhece, para que as instruções sejam entendidas.&lt;/p&gt;

&lt;p&gt;Em outras palavras, o transmissor deve conhecer a Interface do receptor.&lt;/p&gt;

&lt;p&gt;Mas num diálogo entre alguns Objetos, podem haver interrupções externas que quebra o fluxo normal, podendo mudar o comportamento em execução.&lt;/p&gt;

&lt;p&gt;Imaginem dois Objetos trabalhando, fazendo um &lt;em&gt;parser&lt;/em&gt; de arquivos PDF, o usuário clica no botão “cancelar” para notificar, a quem quiser saber, que a operação em andamento deve ser cancelada.&lt;/p&gt;

&lt;p&gt;Isso é um Evento.&lt;/p&gt;

&lt;h2 id=&quot;eventos&quot;&gt;Eventos&lt;/h2&gt;

&lt;p&gt;Um Evento, diferente de um diálogo, é como um interruptor. Ele desvia o “fluxo normal” do diálogo entre Objetos para notificar outros Objetos — que ele desconhece ou ignora — que podem ou não estar inseridos no mesmo contexto ou trabalho em andamento.&lt;/p&gt;

&lt;p&gt;Por exemplo:
Dois mecânicos estão fazendo um belo trabalho na montagem de um motor recem retificado, a sirene sinalizando a hora do almoço toca. Eles largam suas ferramentas e vão almoçar.&lt;/p&gt;

&lt;p&gt;Podemos dizer que eles estavam &lt;em&gt;aguardando&lt;/em&gt; esse Evento? Sim. Deviam estar anciosos para o almoço…&lt;/p&gt;

&lt;p&gt;Então todo evento é &lt;em&gt;aguardado&lt;/em&gt; pelos Objetos?&lt;/p&gt;

&lt;p&gt;Creio que sim. Pelo menos no mundo computacional.&lt;/p&gt;

&lt;p&gt;Os Objetos em sistemas computacionais não tem &lt;em&gt;sentidos&lt;/em&gt; como os seres humanos. Os 5 sentidos humanos são como interpretadores de todo tipo de Evento que pode ocorrer ao seu redor. Então, sim, aguardamos por qualquer tipo de Evento que possa ocorrer, pois temos a capacidade de interpretá-los e tomar uma decisão sobre o que fazer.&lt;/p&gt;

&lt;p&gt;Já os Objetos dentro de um software são apenas abstrações de &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;entidades&lt;/a&gt; do mundo real. Sendo abstrações, eles são construídos de forma minimalista — ou deveriam ser — para representar apenas uma faceta da entidade na qual eles representam. Então temos que implementar apenas os Eventos essenciais que essa abstração deveria aguardar. Caso ocorram.&lt;/p&gt;

&lt;p&gt;Um evento é uma notificação que um Objeto faz a quem estiver interessado. O Objeto (emissor) não sabe a quem está enviando a notificação.&lt;/p&gt;

&lt;p&gt;Em outras palavras, é o receptor que deve ter conhecimento sobre como será emitido o evento no transmissor, ou seja, sua Interface.&lt;/p&gt;

&lt;h2 id=&quot;implementacao&quot;&gt;Implementação&lt;/h2&gt;

&lt;p&gt;A implementação de um Evento, em qualquer linguagem de programação, pode ser definida basicamente como um &lt;em&gt;ponteiro para uma função&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Essa foi a maneira que o Delphi implementou os Eventos dos &lt;em&gt;widgets&lt;/em&gt; de um Formulário.&lt;/p&gt;

&lt;p&gt;Um clique num botão, por exemplo, é um ponteiro para uma função que está definida fora da instância do botão (Classe TButton e/ou derivados).&lt;/p&gt;

&lt;p&gt;A implementação dessa função normalmente está localizada no Formulário onde o botão está inserido.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;procedure TForm1.Button1Click(Sender: TObject);
begin
  ShowMessage(&#39;Clicked&#39;);
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No código acima &lt;code&gt;Button1Click&lt;/code&gt; é um método da Classe &lt;code&gt;TForm1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No &lt;em&gt;design&lt;/em&gt; do Formulário (arquivo *.dfm ou *.lfm) haverá um código como abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object Button1: TButton
  Left = 102
  Height = 25
  Top = 72
  Width = 75
  Caption = &#39;Button1&#39;
  OnClick = Button1Click
  TabOrder = 0
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Em &lt;em&gt;runtime&lt;/em&gt; o compilador irá configurar o evento &lt;code&gt;OnClick&lt;/code&gt; — uma propriedade do tipo &lt;code&gt;TNotifyEvent&lt;/code&gt; — da instância &lt;code&gt;Button1&lt;/code&gt; para utilizar a “função” &lt;code&gt;Button1Click&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Essa é a “maneira clássica” de utilizarmos Eventos.&lt;/p&gt;

&lt;p&gt;É uma maneira &lt;em&gt;simples&lt;/em&gt; e &lt;em&gt;eficaz&lt;/em&gt;, porém primitiva — mas eu não estou dizendo isso de maneira perjorativa.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Primitivo: que é o primeiro a existir; que coincide com a origem de algo; inicial, primevo, original.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos ver outra maneira de utilizarmos Eventos, apenas com Classes sem a necessidade de propriedades com &lt;a href=&quot;/posts/getters-e-setters/&quot;&gt;&lt;em&gt;Getters/Setters&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vou utilizar esse exemplo de Classe Log &lt;a href=&quot;/posts/classes-devem-implementar-apenas-uma-responsabilidade/#implementacao-oo&quot;&gt;aqui&lt;/a&gt; como base:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mdbs99/c5da3c1d04894b7ee949aa1f7735aade.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As mensagens desse programa serão:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;“log start”&lt;/li&gt;
  &lt;li&gt;“log finish”&lt;/li&gt;
  &lt;li&gt;“clicked”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Temos algumas diferenças entre o primeiro exemplo (Button1) e este último (Log).&lt;/p&gt;

&lt;p&gt;Ao invés da Classe &lt;code&gt;TLogInMemory&lt;/code&gt; possuir 2 propriedades do tipo &lt;code&gt;TLogNotifyEvent&lt;/code&gt; para implementar os eventos, ela recebe os “ponteiros” no construtor e isso simplifica muita coisa.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Primeiro&lt;/em&gt;, não precisamos definir as propriedades na Interface &lt;code&gt;ILog&lt;/code&gt;, mantendo-a limpa. Caso essas propriedades fossem definidas na Interface, obrigatoriamente teríamos que definir 3 linhas para cada propriedade:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;property OnStart: TLogNotifyEvent 
             read GetOnStart 
            write SetOnStart;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;A propriedade em si&lt;/li&gt;
  &lt;li&gt;O método GetOnStart&lt;/li&gt;
  &lt;li&gt;O método SetOnStart&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Como Interfaces não possuem atributos, os Métodos de leitura e escrita teríam que ser definidos na Interface e implementados em todas as Classes.&lt;/p&gt;

&lt;p&gt;Bem &lt;em&gt;verboso&lt;/em&gt;, não?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Segundo&lt;/em&gt;, não precisamos definir nenhuma propridade em &lt;code&gt;TLogInMemory&lt;/code&gt; mesmo que não houvessem os &lt;em&gt;Getters/Setters&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Terceiro&lt;/em&gt;, uma vez definido os eventos, não podemos modificá-los deixando a Classe &lt;a href=&quot;/posts/objetos-imutaveis/&quot;&gt;imutável&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Simples e elegante.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Os Eventos fazem parte de qualquer sistema. Podemos tirar proveito dessa técnica primária para deixar nossos Objetos com comportamento mais dinâmico.&lt;/p&gt;

&lt;p&gt;O acoplamento entre os Objetos é reduzido. O transmissor do Evento não sabe quem irá recebê-los, o que é ótimo.&lt;/p&gt;

&lt;p&gt;Essa é a forma mais básica e limpa para utilizarmos Eventos no &lt;em&gt;Object Pascal&lt;/em&gt;, mas não é a única.&lt;/p&gt;

&lt;p&gt;E se quisermos que mais de um Objeto seja notificado?&lt;/p&gt;

&lt;p&gt;Não seria melhor utilizarmos Objetos ao invés de simples ponteiros para função?&lt;/p&gt;

&lt;p&gt;Bem, essas são perguntas que poderão ser respondidas em outro artigo.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 May 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/eventos-e-objetos</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/eventos-e-objetos</guid>
      </item>
    
      <item>
        <title>Organização de Projetos</title>
        <description>&lt;p&gt;Todo novo Projeto é uma boa oportunidade para melhorarmos nossa habilidade de organização.&lt;/p&gt;

&lt;p&gt;Como você organiza a parte física e lógica dos seus Projetos?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/photo-jeff-hopper-17306.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;A organização do Projeto é uma etapa muito importante no desenvolvimento do &lt;em&gt;software&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Trabalhar num Projeto organizado é muito mais satisfatório e eficaz.&lt;/p&gt;

&lt;p&gt;No entanto, muitos desenvolvedores ainda acham que é perda de tempo organizar e querem logo iniciar a codificação, sem pensar na modularização e nomenclaturas de todas as partes que irão compor o Projeto.&lt;/p&gt;

&lt;p&gt;Utilizar uma boa nomenclatura, padronizando os nomes dos pacotes e arquivos é de suma importância para que o desenvolvimento flua de forma eficaz entre a equipe.&lt;/p&gt;

&lt;p&gt;Uma boa nomenclatura também ajuda na modularização, como veremos a seguir.&lt;/p&gt;

&lt;h2 id=&quot;projeto&quot;&gt;Nome do Projeto&lt;/h2&gt;

&lt;p&gt;Todo Projeto é construído para alguma empresa e por isso toda empresa deve ter sua própria árvore de Projetos. Caso seu Projeto seja feito para uma pessoa e não empresa, utilize o nome da pessoa.&lt;/p&gt;

&lt;p&gt;Então vem o nome do Projeto, que deve ser curto, de fácil memorização e escrita.&lt;/p&gt;

&lt;p&gt;Por quê?&lt;/p&gt;

&lt;p&gt;Primeiro, o nome do Projeto irá fazer parte do nome das &lt;em&gt;units&lt;/em&gt; como um prefixo, evitando a colisão de nomes com outros Projetos ou &lt;em&gt;Libs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Segundo, o nome do Projeto será utilizado por outras ferramentas de análise e acompanhamento das tarefas (tickets) e prazos. Todo nome deve ser de fácil memorização e como uma boa identidade.&lt;/p&gt;

&lt;p&gt;Não use nomes indecifráveis com &lt;em&gt;SisXpto10&lt;/em&gt; ou nomes grandes e sem personalidade como &lt;em&gt;Sistema de Tickets ABC&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nomes de Projetos devem ser curtos, fáceis de lembrar e… &lt;em&gt;sexys&lt;/em&gt;, por que não?&lt;/p&gt;

&lt;p&gt;Tenho Projetos chamados Sophia, &lt;a href=&quot;https://github.com/mdbs99/james&quot;&gt;James&lt;/a&gt;, Odin, &lt;a href=&quot;https://github.com/mdbs99/greyhound&quot;&gt;Greyhound&lt;/a&gt;, Dog, Nicole, e muitos outros.&lt;/p&gt;

&lt;p&gt;Tente encontrar um nome que tenha haver com o Projeto. Pode ser por causa da definição do nome em si, o que ele representa, uma sátira, apelido, pela “sonoridade” ou porque é &lt;em&gt;legal&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;diretorios-e-arquivos&quot;&gt;Diretórios e Arquivos&lt;/h2&gt;

&lt;p&gt;Nos meus Projetos, sejam eles individuais ou em equipe, eles tem basicamente essa estrutura logo abaixo.&lt;/p&gt;

&lt;h3 id=&quot;diretorios&quot;&gt;Diretórios&lt;/h3&gt;

&lt;p&gt;A começar pela nomenclatura dos diretórios, utilizo a seguinte divisão:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;empresa
  |
  projeto
    |
    bin  : todos os arquivos binários e libs
    |
    doc  : toda a documentação
    |
    pkg  : todos os pacotes
    |
    src  : fontes de produção
    |
    test : fontes de testes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviamente eu não inventei essa estrutura que é bem simples e lógica. Muitos Projetos &lt;em&gt;Open Source&lt;/em&gt; já a utilizam a muito tempo.&lt;/p&gt;

&lt;p&gt;O nome dos diretórios poderiam ser &lt;code&gt;/binaries&lt;/code&gt;, &lt;code&gt;/documentation&lt;/code&gt;, &lt;code&gt;/packages&lt;/code&gt;, &lt;code&gt;/source&lt;/code&gt; e &lt;code&gt;/tests&lt;/code&gt; porém para nomes de diretórios, quanto menor, melhor. Você irá lembrar disso quando tiver que digitar no console, digitar os &lt;em&gt;paths&lt;/em&gt; na IDE, etc.&lt;/p&gt;

&lt;p&gt;Considero uma árvore simples e limpa. Mas nem todos os projetos a utilizam.&lt;/p&gt;

&lt;p&gt;Por exemplo. A maioria dos projetos Java são codificados com base na URL da empresa em conjunto com algum padrão estranho.&lt;/p&gt;

&lt;p&gt;Exemplo: &lt;code&gt;empresa/projeto/src/main/java/com/acme/projeto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Na minha opinião, esta é uma nomenclatura muito deselegante e repetitiva.&lt;/p&gt;

&lt;p&gt;Por quê o nome do projeto se repete nos diretórios? Não sei. Talvez a IDE faça isso e ninguém dá a mínima.&lt;/p&gt;

&lt;p&gt;O que o &lt;code&gt;/com&lt;/code&gt; significa no contexto do Projeto? Nada. Apenas um padrão que seguem para evitar a colisão de nomes, talvez.&lt;/p&gt;

&lt;p&gt;E por quê &lt;code&gt;/java&lt;/code&gt; deve fazer parte da árvore de diretórios?!&lt;/p&gt;

&lt;p&gt;Realmente não sei.&lt;/p&gt;

&lt;h3 id=&quot;arquivos&quot;&gt;Arquivos&lt;/h3&gt;

&lt;p&gt;Já o nome dos arquivos, ou seja, das &lt;em&gt;units&lt;/em&gt;, devem seguir o seguinte padrão:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;projeto&amp;gt;.&amp;lt;grupo&amp;gt;.&amp;lt;subgrupo&amp;gt;.&amp;lt;nome&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Apenas &lt;code&gt;&amp;lt;projeto&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;grupo&amp;gt;&lt;/code&gt; são obrigatórios.&lt;/p&gt;

&lt;p&gt;Por quê?&lt;/p&gt;

&lt;p&gt;Bem, cada &lt;em&gt;unit&lt;/em&gt; no &lt;em&gt;Object Pascal&lt;/em&gt; pode conter mais de uma Classe. Então não é necessário um &lt;code&gt;&amp;lt;nome&amp;gt;&lt;/code&gt; de Classe, por exemplo, como é o caso do Java.&lt;/p&gt;

&lt;p&gt;Apenas para Formulários e &lt;a href=&quot;/posts/datamodule-e-apenas-um-container/&quot;&gt;&lt;em&gt;DataModules&lt;/em&gt;&lt;/a&gt;, o nome será obrigatório.&lt;/p&gt;

&lt;p&gt;Vejamos alguns exemplos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mdbs99/james/blob/master/src/james.data.pas&quot;&gt;james.data&lt;/a&gt; contém &lt;code&gt;&amp;lt;projeto&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;grupo&amp;gt;&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mdbs99/james/blob/master/src/james.data.clss.pas&quot;&gt;james.data.clss&lt;/a&gt; contém &lt;code&gt;&amp;lt;projeto&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;grupo&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;subgrupo&amp;gt;&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mdbs99/james/blob/master/src/james.data.stream.clss.pas&quot;&gt;james.data.stream.clss&lt;/a&gt; contém &lt;code&gt;&amp;lt;projeto&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;grupo&amp;gt;&lt;/code&gt; e dois &lt;code&gt;&amp;lt;subgrupo&amp;gt;&lt;/code&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Existem alguns &lt;em&gt;sufixos&lt;/em&gt; de arquivos que utilizo bastante:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Clss : conterá classes que implementam interfaces;&lt;/li&gt;
  &lt;li&gt;Tests : contém as classes de testes;&lt;/li&gt;
  &lt;li&gt;Form : utilizado para todos os formulários;&lt;/li&gt;
  &lt;li&gt;Module : utilizado para todos os &lt;em&gt;DataModules&lt;/em&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Para o nome das Classes, veja &lt;a href=&quot;/posts/nomeando-classes/&quot;&gt;esse artigo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dividir&quot;&gt;Dividir para Conquistar&lt;/h2&gt;

&lt;p&gt;Todo projeto de tamanho médio ou grande, deve ser dividido em módulos lógicos, ou seja, subdiretórios dentro de &lt;code&gt;/src&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Essa divisão irá depender exclusivamente do seu projeto e contextos.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Dividir para conquistar” — Napoleão&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essa divisão em subdiretórios é importante para termos a reutilização dos fontes por outros Projetos e ao mesmo tempo a restrição de visibilidade.&lt;/p&gt;

&lt;p&gt;Se os fontes de um Projeto ficasse em apenas um diretório, outros Projetos poderiam ter acesso a tudo. Dividindo em subdiretórios você pode restringir a visibilidade e acesso para esses outros Projetos.&lt;/p&gt;

&lt;p&gt;Outra possibilidade bem interessante é dividir os módulos em &lt;a href=&quot;/posts/james-e-testes-de-unidade/#pacote-de-testes&quot;&gt;Pacotes&lt;/a&gt; reutilizáveis entre Projetos distintos.
Nesse padrão a divisão dos fontes não é apenas por subdiretórios, mas sim por árvores completamente diferentes.&lt;/p&gt;

&lt;p&gt;É normal criarmos Pacotes para componentes e &lt;em&gt;Libs&lt;/em&gt; reutilizáveis, mas criar Pacotes entre Projetos também pode ser muito eficaz para o desenvolvimento.&lt;/p&gt;

&lt;p&gt;No Lazarus, basta abrir um Pacote uma única vez que ele já fica registrado na IDE. Depois basta adicionar o Pacote no(s) Projeto(s) para reutilizar seus fontes. Caso queira mudar o &lt;em&gt;path&lt;/em&gt; do Pacote, basta fazer num único lugar (XML de configuração da IDE) para que todos os outros Projetos sejam atualizados. Isso é muito melhor do que ter que alterar &lt;em&gt;paths&lt;/em&gt; de diretório reutilizáveis em cada Projeto.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Um Projeto de &lt;em&gt;software&lt;/em&gt; não é apenas código-fonte. Devemos fazer um estudo desde o nome a ser utilizado, passando pela nomenclatura, diretórios e divisões de cada módulo.&lt;/p&gt;

&lt;p&gt;Seu Projeto poderá ter uma vida mais longa se você souber onde encontrar cada peça facilmente.&lt;/p&gt;

&lt;p&gt;A divisão por módulos irá facilitar a manutenção no longo prazo e a nomenclatura correta irá deixar tudo mais fácil.&lt;/p&gt;

&lt;p&gt;E você, como organiza seus Projetos?&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 May 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/organizacao-de-projetos</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/organizacao-de-projetos</guid>
      </item>
    
      <item>
        <title>James e Testes de Unidade</title>
        <description>&lt;p&gt;James foi atualizado com Testes de Unidade.&lt;/p&gt;

&lt;p&gt;Veja nesse artigo como tudo foi configurado e como você pode adicionar seus próprios testes apenas alterando um arquivo XML.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-clark-young-135435.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;A utilização de testes automatizados é obrigatório em qualquer projeto.&lt;/p&gt;

&lt;p&gt;Você pode criar os testes utilizando pequenos programas que serão compilados e executados no &lt;em&gt;console&lt;/em&gt;. Dependendo do código de resultado ao terminar, você saberá se o programa teve ou não sucesso.&lt;/p&gt;

&lt;p&gt;Alguns &lt;em&gt;frameworks&lt;/em&gt; facilitam esse processo. Chamados de &lt;a href=&quot;https://en.wikipedia.org/wiki/XUnit&quot;&gt;xUnit&lt;/a&gt;, eles dão aos desenvolvedores todo o suporte para criar todo tipo de teste no código. Basta você herdar de alguma classe padrão e criar métodos de teste.&lt;/p&gt;

&lt;p&gt;No entanto, não importa se esses testes utilizam algum &lt;em&gt;framework&lt;/em&gt; específico, nem se foram criados de acordo com o processo de &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;&lt;em&gt;Test-driven development&lt;/em&gt; (TDD)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O importante é ter os testes.&lt;/p&gt;

&lt;h2 id=&quot;pacote-de-testes&quot;&gt;Pacote de Testes&lt;/h2&gt;

&lt;p&gt;No &lt;a href=&quot;https://github.com/mdbs99/james&quot;&gt;James&lt;/a&gt; eu utilizei um &lt;em&gt;framework&lt;/em&gt; chamado &lt;a href=&quot;http://wiki.freepascal.org/fpcunit&quot;&gt;FPCUnit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É um &lt;em&gt;framework&lt;/em&gt; xUnit padrão do FPC/Lazarus muito parecido com o &lt;a href=&quot;http://dunit.sourceforge.net/&quot;&gt;DUnit&lt;/a&gt; do Delphi.&lt;/p&gt;

&lt;p&gt;Basta clicar em &lt;code&gt;File-&amp;gt;New-&amp;gt;FPCUnit Test Application&lt;/code&gt;, digitar o nome da Classe de Teste, clicar em “criar unit” e pronto. Depois basta ir criando os métodos com os testes.&lt;/p&gt;

&lt;p&gt;No James a configuração é um pouco mais sofisticada e é importante que você saiba como tudo funciona.&lt;/p&gt;

&lt;p&gt;O James tem 2 pacotes (atualmente):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;james.lpk&lt;/li&gt;
  &lt;li&gt;james.tests.lpk&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ambos estão no diretório &lt;code&gt;/pkg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O pacote &lt;code&gt;james.lpk&lt;/code&gt; contém as Classes principais e o &lt;code&gt;james.tests.lpk&lt;/code&gt; apenas as Classes de Testes.&lt;/p&gt;

&lt;p&gt;Esse último tem a dependência com o primeiro.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-pkg-james.tests-01001.jpg&quot; alt=&quot;james.tests.lpk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para o usuário do James, apenas o pacote &lt;code&gt;james.lpk&lt;/code&gt; é necessário.&lt;/p&gt;

&lt;p&gt;Então por quê criar um outro pacote apenas de testes?&lt;/p&gt;

&lt;p&gt;O motivo é que eu posso ter tipos de aplicações de testes diferentes (desktop ou console) e basta atualizar os fontes do pacote para que qualquer aplicação fique atualizada.&lt;/p&gt;

&lt;p&gt;Essa técnica eu aprendi com meu amigo &lt;a href=&quot;https://github.com/jcmoraisjr&quot;&gt;João Morais&lt;/a&gt; quando comecei a acompanhar um de seus projetos chamado &lt;a href=&quot;https://github.com/jcmoraisjr/jcore&quot;&gt;JCore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nos fontes do James, há o projeto &lt;a href=&quot;https://github.com/mdbs99/james/blob/master/test/james.tests.gui.lpr&quot;&gt;james.tests.gui&lt;/a&gt; que utiliza o pacote de testes.&lt;/p&gt;

&lt;h2 id=&quot;fpcunit&quot;&gt;Teste com FPCUnit&lt;/h2&gt;

&lt;p&gt;O projeto &lt;code&gt;james.tests.gui&lt;/code&gt; utiliza a interface do FPCUnit.&lt;/p&gt;

&lt;p&gt;Ao executar o projeto a tela abaixo será exibida. Basta então executar todos os testes (F9) e verificar se houve algum erro.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-fpcunit-loading-552.jpg&quot; alt=&quot;FPCUnit loading&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se você baixar, compilar e executar esse projeto, ele irá exibir alguns erros dizendo que o arquivo &lt;code&gt;james.tests.template.xml&lt;/code&gt; não foi encontrado.&lt;/p&gt;

&lt;p&gt;O que você deve fazer é copiar esse arquivo da pasta &lt;code&gt;/test&lt;/code&gt; para a pasta &lt;code&gt;/bin&lt;/code&gt; e modificar seu conteúdo com seus próprios arquivos e configurações.&lt;/p&gt;

&lt;p&gt;Veja um exemplo de configuração para alguns dos meus arquivos de teste:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;Tests&amp;gt;
  &amp;lt;TStreamDividedTest&amp;gt;
    &amp;lt;files&amp;gt;
      &amp;lt;file-1 filename=&quot;tests/04DF86C9.PDF&quot; part=&quot;3&quot; /&amp;gt;
    &amp;lt;/files&amp;gt;
  &amp;lt;/TStreamDividedTest&amp;gt;
  &amp;lt;TStreamPartialFromTextTest&amp;gt;
    &amp;lt;files&amp;gt;
      &amp;lt;file-1 filename=&quot;tests/04DF86C9.PDF&quot; text=&quot;encoding=&quot; /&amp;gt;
    &amp;lt;/files&amp;gt;
  &amp;lt;/TStreamPartialFromTextTest&amp;gt;
&amp;lt;/Tests&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veja que de acordo com o path dos arquivos no XML, meus arquivos ficam em &lt;code&gt;/bin/tests/&lt;/code&gt;. Pois &lt;code&gt;/bin/&lt;/code&gt; é a pasta padrão onde o executável será gerado.&lt;/p&gt;

&lt;p&gt;São arquivos pessoais e/ou privados de projetos reais. Esses arquivos não podem subir para o Github. Por isso meus testes utilizam um XML configurável.&lt;/p&gt;

&lt;p&gt;Então, se você quiser utilizar os Testes de Unidade do James, cabe a você configurar sua versão do XML.&lt;/p&gt;

&lt;p&gt;Se tudo der certo, você verá a tela abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-fpcunit-green-552.jpg&quot; alt=&quot;FPCUnit green&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ajudando&quot;&gt;Como ajudar&lt;/h2&gt;

&lt;p&gt;Se você quiser ajudar esse projeto — ou algum outro dos &lt;a href=&quot;https://github.com/mdbs99?tab=repositories&quot;&gt;meus projetos&lt;/a&gt; — siga esses passos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Faça um fork do projeto;&lt;/li&gt;
  &lt;li&gt;Utilize o branch &lt;code&gt;develop&lt;/code&gt; para fazer qualquer modificação;&lt;/li&gt;
  &lt;li&gt;Faça um &lt;em&gt;Pull Request&lt;/em&gt; utilizando &lt;code&gt;develop&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Eu irei fazer a revisão das mudanças e se tudo tiver de acordo, sua contribuição será mesclada no &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O branch &lt;code&gt;master&lt;/code&gt; só irá conter a versão de produção, 100% compilada, com todos os Testes de Unidade funcionando. Por isso qualquer contribuição deverá ser enviada para o &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;James é um projeto que está no começo. Estou refatorando meus códigos privados para criar o James (e outros projetos, futuramente).&lt;/p&gt;

&lt;p&gt;Tudo Open Source.&lt;/p&gt;

&lt;p&gt;Creio que todos esses projetos poderão ser compilados no Delphi, porém adaptações devem ser feitas.&lt;/p&gt;

&lt;p&gt;Se você tem interesse no projeto, preciso de ajuda para criar essas adaptações.&lt;/p&gt;

&lt;p&gt;Aguardo seus comentários.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Apr 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/james-e-testes-de-unidade/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/james-e-testes-de-unidade/</guid>
      </item>
    
      <item>
        <title>James Package</title>
        <description>&lt;p&gt;James é um pacote de Classes e Interfaces para projetos Orientados a Objetos.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-wesley-caribe-63610.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eu tenho um diretório com código-fonte que é utilizado por quase todos os meus projetos, particulares ou não.&lt;/p&gt;

&lt;p&gt;Apenas 1 diretório com quase 100 arquivos.&lt;/p&gt;

&lt;p&gt;São fontes para trabalhar com &lt;em&gt;stream&lt;/em&gt;, XML, arquivos, HTTP, &lt;em&gt;WebServices&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;Não há pacotes ou subprojetos. Apenas arquivos que são compartilhados por vários projetos.&lt;/p&gt;

&lt;p&gt;Como todo desenvolvedor Pascal faz, basta ter um diretório, adicionar o &lt;em&gt;path&lt;/em&gt; no projeto e começar a usar os fontes. Simples.&lt;/p&gt;

&lt;p&gt;Esse código-fonte foi sendo construído e modificando por vários anos. Alguns fontes são bem novos, outros bem antigos.&lt;/p&gt;

&lt;p&gt;Mesmo que tudo esteja funcionando, essa “organização” me tira o sono.&lt;/p&gt;

&lt;p&gt;Faz tempo que eu quero organizar esse código-fonte. Fazer uma limpeza. Atualizar. Criar pacotes lógicos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Então pensei: Por quê não criar um projeto &lt;em&gt;Open Source&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Bem, é o que estou fazendo agora. Esse é meu presente de Páscoa pra você.&lt;/p&gt;

&lt;p&gt;Criei o primeiro projeto.&lt;/p&gt;

&lt;p&gt;Chama-se &lt;strong&gt;James&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Eu tenho nomeado meus projetos utilizando nomes comuns — a maioria em Inglês — já faz quase 2 anos.&lt;/p&gt;

&lt;p&gt;É divertido.&lt;/p&gt;

&lt;p&gt;É como se cada projeto fizesse parte de uma família.&lt;/p&gt;

&lt;p&gt;A maioria dos meus &lt;em&gt;aplicativos&lt;/em&gt; tem nomes femininos. Já os projetos que são &lt;em&gt;ferramentas&lt;/em&gt; ou &lt;em&gt;libs&lt;/em&gt;, costumam ter nomes masculinos.&lt;/p&gt;

&lt;p&gt;Você pode fazer um &lt;em&gt;fork&lt;/em&gt; do James &lt;a href=&quot;https://github.com/mdbs99/james&quot;&gt;aqui&lt;/a&gt; e contribuir.&lt;/p&gt;

&lt;p&gt;Até agora subi poucos arquivos.&lt;/p&gt;

&lt;p&gt;Ainda estou organizando.&lt;/p&gt;

&lt;p&gt;Mas estou lhe avisando agora, justamente porque tem poucos arquivos para ficar fácil o entendimento do código.&lt;/p&gt;

&lt;p&gt;Estou pretendendo criar vários outros projetos &lt;em&gt;Open Source&lt;/em&gt; que sejam compatíveis com o Delphi na versão mais atual.&lt;/p&gt;

&lt;p&gt;Por isso preciso da sua ajuda.&lt;/p&gt;

&lt;p&gt;Os fontes foram compilados no dialeto do Free Pascal. Basta utilizar &lt;code&gt;{$mode delphi}&lt;/code&gt; para compilar no dialeto do Delphi, utilizando o FPC.&lt;/p&gt;

&lt;p&gt;Vou utilizar o dialeto Delphi para que os fontes sejam compatíveis, mas somente se houver interesse por parte da comunidade Delphi (utilize os comentários abaixo se você está interessado).&lt;/p&gt;

&lt;p&gt;O James será a base (refatorada) de todos os meus projetos. Ele possui Classes base que é útil na maioria dos meus projetos.&lt;/p&gt;

&lt;p&gt;Durante esse semana vou subir os fontes das &lt;em&gt;Unit Tests&lt;/em&gt;. Já estão prontos, mas precisam ser refatorados.&lt;/p&gt;

&lt;p&gt;Outro projeto que irá utilizar o James, eu já criei no Github. Seu nome é &lt;a href=&quot;https://github.com/mdbs99/kate&quot;&gt;Kate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kate é uma &lt;em&gt;lib&lt;/em&gt; para trabalhar com certificação e assinatura digital. Essa &lt;em&gt;lib&lt;/em&gt; irá utilizar o &lt;a href=&quot;/posts/assinatura-digital-em-arquivos-xml/#utilizando-acbr&quot;&gt;Projeto ACBr&lt;/a&gt; nos “bastidores”.&lt;/p&gt;

&lt;p&gt;Todos esses projetos serão baseados nas premissas dos artigos que venho escrevendo aqui no blog.&lt;/p&gt;

&lt;p&gt;Todos serão &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/&quot;&gt;Orientados a Objetos&lt;/a&gt; e 100% baseados em &lt;a href=&quot;/posts/interfaces-em-todo-lugar/&quot;&gt;Interfaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&quot;https://github.com/mdbs99/aws&quot;&gt;AWS&lt;/a&gt; também será atualizado para compilar na versão mais atual do FPC e, quem sabe, irá compilar no Delphi.&lt;/p&gt;

&lt;p&gt;Quando tudo estiver organizado, será o momento de iniciarmos um novo &lt;strong&gt;Framework Web&lt;/strong&gt; 100% Orientado a Objetos para FPC e Delphi.&lt;/p&gt;

&lt;p&gt;Você está comigo?&lt;/p&gt;

&lt;p&gt;Então vamos! &lt;strong&gt;#ObjectPascal4Ever&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Apr 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/james/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/james/</guid>
      </item>
    
      <item>
        <title>Objetos Puros</title>
        <description>&lt;p&gt;Mesmo que você tenha utilizado linguagens imperativas por toda a sua vida, você já deve ter ouvido falar em linguagens funcionais, assim como o termo &lt;em&gt;Funções Puras&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;E sobre &lt;em&gt;Objetos Puros&lt;/em&gt;, você já ouviu algo a respeito?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-florian-klauer-489.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Se você não conhece o termo &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;Funções Puras&lt;/a&gt; ou linguagens funcionais, bem, você deveria.&lt;/p&gt;

&lt;p&gt;A verdadeira &lt;a href=&quot;/posts/o-que-e-orientacao-a-objetos/&quot;&gt;Orientação a Objetos&lt;/a&gt; tem muito em comum com a Programação Funcional.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;p&gt;A Programação Funcional é declarativa. Você não deve dizer ao compilador o que fazer linha-a-linha. Assim como na Orientação a Objetos.&lt;/p&gt;

&lt;p&gt;A Programação Funcional trabalha com estruturas &lt;a href=&quot;/posts/objetos-imutaveis/&quot;&gt;imutáveis&lt;/a&gt;, que é um ótimo conceito para simplificar a interperabilidade entre Objetos na Programação Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;A Programação Funcional também tem o conceito de Funções Puras ou Impuras.&lt;/p&gt;

&lt;p&gt;Será que esse mesmo conceito tem algo em comum com a Orientação a Objetos?&lt;/p&gt;

&lt;h2 id=&quot;funcoes-puras&quot;&gt;Funções Puras&lt;/h2&gt;

&lt;p&gt;Segundo a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;Wikipedia&lt;/a&gt;, para uma função ser considerada &lt;em&gt;Pura&lt;/em&gt;, as seguintes afirmações abaixo devem ser verdadeiras (tradução livre):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A função sempre avalia o mesmo valor de resultado dado o mesmo valor do(s) argumento(s). O valor do resultado da função não pode depender de nenhuma informação oculta ou estado que possa mudar enquanto a execução do programa prossegue ou entre diferentes execuções do programa, nem pode depender de qualquer entrada externa dos dispositivos de E/S.&lt;/li&gt;
  &lt;li&gt;A avaliação do resultado não causa qualquer efeito ou saída secundária observável semanticamente, como a mutação de objetos mutáveis ​​ou a saída para dispositivos de E/S.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Se ambas as afirmações não forem verdadeiras, a função é considerada &lt;em&gt;Impura&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Eu acho que essas afirmações são cabíveis na Orientação a Objetos, pois é bem possível criar um Objeto que cumpre ambas as afirmações.&lt;/p&gt;

&lt;p&gt;Mas Objetos podem ser mais complexos que funções. Os Objetos tem &lt;em&gt;estado&lt;/em&gt; encapsulado. Podem ser mutáveis ou imutáveis.&lt;/p&gt;

&lt;p&gt;Então, é possível considerarmos um Objeto como puro?&lt;/p&gt;

&lt;h2 id=&quot;objetos-puros&quot;&gt;Objetos Puros&lt;/h2&gt;

&lt;p&gt;Eu não encontrei esse termo na Web então, será que posso dizer que eu cunhei o termo?&lt;/p&gt;

&lt;p&gt;Na verdade eu não me importo, visto que não é uma ideia 100% original. Eu me inspirei nas Funções Puras e apenas ampliei o conceito para a Programação Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, um Objeto Puro deve ter as mesmas características que uma Função Pura.&lt;/p&gt;

&lt;p&gt;Um Objeto Puro também não deve criar outro Objeto internamente.&lt;/p&gt;

&lt;p&gt;Em outras palavras, para um Objeto ser considerado Puro, toda dependência deve ser injetada pelo &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;construtor&lt;/a&gt; da Classe.&lt;/p&gt;

&lt;p&gt;Vamos ver alguns exemplos.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-1&quot;&gt;Exemplo 1 — Objeto Impuro&lt;/h4&gt;

&lt;p&gt;Abaixo temos um exemplo de uma Classe &lt;code&gt;TBMWCar&lt;/code&gt; que implementa a Interface &lt;code&gt;ICar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Então instanciamos um &lt;code&gt;Car&lt;/code&gt; e depois mostramos na tela o valor do sensor de velocidade do motor — acho que tem sensores mais antigos que calculam a partir das rodas, mas isso é irrelevante.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var
  Car: ICar;
begin
  Car := TBMWCar.New;
  Print(Car.Engine.Sensors[&#39;speed&#39;].Value);
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eu diria que essa Classe &lt;code&gt;TBMWCar&lt;/code&gt; é impura.&lt;/p&gt;

&lt;p&gt;O motivo é que temos um método &lt;code&gt;Engine&lt;/code&gt; (Método ou Propriedade, dá no mesmo) que retorna um Objeto interno que &lt;a href=&quot;/posts/objetos-representam-entidades/&quot;&gt;representa&lt;/a&gt; o motor do carro.&lt;/p&gt;

&lt;p&gt;Como essa instância de motor foi criada?&lt;/p&gt;

&lt;p&gt;Olhando apenas o exemplo, podemos concluir que a instância foi criada no construtor da Classe ou mesmo diretamente na chamada do Método &lt;code&gt;Engine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;E sobre os &lt;code&gt;Sensors&lt;/code&gt;? Também não sabemos como foram criados.&lt;/p&gt;

&lt;p&gt;Não temos o controle do que será instanciado dentro da Classe &lt;code&gt;TBMWCar&lt;/code&gt; se quisermos utilizá-la.&lt;/p&gt;

&lt;p&gt;O Objeto tem o controle e isso está &lt;em&gt;correto&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Você compra um carro e, normalmente, apenas utiliza sua interface (volante, marcha, pedais, painel, etc). Todo ele já vem montado e perfeito.&lt;/p&gt;

&lt;p&gt;Talvez você não saiba o tipo de motor, tecnologia ou fornecedores que fabricaram suas peças.&lt;/p&gt;

&lt;p&gt;O carro apenas existe, pronto para sua função.&lt;/p&gt;

&lt;p&gt;Mas… Isso retrata a vida real ou estamos pulando algumas etapas?&lt;/p&gt;

&lt;p&gt;Na verdade, antes do carro chegar até suas mãos, ele foi &lt;em&gt;montado na fábrica&lt;/em&gt; utilizando centenas ou milhares de peças.&lt;/p&gt;

&lt;p&gt;Quando olhamos para o carro montado, concluído, perfeito, não pensamos nessa etapa de montagem, queremos apenas utilizá-lo. Não queremos &lt;em&gt;montar&lt;/em&gt; o carro toda vez que tivermos que utilizá-lo, certo?&lt;/p&gt;

&lt;p&gt;Ele já deve vir concluído e pronto para uso.&lt;/p&gt;

&lt;p&gt;O problema dessa abordagem, no entanto, é que não podemos &lt;em&gt;testar&lt;/em&gt; o carro — a Classe &lt;code&gt;TBMWCar&lt;/code&gt; — apropriadamente ou isoladamente, utilizando &lt;em&gt;Unit Tests&lt;/em&gt;, sem que o “motor original” seja “ativado”.&lt;/p&gt;

&lt;p&gt;Para fazer esses testes, temos que voltar algumas etapas para ser possível desmontar ou montar o carro com “outras peças”.&lt;/p&gt;

&lt;p&gt;Temos que voltar à “fábrica” para podermos escolher quais peças irão compor o carro.&lt;/p&gt;

&lt;h4 id=&quot;exemplo-2&quot;&gt;Exemplo 2 — Objeto Puro&lt;/h4&gt;

&lt;p&gt;Vamos refazer o exemplo anterior, &lt;em&gt;injetando&lt;/em&gt; o motor que quisermos quando formos criar a instância do nosso BMW.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Car := 
  TBMWCar.New(
    TV8Engine.New(
      // more arguments
    )
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No código atualizado, sabemos que tipo de motor está sendo utilizado. Trata-se de um modelo V8. Legal!&lt;/p&gt;

&lt;p&gt;Estamos utilizando &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Injeção de Dependência&lt;/a&gt; aqui.&lt;/p&gt;

&lt;p&gt;Essa técnica, em conjunto com a Composição de Objetos, é crucial para um desenvolvimento elegante e eficaz na Programação Orientada a Objetos.&lt;/p&gt;

&lt;p&gt;E por quê é “melhor” fazer dessa forma?&lt;/p&gt;

&lt;p&gt;O motivo é que agora podemos testar o carro sem “ligar o motor original” se assim o desejarmos. Vejamos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Car := 
  TBMWCar.New(
    TFakeEngine.New
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos testar o carro, mas ele estará utilizando um “motor falso” ou pense em sensores falsos (utilize sua imaginação).&lt;/p&gt;

&lt;p&gt;Esse Objeto é &lt;em&gt;puro&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ele não cria nada internamente. Todas as suas dependências são injetadas através do construtor da Classe.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Para um Objeto ser considerado puro ele deve ter o comportamento de uma Função Pura e também não deve criar nada internamente.&lt;/p&gt;

&lt;p&gt;Da mesma forma que temos as Funções Puras no Paradigma Funcional, podemos ter os Objetos Puros no Paradigma Orientado a Objetos. Para isto, precisamos que estes Objetos sejam imutáveis e que as suas dependências sejam injetadas explicitamente, passadas por meio do construtor do Objeto.&lt;/p&gt;

&lt;p&gt;A vantagem de termos Objetos Puros é que eles tem baixo acoplamento e por isso são mais fáceis de serem testados.&lt;/p&gt;

&lt;p&gt;Mas se tudo são Objetos, onde as instâncias serão criadas?&lt;/p&gt;

&lt;p&gt;Em apenas 2 lugares: Dentro de Construtores &lt;a href=&quot;/posts/construtores-da-classe-primario-secundarios/&quot;&gt;Secundários&lt;/a&gt; ou através de Métodos de Objetos Impuros.&lt;/p&gt;

&lt;p&gt;Mas esse é um assunto para outro artigo.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Apr 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/objetos-puros/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/objetos-puros/</guid>
      </item>
    
      <item>
        <title>Pacotes e Versões no Lazarus</title>
        <description>&lt;p&gt;Se você já precisou trabalhar com versões diferentes de um mesmo Pacote de componentes no Lazarus, esse artigo pode ser útil.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-samuel-zeller-118195.jpg&quot; alt=&quot;Unsplash image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducao&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Os &lt;em&gt;frameworks&lt;/em&gt; e &lt;em&gt;libs&lt;/em&gt; sempre são disponibilizados no formato de Pacotes.&lt;/p&gt;

&lt;p&gt;No Delphi são os arquivos *.dpk e no Lazarus são os arquivos *.lpk.&lt;/p&gt;

&lt;p&gt;Os Pacotes são ótimos. Ajudam na separação lógica do código e reutilização, mesmo dentro de um único projeto.&lt;/p&gt;

&lt;p&gt;Os Pacotes também servem para empacotar componentes que serão instalados na IDE.&lt;/p&gt;

&lt;p&gt;Mas se você precisar utilizar uma versão diferente (mais atualizada) de um Pacote num projeto, mas não quer alterar o código de outros projetos mais antigos que também utilizam esse Pacote, o que fazer?&lt;/p&gt;

&lt;h2 id=&quot;problemas&quot;&gt;Problemas&lt;/h2&gt;

&lt;p&gt;Pode ser sorte, mas a anos eu trabalho com componentes, frameworks ou libs (vou utilizar a nomenclatura &lt;em&gt;Libs&lt;/em&gt; agora) de terceiros e quase nunca tive problemas em atualizar os fontes.&lt;/p&gt;

&lt;p&gt;Talvez minha sorte tenha haver com o fato de que eu quase não atualizo as &lt;em&gt;Libs&lt;/em&gt; que estão funcionando.&lt;/p&gt;

&lt;p&gt;Por outro lado não posso ficar “parado no tempo” pois quando atulizar o código muita coisa pode ter mudado e levará um tempo até fazer todas as correções.&lt;/p&gt;

&lt;p&gt;Então, precisamos atualizar alguma hora.&lt;/p&gt;

&lt;p&gt;As vezes tenho que fazer pequenas correções no meu código ou mesmo envio &lt;em&gt;patches&lt;/em&gt; para outros autores de componentes &lt;em&gt;Open Source&lt;/em&gt;, mas nunca tive um problema grave.&lt;/p&gt;

&lt;p&gt;Por isso sempre mantive apenas 1 source para cada &lt;em&gt;Lib&lt;/em&gt;. Para projetos mais organizados que mantém &lt;em&gt;branches&lt;/em&gt; imutáveis (&lt;em&gt;labels&lt;/em&gt;) de versões, era ainda mais seguro.&lt;/p&gt;

&lt;p&gt;Bem, não mais.&lt;/p&gt;

&lt;p&gt;Parece que minha sorte acabou e venho tendo alguns problemas de incompatibilidade entre esses Pacotes.&lt;/p&gt;

&lt;p&gt;São alguns problemas, não muitos.&lt;/p&gt;

&lt;p&gt;As vezes uma atualização de algum Pacote não compila com a versão mais nova do Lazarus; outras vezes não compila com a versão mais nova do FPC; outras vezes o código foi tão alterado que fico receoso em atualizar, pois tenho projetos que não tem &lt;em&gt;Unit Tests&lt;/em&gt; apropriados.&lt;/p&gt;

&lt;p&gt;Então vi que era hora de me preocupar com isso e vou lhe explicar como estou fazendo atualmente.&lt;/p&gt;

&lt;h2 id=&quot;versionando&quot;&gt;Versionando&lt;/h2&gt;

&lt;p&gt;Primeiramente eu entrei em contato com a &lt;a href=&quot;http://lists.lazarus.freepascal.org/pipermail/lazarus/&quot;&gt;Lista Oficial do Lazarus&lt;/a&gt; e (resumindo) &lt;a href=&quot;http://lists.lazarus.freepascal.org/pipermail/lazarus/2017-March/231269.html&quot;&gt;perguntei&lt;/a&gt; como eu poderia manter mais de uma versão de um mesmo Pacote.&lt;/p&gt;

&lt;p&gt;Ao que parece o Lazarus IDE é bem &lt;em&gt;esperto&lt;/em&gt; e consegue fazer o carregamento do Pacote correspondende a versão que você sinalizou que gostaria de utilizar quando adicionou o Pacote como dependência no seu Projeto.&lt;/p&gt;

&lt;p&gt;No exemplo abaixo eu estou adicinando o Pacote AWS a partir da versão 0.4:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/photo-new-requirement-8287.jpg&quot; alt=&quot;Lazarus New Requirement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Significa que se um Projeto estiver utilizando a versão 0.3 é esse Pacote que está disponível, mas se você abrir um novo projeto que utiliza a versão 0.4, por exemplo, a IDE irá recarregar a nova versão do Pacote.&lt;/p&gt;

&lt;p&gt;Legal, mas não resolve 100%.&lt;/p&gt;

&lt;h2 id=&quot;preferencial&quot;&gt;Definindo Pacotes Preferenciais&lt;/h2&gt;

&lt;p&gt;Muitas vezes o autor não versiona o Pacote, ou seja, ele não define os números de &lt;em&gt;Min&lt;/em&gt; e &lt;em&gt;Max&lt;/em&gt;. Nesse caso, não há como a IDE carregar o Pacote correto, pois todos teriam o mesmo número de versão.&lt;/p&gt;

&lt;p&gt;Então mais uma vez o Lazarus me surpreendeu me dando a opção de marcar um &lt;a href=&quot;http://wiki.freepascal.org/IDE_Window:_Project_Inspector#Store_file_name_as_preferred_for_this_dependency&quot;&gt;Pacote como preferencial&lt;/a&gt;, apontando diretamente para o &lt;em&gt;path&lt;/em&gt; do *.lpk.&lt;/p&gt;

&lt;p&gt;Quase perfeito, mas…&lt;/p&gt;

&lt;p&gt;Não há opção na IDE para configurar o &lt;em&gt;path&lt;/em&gt;. Ao utilizar a oção de &lt;em&gt;preferencial&lt;/em&gt; você vai salvar o &lt;em&gt;path&lt;/em&gt; nas configurações do seu projeto, mas ele vai salvar o &lt;em&gt;path&lt;/em&gt; do Pacote que já está carregado.&lt;/p&gt;

&lt;p&gt;Eu &lt;a href=&quot;http://lists.lazarus.freepascal.org/pipermail/lazarus/2017-April/231287.html&quot;&gt;sugeri&lt;/a&gt; que deveria haver essa opção lá na lista, porém não sei se não entenderam ou talvez eu não tenha entendido como o mecanismo funciona — ou talvez os autores estão curtindo o fim de semana merecido e irão responder outra hora — enfim.&lt;/p&gt;

&lt;p&gt;De qualquer forma estou pensando em fazer esse &lt;em&gt;patch&lt;/em&gt; para o Lazarus, ou seja, poder adicionar uma dependência apontando para um &lt;em&gt;path&lt;/em&gt; relativo.&lt;/p&gt;

&lt;p&gt;Enquanto não há essa opção, sigo em frente.&lt;/p&gt;

&lt;p&gt;Estou utilizando no mínimo 3 diretórios com a cópia dos fontes de diferentes versões para o mesmo Pacote.&lt;/p&gt;

&lt;p&gt;São eles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;master — diretório com a versão de produção;&lt;/li&gt;
  &lt;li&gt;develop — diretório com a versão modificada, testes, patchs, etc;&lt;/li&gt;
  &lt;li&gt;snapshot — diretório com a versão original do autor;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Felizmente esses diretórios são &lt;strong&gt;facilmente&lt;/strong&gt; alterados no XML *.lpi de configuração do Projeto. É manual, porém bem fácil (como a maioria das coisas são no &lt;em&gt;Object Pascal&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Caso eu queria mudar a versão de um Pacote, basta mudar o diretório com a versão correspondente e dar um &lt;em&gt;build&lt;/em&gt; no Projeto.&lt;/p&gt;

&lt;p&gt;Simples assim.&lt;/p&gt;

&lt;h2 id=&quot;conclusao&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Os Pacotes são uma ótima maneira de modularizar seus Projetos em unidades lógicas que podem ser compartilhadas entre outros Projetos.&lt;/p&gt;

&lt;p&gt;No entanto, manter a organização de várias versões não é um trabalho fácil. A IDE ajuda com o carregamento das versões corretas, porém nem sempre isso irá funcionar.&lt;/p&gt;

&lt;p&gt;Eu prefiro as coisas mais &lt;a href=&quot;/posts/simplicidade/&quot;&gt;simples&lt;/a&gt;, mais minimalista. Não quero ficar “dependente” da IDE para gerenciar meu trabalho. Então eu estou versionando meus Pacotes utilizando os diretórios e toda vez que adiciono uma nova dependência, marco como &lt;em&gt;preferencial&lt;/em&gt; para que a IDE sempre abra a versão configurada.&lt;/p&gt;

&lt;p&gt;Até logo.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Apr 2017 00:00:00 +0100</pubDate>
        <link>http://objectpascalprogramming.com/posts/pacotes-e-versoes-no-lazarus/</link>
        <guid isPermaLink="true">http://objectpascalprogramming.com/posts/pacotes-e-versoes-no-lazarus/</guid>
      </item>
    
  </channel>
</rss>
